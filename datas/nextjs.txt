TITLE: React Form Component with Server-Side Error Display
DESCRIPTION: This React functional component renders a sign-up form with email and password fields. It conditionally displays validation errors for each field, which are expected to be present in a `state.errors` object, typically returned from a server action. The form also disables the submit button based on a `pending` state, likely from `useFormStatus`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
<div>
  <label htmlFor="email">Email</label>
  <input id="email" name="email" placeholder="Email" />
</div>
{state?.errors?.email && <p>{state.errors.email}</p>}

<div>
  <label htmlFor="password">Password</label>
  <input id="password" name="password" type="password" />
</div>
{state?.errors?.password && (
  <div>
    <p>Password must:</p>
    <ul>
      {state.errors.password.map((error) => (
        <li key={error}>- {error}</li>
      ))}
    </ul>
  </div>
)}
<button disabled={pending} type="submit">
  Sign Up
</button>
</form>
```

----------------------------------------

TITLE: Passing Data from Server to Client Components via Props
DESCRIPTION: This snippet demonstrates how to pass data from a Server Component to a Client Component using props. It shows a Server Component fetching post data asynchronously and then rendering a 'LikeButton' Client Component, passing the fetched 'likes' count as a prop. Props passed to Client Components must be serializable by React.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'

export default async function Page({ params }: { params: { id: string } }) {
  const post = await getPost(params.id)

  return <LikeButton likes={post.likes} />
}
```

LANGUAGE: jsx
CODE:
```
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'

export default async function Page({ params }) {
  const post = await getPost(params.id)

  return <LikeButton likes={post.likes} />
}
```

LANGUAGE: tsx
CODE:
```
'use client'

export default function LikeButton({ likes }: { likes: number }) {
  // ...
}
```

LANGUAGE: jsx
CODE:
```
'use client'

export default function LikeButton({ likes }) {
  // ...
}
```

----------------------------------------

TITLE: Implement Cached User Authentication in Data Access Layer
DESCRIPTION: This TypeScript snippet demonstrates how to implement a cached `getCurrentUser` helper function within the Data Access Layer. It uses `react`'s `cache` and `next/headers` `cookies` to securely retrieve and decrypt an authentication token, returning a `User` object. This approach centralizes user authentication, prevents sensitive data exposure to client components, and allows for efficient reuse across server components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import { cache } from 'react'\nimport { cookies } from 'next/headers'\n\n// Cached helper methods makes it easy to get the same value in many places\n// without manually passing it around. This discourages passing it from Server\n// Component to Server Component which minimizes risk of passing it to a Client\n// Component.\nexport const getCurrentUser = cache(async () => {\n  const token = cookies().get('AUTH_TOKEN')\n  const decodedToken = await decryptAndValidate(token)\n  // Don't include secret tokens or private information as public fields.\n  // Use classes to avoid accidentally passing the whole object to the client.\n  return new User(decodedToken.id)\n})
```

----------------------------------------

TITLE: Revalidate fetch data after a specified time
DESCRIPTION: To revalidate data returned by a `fetch` request, use the `next.revalidate` option. This will update the data after the specified number of seconds, ensuring freshness.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://...', { next: { revalidate: 3600 } })
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://...', { next: { revalidate: 3600 } })
}
```

----------------------------------------

TITLE: Retrieve User Data with Session Verification in DAL
DESCRIPTION: This snippet illustrates the `getUser` function, which fetches user data from the database as part of the Data Access Layer (DAL). It first calls `verifySession()` to ensure the user is authenticated. If the session is valid, it queries the `users` table, explicitly selecting only necessary columns (`id`, `name`, `email`) for efficiency. The function includes error handling to catch failed data fetches and returns `null` if the session is invalid or an error occurs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_25

LANGUAGE: tsx
CODE:
```
export const getUser = cache(async () => {
  const session = await verifySession()
  if (!session) return null

  try {
    const data = await db.query.users.findMany({
      where: eq(users.id, session.userId),
      // Explicitly return the columns you need rather than the whole user object
      columns: {
        id: true,
        name: true,
        email: true,
      },
    })

    const user = data[0]

    return user
  } catch (error) {
    console.log('Failed to fetch user')
    return null
  }
})
```

LANGUAGE: jsx
CODE:
```
export const getUser = cache(async () => {
  const session = await verifySession()
  if (!session) return null

  try {
    const data = await db.query.users.findMany({
      where: eq(users.id, session.userId),
      // Explicitly return the columns you need rather than the whole user object
      columns: {
        id: true,
        name: true,
        email: true,
      },
    })

    const user = data[0]

    return user
  } catch (error) {
    console.log('Failed to fetch user')
    return null
  }
})
```

----------------------------------------

TITLE: Implement Incremental Static Regeneration with fetch in Next.js App Router
DESCRIPTION: Shows how to achieve Incremental Static Regeneration (ISR) in the `app` directory using the `fetch()` API with the `next: { revalidate: 60 }` option. This caches the request for 60 seconds, enabling automatic data revalidation for server components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_29

LANGUAGE: jsx
CODE:
```
// `app` directory

async function getPosts() {
  const res = await fetch(`https://.../posts`, { next: { revalidate: 60 } })
  const data = await res.json()

  return data.posts
}

export default async function PostList() {
  const posts = await getPosts()

  return posts.map((post) => <div>{post.name}</div>)
}
```

----------------------------------------

TITLE: Wrap Third-Party Components for Next.js Server Component Compatibility
DESCRIPTION: This snippet illustrates how to create a dedicated Client Component wrapper for a third-party component that does not inherently include the 'use client' directive. By doing so, the wrapped component becomes compatible with Next.js Server Components, allowing it to be imported and used without issues related to client-only features.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
'use client'

import { Carousel } from 'acme-carousel'

export default Carousel
```

LANGUAGE: jsx
CODE:
```
'use client'

import { Carousel } from 'acme-carousel'

export default Carousel
```

----------------------------------------

TITLE: Initializing Next.js Project Interactively (CLI)
DESCRIPTION: This snippet demonstrates how to start a new Next.js project using `create-next-app` in interactive mode. It provides commands for `npx`, `yarn`, `pnpm`, and `bunx`, allowing the user to choose their preferred package manager. The interactive prompts guide the user through project setup, including project name and TypeScript configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest
# or
yarn create next-app
# or
pnpm create next-app
# or
bunx create-next-app
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: These commands start the Next.js development server. This allows developers to run the application locally, with features like hot module replacement and live reloading, facilitating rapid development and testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Define a Dynamic Route Segment Page Component in Next.js
DESCRIPTION: This code defines a Next.js page component that utilizes a dynamic route segment, `[slug]`. The `slug` parameter is asynchronously extracted from the `params` prop and rendered, demonstrating how to create routes from dynamic data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/dynamic-routes.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  return <div>My Post: {slug}</div>
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { slug } = await params
  return <div>My Post: {slug}</div>
}
```

----------------------------------------

TITLE: Proxy Requests Using Next.js Middleware
DESCRIPTION: This snippet shows how to use Next.js middleware to proxy or rewrite incoming requests to a different external URL. It checks the current pathname and, if it matches a specific path, uses `NextResponse.rewrite` to redirect the request to the target URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_14

LANGUAGE: ts
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request: Request) {
  if (request.nextUrl.pathname === '/proxy-this-path') {
    const rewriteUrl = new URL('https://nextjs.org')
    return NextResponse.rewrite(rewriteUrl)
  }
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  if (request.nextUrl.pathname === '/proxy-this-path') {
    const rewriteUrl = new URL('https://nextjs.org')
    return NextResponse.rewrite(rewriteUrl)
  }
}
```

----------------------------------------

TITLE: Creating a Next.js Page Component
DESCRIPTION: Demonstrates how to define a page in Next.js by creating a `page` file inside the `app` directory and default exporting a React component. This component will render UI for a specific route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Page() {
  return <h1>Hello Next.js!</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <h1>Hello Next.js!</h1>
}
```

----------------------------------------

TITLE: Next.js Link Component for Automatic Prefetching
DESCRIPTION: This code snippet illustrates the use of the Next.js `<Link>` component for automatic route prefetching when links enter the user's viewport. It contrasts this behavior with a standard `<a>` tag, which does not perform prefetching, demonstrating how to set up basic navigation within a Next.js layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-linking-and-navigating.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <body>
        <nav>
          {/* Prefetched when the link is hovered or enters the viewport */}
          <Link href="/blog">Blog</Link>
          {/* No prefetching */}
          <a href="/contact">Contact</a>
        </nav>
        {children}
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Layout() {
  return (
    <html>
      <body>
        <nav>
          {/* Prefetched when the link is hovered or enters the viewport */}
          <Link href="/blog">Blog</Link>
          {/* No prefetching */}
          <a href="/contact">Contact</a>
        </nav>
        {children}
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Performing Client-Side Redirects with Next.js Server Actions
DESCRIPTION: This example illustrates how to trigger a redirect from a Client Component using a Next.js Server Action. The Client Component uses a form to invoke a server action, which then performs the actual redirect. This pattern is useful for event-driven redirects where direct client-side `redirect` is not suitable.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/redirect.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'

import { navigate } from './actions'

export function ClientRedirect() {
  return (
    <form action={navigate}>
      <input type="text" name="id" />
      <button>Submit</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { navigate } from './actions'

export function ClientRedirect() {
  return (
    <form action={navigate}>
      <input type="text" name="id" />
      <button>Submit</button>
    </form>
  )
}
```

LANGUAGE: ts
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function navigate(data: FormData) {
  redirect(`/posts/${data.get('id')}`)
}
```

LANGUAGE: js
CODE:
```
'use server'

import { redirect } from 'next/navigation'

export async function navigate(data) {
  redirect(`/posts/${data.get('id')}`)
}
```

----------------------------------------

TITLE: Nest Server Component within Client Component (Page)
DESCRIPTION: This example demonstrates how a parent Server Component (`Page`) can import and utilize the `Modal` Client Component. It passes another Server Component (`Cart`) as a child to the `Modal`, showcasing how server-rendered content can be seamlessly integrated into client-side UI structures.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import Modal from './ui/modal'
import Cart from './ui/cart'

export default function Page() {
  return (
    <Modal>
      <Cart />
    </Modal>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Modal from './ui/modal'
import Cart from './ui/cart'

export default function Page() {
  return (
    <Modal>
      <Cart />
    </Modal>
  )
}
```

----------------------------------------

TITLE: Starting Next.js Development Server (Bash)
DESCRIPTION: This snippet provides various command-line options to start the Next.js development server, allowing the application to be accessed locally. It lists common package managers like npm, yarn, pnpm, and bun for running the 'dev' script.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Managing Cookies in Next.js Server Actions
DESCRIPTION: This example illustrates how to interact with cookies within a Next.js Server Action. It shows how to retrieve a cookie's value using `cookieStore.get()`, set a new cookie with `cookieStore.set()`, and delete an existing cookie using `cookieStore.delete()`, all leveraging the `cookies` API from `next/headers`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_10

LANGUAGE: TypeScript
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function exampleAction() {
  const cookieStore = await cookies()

  // Get cookie
  cookieStore.get('name')?.value

  // Set cookie
  cookieStore.set('name', 'Delba')

  // Delete cookie
  cookieStore.delete('name')
}
```

LANGUAGE: JavaScript
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function exampleAction() {
  // Get cookie
  const cookieStore = await cookies()

  // Get cookie
  cookieStore.get('name')?.value

  // Set cookie
  cookieStore.set('name', 'Delba')

  // Delete cookie
  cookieStore.delete('name')
}
```

----------------------------------------

TITLE: Conditional Redirect with NextResponse.redirect in Next.js Middleware
DESCRIPTION: Demonstrates how to use `NextResponse.redirect` within Next.js Middleware to conditionally redirect users, for example, redirecting unauthenticated users to a login page. The middleware is configured to apply to specific paths using `config.matcher`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
import { NextResponse, NextRequest } from 'next/server'
import { authenticate } from 'auth-provider'

export function middleware(request: NextRequest) {
  const isAuthenticated = authenticate(request)

  // If the user is authenticated, continue as normal
  if (isAuthenticated) {
    return NextResponse.next()
  }

  // Redirect to login page if not authenticated
  return NextResponse.redirect(new URL('/login', request.url))
}

export const config = {
  matcher: '/dashboard/:path*',
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'
import { authenticate } from 'auth-provider'

export function middleware(request) {
  const isAuthenticated = authenticate(request)

  // If the user is authenticated, continue as normal
  if (isAuthenticated) {
    return NextResponse.next()
  }

  // Redirect to login page if not authenticated
  return NextResponse.redirect(new URL('/login', request.url))
}

export const config = {
  matcher: '/dashboard/:path*',
}
```

----------------------------------------

TITLE: Loading Google Analytics for All Routes in Next.js
DESCRIPTION: This snippet demonstrates how to integrate Google Analytics 4 across all pages of a Next.js application. It provides examples for both the App Router (TypeScript and JavaScript) by placing the `GoogleAnalytics` component in the root layout, and for the Pages Router by placing it in the custom `_app` file. The `gaId` prop is required to specify your Google Analytics Measurement ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function MyApp({ Component, pageProps }) {
  return (
    <>
      <Component {...pageProps} />
      <GoogleAnalytics gaId="G-XYZ" />
    </>
  )
}
```

----------------------------------------

TITLE: Next.js Client Component Definition
DESCRIPTION: This example shows a basic Next.js Client Component (`LikeButton`) identified by the `'use client'` directive at the top of the file. Client Components are essential for adding interactivity, managing state, and utilizing browser-specific APIs within your application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
'use client'

import { useState } from 'react'

export default function LikeButton({ likes }: { likes: number }) {
  // ...
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'

export default function LikeButton({ likes }) {
  // ...
}
```

----------------------------------------

TITLE: Create a Nested Layout for a Route Segment in Next.js
DESCRIPTION: This snippet illustrates how to create a nested layout for a specific route segment, such as `/blog`. By adding a `layout.tsx` or `layout.js` file inside the `app/blog` directory, this layout will automatically wrap all child pages and layouts within that segment, receiving `children` as a prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function BlogLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <section>{children}</section>
}
```

LANGUAGE: jsx
CODE:
```
export default function BlogLayout({ children }) {
  return <section>{children}</section>
}
```

----------------------------------------

TITLE: Revalidating Cache Tag in Next.js Server Action
DESCRIPTION: Demonstrates how to use `revalidateTag` within a Next.js Server Action to invalidate cached data after an operation, such as adding a new post. This example shows the typical pattern of importing `revalidateTag` from 'next/cache' and calling it with a specific tag like 'posts' to ensure data freshness.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidateTag.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('posts')
}
```

LANGUAGE: js
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export default async function submit() {
  await addPost()
  revalidateTag('posts')
}
```

----------------------------------------

TITLE: Create Active Navigation Links with usePathname
DESCRIPTION: This code defines a client component, `NavLinks`, that uses the `usePathname` hook from `next/navigation` to determine the current path. It dynamically applies an 'active' class to `Link` components based on the current URL, enabling visual indication of the active navigation item. This component should be extracted into a separate client file.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_15

LANGUAGE: tsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'

export function NavLinks() {
  const pathname = usePathname()

  return (
    <nav>
      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
        Home
      </Link>

      <Link
        className={`link ${pathname === '/about' ? 'active' : ''}`}
        href="/about"
      >
        About
      </Link>
    </nav>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { usePathname } from 'next/navigation'
import Link from 'next/link'

export function Links() {
  const pathname = usePathname()

  return (
    <nav>
      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href="/">
        Home
      </Link>

      <Link
        className={`link ${pathname === '/about' ? 'active' : ''}`}
        href="/about"
      >
        About
      </Link>
    </nav>
  )
}
```

----------------------------------------

TITLE: Using Next.js Layout Params Synchronously (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `params` synchronously in Next.js 15 layouts for JavaScript using the `use` hook from React. This allows for a synchronous component structure while handling the asynchronous `params` prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_14

LANGUAGE: javascript
CODE:
```
// Before
export default function Layout({ children, params }) {
  const { slug } = params
}

// After
import { use } from 'react'
export default async function Layout(props) {
  const params = use(props.params)
  const slug = params.slug

}
```

----------------------------------------

TITLE: Next.js `cookies` API Reference
DESCRIPTION: Reference for the `cookies` function and its methods in Next.js, including usage constraints and behavior in Server Components, Server Actions, and Route Handlers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cookies.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
cookies(): Promise<CookieStore>
  Description: Asynchronous function to access HTTP cookies. Returns a promise that resolves to a CookieStore object.
  Behavior:
    - Asynchronous: Must use async/await or React's `use`.
    - Dynamic API: Opts route into dynamic rendering.
    - Version 14 and earlier: Synchronous. Next.js 15 allows synchronous access for backward compatibility (deprecated).

CookieStore:
  get(name: string): Cookie | undefined
    Description: Retrieves a single cookie by its name.
    Returns: A Cookie object if found, otherwise undefined.

  getAll(name?: string): Cookie[]
    Description: Retrieves all cookies. If 'name' is specified, returns all cookies with a matching name.
    Returns: An array of Cookie objects.

  set(name: string, value: string, options?: CookieOptions): void
    Description: Sets a cookie with a name, value, and optional options.
    Constraints: Must be called in a Server Action or Route Handler. HTTP does not allow setting cookies after streaming starts.
    Example Options: { secure: boolean, httpOnly: boolean, path: string }

  set(options: CookieSetOptions): void
    Description: Sets a cookie using an object containing name, value, and other options.
    Constraints: Must be called in a Server Action or Route Handler. HTTP does not allow setting cookies after streaming starts.
    Example Options: { name: string, value: string, httpOnly: boolean, path: string }

  delete(name: string): void
    Description: Deletes a cookie by its name.
    Constraints:
      - Must be called in a Server Action or Route Handler.
      - Must belong to the same domain from which .set was called.
      - For wildcard domains, specific subdomain must be an exact match.
      - Code must be executed on the same protocol (HTTP/HTTPS) as the cookie.
```

----------------------------------------

TITLE: Implement Streaming Responses with AI SDK in Next.js Route Handlers
DESCRIPTION: Shows how to use the `@ai-sdk/openai` and `ai` libraries to stream text responses, commonly used with Large Language Models (LLMs). The `POST` handler processes incoming messages and streams the AI-generated content back to the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_15

LANGUAGE: TypeScript
CODE:
```
import { openai } from '@ai-sdk/openai'
import { StreamingTextResponse, streamText } from 'ai'

export async function POST(req: Request) {
  const { messages } = await req.json()
  const result = await streamText({
    model: openai('gpt-4-turbo'),
    messages,
  })

  return new StreamingTextResponse(result.toAIStream())
}
```

LANGUAGE: JavaScript
CODE:
```
import { openai } from '@ai-sdk/openai'
import { StreamingTextResponse, streamText } from 'ai'

export async function POST(req) {
  const { messages } = await req.json()
  const result = await streamText({
    model: openai('gpt-4-turbo'),
    messages,
  })

  return new StreamingTextResponse(result.toAIStream())
}
```

----------------------------------------

TITLE: Validating Client Input in Next.js
DESCRIPTION: This snippet demonstrates the importance of validating client-side input, such as searchParams, to prevent vulnerabilities. It contrasts an insecure approach of directly trusting client data with a secure method that re-verifies user authorization using server-side cookies and an authentication utility.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
// BAD: Trusting searchParams directly
export default async function Page({ searchParams }) {
  const isAdmin = searchParams.get('isAdmin')
  if (isAdmin === 'true') {
    // Vulnerable: relies on untrusted client data
    return <AdminPanel />
  }
}

// GOOD: Re-verify every time
import { cookies } from 'next/headers'
import { verifyAdmin } from './auth'

export default async function Page() {
  const token = cookies().get('AUTH_TOKEN')
  const isAdmin = await verifyAdmin(token)

  if (isAdmin) {
    return <AdminPanel />
  }
}
```

----------------------------------------

TITLE: Running Next.js App in Development Mode (npm)
DESCRIPTION: These commands first install all project dependencies using `npm install` and then start the Next.js development server with `npm run dev`. Once running, the application will be accessible locally at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Next.js Environment Variables Management
DESCRIPTION: Properly manage environment variables by adding `.env.*` files to `.gitignore` and prefixing only public variables with `NEXT_PUBLIC_`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_21

LANGUAGE: APIDOC
CODE:
```
Next.js Environment Variables:
  Security Best Practices:
    - Add `.env.*` files to `.gitignore`.
    - Prefix public variables with `NEXT_PUBLIC_`.
```

----------------------------------------

TITLE: Asynchronous Utility Function Refactor (Next.js 15)
DESCRIPTION: This snippet demonstrates how a utility function (misnamed as `Page` in the example, but intended to be `getToken`) should be refactored to be `async` and `await` the `cookies()` Promise before accessing its properties, resolving the synchronous access error in Next.js 15.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
export async function Page() {
  return (await cookies()).get(token)
}
```

----------------------------------------

TITLE: Running Next.js in Development Mode with npm
DESCRIPTION: These commands first install project dependencies using `npm install` and then start the Next.js development server with `npm run dev`. This allows the application to be accessed locally, typically at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Installing Dependencies and Running Next.js Development Server (npm)
DESCRIPTION: These commands are used to prepare and run the Next.js application locally using npm. `npm install` fetches all project dependencies, and `npm run dev` starts the development server, making the blog accessible at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Set a Cookie in Next.js Server Actions or Route Handlers
DESCRIPTION: Illustrates how to set a cookie using the `cookies().set(name, value, options)` method. This operation must be performed within a Server Action or Route Handler because cookie state modifications require setting response headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cookies.mdx#_snippet_5

LANGUAGE: ts
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function create(data) {
  const cookieStore = await cookies()

  cookieStore.set('name', 'lee')
  // or
  cookieStore.set('name', 'lee', { secure: true })
  // or
  cookieStore.set({
    name: 'name',
    value: 'lee',
    httpOnly: true,
    path: '/',
  })
}
```

LANGUAGE: js
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function create(data) {
  const cookieStore = await cookies()

  cookieStore.set('name', 'lee')
  // or
  cookieStore.set('name', 'lee', { secure: true })
  // or
  cookieStore.set({
    name: 'name',
    value: 'lee',
    httpOnly: true,
    path: '/',
  })
}
```

----------------------------------------

TITLE: Integrate Next.js Web Vitals with Google Analytics (gtag.js) in JavaScript
DESCRIPTION: This example shows how to send Next.js Web Vitals metrics to Google Analytics via `window.gtag`. It formats metric values as integers and includes `event_label` and `non_interaction` for accurate analytics reporting.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_5

LANGUAGE: js
CODE:
```
useReportWebVitals((metric) => {
  // Use `window.gtag` if you initialized Google Analytics as this example:
  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics
  window.gtag('event', metric.name, {
    value: Math.round(
      metric.name === 'CLS' ? metric.value * 1000 : metric.value
    ), // values must be integers
    event_label: metric.id, // id unique to current page load
    non_interaction: true, // avoids affecting bounce rate.
  })
})
```

----------------------------------------

TITLE: Correctly Calling `cookies()` in Next.js Page Component
DESCRIPTION: This snippet demonstrates the correct way to call the `cookies()` function within a Next.js Page component. It highlights that `cookies()` must be accessed inside the `Page` function, which executes within the request scope, to prevent errors related to dynamic API calls made outside of a valid request context.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-dynamic-api-wrong-context.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = await cookies()
  return ...
}
```

----------------------------------------

TITLE: Revalidating A Specific URL with revalidatePath
DESCRIPTION: This example demonstrates how to revalidate a single, specific URL on the next page visit using `revalidatePath`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'
revalidatePath('/blog/post-1')
```

----------------------------------------

TITLE: Starting Next.js Development Server (Bash)
DESCRIPTION: This snippet provides various command-line options to start the Next.js development server. It allows developers to run the application locally for testing and development purposes, with hot-reloading enabled for immediate feedback on code changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw-empty/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Fetching Data in a Server Component - TypeScript
DESCRIPTION: This example shows how to perform server-side data fetching directly within an `async` Server Component. It fetches blog posts from an API and renders them, leveraging the ability of Server Components to use `async`/`await`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-async-client-component.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Resolve Next.js Crypto API SSR Issue with React Suspense Fallback
DESCRIPTION: This solution demonstrates how to wrap a Client Component that synchronously calls a crypto API (e.g., `crypto.randomUUID()`) with a React `Suspense` boundary. By providing a `fallback` UI, Next.js can prerender a placeholder during Server-Side Rendering (SSR) and then hydrate the actual component with a unique random value once the page is requested by the user, ensuring the value is not fixed.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto-client.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
'use client'

export default function Page() {
  const newBlogId = crypto.randomUUID()
  return <BlogAuthoringView id={newBlogId} />
}
```

LANGUAGE: jsx
CODE:
```
"use client"

import { Suspense } from 'react'

export default function Page() {
  return (
    <Suspense fallback={<BlogAuthorSkeleton />}>
      <DynamicAuthoringView />
    </Suspense>
  )
}

function BlogAuthorSkeleton() {
  ...
}

function DynamicAuthoringView() {
  const newBlogId = crypto.randomUUID()
  return <BlogAuthoringView id={newBlogId} />
}
```

----------------------------------------

TITLE: APIDOC: Middleware Matcher Property
DESCRIPTION: Details on the `matcher` option within the middleware `config` object. It allows targeting specific paths for middleware execution using strings, arrays, regular expressions, and objects with detailed matching conditions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Matcher property:
  - Type: string | string[] | object[]
  - Purpose: Target specific paths for Middleware execution.
  - Simple usage:
    - Single path: '/about'
    - Multiple paths: ['/about', '/contact']
  - Complex usage (array of objects):
    - source: string (path or pattern)
    - regexp (optional): string (regular expression for fine-tuning)
    - locale (optional): boolean (false to ignore locale-based routing)
    - has (optional): array of objects (conditions based on presence of headers, query params, cookies)
      - type: 'header' | 'query' | 'cookie'
      - key: string
      - value: string
    - missing (optional): array of objects (conditions based on absence of headers, query params, cookies)
      - type: 'header' | 'query' | 'cookie'
      - key: string
      - value: string
  - Configured matchers rules:
    1. MUST start with '/'
    2. Can include named parameters: '/about/:path'
    3. Can have modifiers on named parameters: '/about/:path*', '/about/:path?', '/about/:path+'
    4. Can use regular expression enclosed in parenthesis: '/about/(.*)'
  - Constraints:
    - Values must be constants for static analysis at build-time.
    - '/public' is considered '/public/index' for backward compatibility.
```

----------------------------------------

TITLE: Apply Title Template with Prefix/Suffix in Next.js
DESCRIPTION: This snippet demonstrates how to use `title.template` in Next.js to add a consistent prefix or suffix to titles defined in child route segments. It shows configuration in both `layout.tsx` and `layout.js`, requiring a `title.default` when a template is used, and how a child page's title is then augmented.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: {
    template: '%s | Acme',
    default: 'Acme', // a default is required when creating a template
  },
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: {
    template: '%s | Acme',
    default: 'Acme', // a default is required when creating a template
  },
}
```

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'About',
}

// Output: <title>About | Acme</title>
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'About',
}

// Output: <title>About | Acme</title>
```

----------------------------------------

TITLE: Configure Various Next.js Metadata Fields
DESCRIPTION: This example illustrates how to define a variety of metadata fields in Next.js, such as `generator`, `applicationName`, `referrer`, `keywords`, `authors`, `creator`, `publisher`, and `formatDetection`. It includes the JSX configuration and the corresponding HTML `<head>` output, showcasing how these properties translate into standard meta tags and link elements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
export const metadata = {
  generator: 'Next.js',
  applicationName: 'Next.js',
  referrer: 'origin-when-cross-origin',
  keywords: ['Next.js', 'React', 'JavaScript'],
  authors: [{ name: 'Seb' }, { name: 'Josh', url: 'https://nextjs.org' }],
  creator: 'Jiachi Liu',
  publisher: 'Sebastian Markbåge',
  formatDetection: {
    email: false,
    address: false,
    telephone: false,
  },
}
```

LANGUAGE: html
CODE:
```
<meta name="application-name" content="Next.js" />
<meta name="author" content="Seb" />
<link rel="author" href="https://nextjs.org" />
<meta name="author" content="Josh" />
<meta name="generator" content="Next.js" />
<meta name="keywords" content="Next.js,React,JavaScript" />
<meta name="referrer" content="origin-when-cross-origin" />
<meta name="color-scheme" content="dark" />
<meta name="creator" content="Jiachi Liu" />
<meta name="publisher" content="Sebastian Markbåge" />
<meta name="format-detection" content="telephone=no, address=no, email=no" />
```

----------------------------------------

TITLE: Statically Generate Dynamic Routes with generateStaticParams
DESCRIPTION: Demonstrates how to use `generateStaticParams` to fetch data and return an array of `params` to pre-render dynamic route segments like `[slug]` at build time. Also shows the corresponding `Page` component receiving the `params`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-static-params.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  // ...
}
```

LANGUAGE: jsx
CODE:
```
// Return a list of `params` to populate the [slug] dynamic segment
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default async function Page({ params }) {
  const { slug } = await params
  // ...
}
```

----------------------------------------

TITLE: Accessing Runtime Environment Variables in App Router
DESCRIPTION: This example demonstrates how to safely access environment variables at runtime within the Next.js App Router. By using dynamic rendering features, such as importing `connection` from `next/server` or other Dynamic APIs (cookies, headers), the environment variable `process.env.MY_VALUE` is evaluated at request time on the server, allowing for different values across environments without rebuilding.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

LANGUAGE: jsx
CODE:
```
import { connection } from 'next/server'

export default async function Component() {
  await connection()
  // cookies, headers, and other Dynamic APIs
  // will also opt into dynamic rendering, meaning
  // this env variable is evaluated at runtime
  const value = process.env.MY_VALUE
  // ...
}
```

----------------------------------------

TITLE: Bootstrapping Next.js Project with TypeScript Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application using the `create-next-app` CLI, specifically leveraging the `with-typescript` example. They create a new directory `with-typescript-app` pre-configured for TypeScript development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npx create-next-app --example with-typescript with-typescript-app
```

LANGUAGE: Shell
CODE:
```
yarn create next-app --example with-typescript with-typescript-app
```

LANGUAGE: Shell
CODE:
```
pnpm create next-app --example with-typescript with-typescript-app
```

----------------------------------------

TITLE: Creating Client Components with 'use client' Directive
DESCRIPTION: This snippet demonstrates how to declare a React component as a Client Component in Next.js by adding the 'use client' directive at the top of the file, above imports. It shows a simple interactive counter component that uses React's useState hook, highlighting the boundary between Server and Client module graphs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>{count} likes</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>{count} likes</p>
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  )
}
```

----------------------------------------

TITLE: Integrate Client Context Provider in Server Component (RootLayout)
DESCRIPTION: This snippet shows how a Server Component, such as `RootLayout`, can import and wrap its children with a Client Component context provider like `ThemeProvider`. This pattern makes the context available to all other Client Components within the application's tree, enabling global state sharing while respecting Server Component limitations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import ThemeProvider from './theme-provider'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html>
      <body>
        <ThemeProvider>{children}</ThemeProvider>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import ThemeProvider from './theme-provider'

export default function RootLayout({ children }) {
  return (
    <html>
      <body>
        <ThemeProvider>{children}</ThemeProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Running Next.js Development Server Locally
DESCRIPTION: These commands start the Next.js development server locally using either `npm` or `yarn`. This allows developers to work on the application with hot-reloading and access it at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-multi-env/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
```

----------------------------------------

TITLE: Dynamic Segment `params` Prop Structure
DESCRIPTION: This API documentation illustrates the structure of the `params` prop for a basic dynamic route segment (`[slug]`), showing how the URL path maps to the `slug` property in the `params` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/dynamic-routes.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Route: app/blog/[slug]/page.js
Example URL: /blog/a
params: { slug: 'a' }

Route: app/blog/[slug]/page.js
Example URL: /blog/b
params: { slug: 'b' }

Route: app/blog/[slug]/page.js
Example URL: /blog/c
params: { slug: 'c' }
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: These commands initiate the development server for a Next.js application using various popular package managers. Running any of these commands will start the server, typically accessible at `http://localhost:3000`, enabling live page updates during development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Next.js Server Component Fetching Data and Using Client Component
DESCRIPTION: This example demonstrates a Next.js Server Component (`Page`) that asynchronously fetches data and passes it as props to a Client Component (`LikeButton`). It illustrates how Server Components can handle data fetching efficiently on the server while delegating interactive UI elements to Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'

export default async function Page({ params }: { params: { id: string } }) {
  const post = await getPost(params.id)

  return (
    <div>
      <main>
        <h1>{post.title}</h1>
        {/* ... */}
        <LikeButton likes={post.likes} />
      </main>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import LikeButton from '@/app/ui/like-button'
import { getPost } from '@/lib/data'

export default async function Page({ params }) {
  const post = await getPost(params.id)

  return (
    <div>
      <main>
        <h1>{post.title}</h1>
        {/* ... */}
        <LikeButton likes={post.likes} />
      </main>
    </div>
  )
}
```

----------------------------------------

TITLE: Implement ISR with Next.js App Router
DESCRIPTION: This example demonstrates Incremental Static Regeneration using the App Router. It defines `revalidate` for cache invalidation, `dynamicParams` for on-demand rendering of unknown paths, and `generateStaticParams` to pre-render known blog post IDs at build time. The `Page` component fetches and displays individual blog post content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
interface Post {
  id: string
  title: string
  content: string
}

// Next.js will invalidate the cache when a
// request comes in, at most once every 60 seconds.
export const revalidate = 60

// We'll prerender only the params from `generateStaticParams` at build time.
// If a request comes in for a path that hasn't been generated,
// Next.js will server-render the page on-demand.
export const dynamicParams = true // or false, to 404 on unknown paths

export async function generateStaticParams() {
  const posts: Post[] = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  return posts.map((post) => ({
    id: String(post.id),
  }))
}

export default async function Page({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params
  const post: Post = await fetch(`https://api.vercel.app/blog/${id}`).then(
    (res) => res.json()
  )
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
// Next.js will invalidate the cache when a
// request comes in, at most once every 60 seconds.
export const revalidate = 60

// We'll prerender only the params from `generateStaticParams` at build time.
// If a request comes in for a path that hasn't been generated,
// Next.js will server-render the page on-demand.
export const dynamicParams = true // or false, to 404 on unknown paths

export async function generateStaticParams() {
  const posts = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  return posts.map((post) => ({
    id: String(post.id),
  }))
}

export default async function Page({ params }) {
  const { id } = await params
  const post = await fetch(`https://api.vercel.app/blog/${id}`).then((res) =>
    res.json()
  )
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Fetch Data in Next.js Server Components with `fetch` API
DESCRIPTION: This snippet demonstrates how to fetch data in a Next.js Server Component using the native `fetch` API. The component is made asynchronous, and the `fetch` call is awaited to retrieve and parse JSON data, which is then rendered as a list of posts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Upgrade Next.js, React, and ESLint to version 13
DESCRIPTION: Instructions to update core Next.js dependencies to version 13 using various package managers. This includes Next.js, React, React DOM, and eslint-config-next. For TypeScript users, it's also crucial to update @types/react and @types/react-dom.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/upgrading/version-13.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm i next@13 react@latest react-dom@latest eslint-config-next@13
```

LANGUAGE: bash
CODE:
```
yarn add next@13 react@latest react-dom@latest eslint-config-next@13
```

LANGUAGE: bash
CODE:
```
pnpm i next@13 react@latest react-dom@latest eslint-config-next@13
```

LANGUAGE: bash
CODE:
```
bun add next@13 react@latest react-dom@latest eslint-config-next@13
```

----------------------------------------

TITLE: Configure Metadata in Next.js Layouts
DESCRIPTION: This snippet demonstrates how to configure page metadata, such as the title, using Next.js's `metadata` object in root layouts. It highlights the use of the `Metadata` type for TypeScript and the general approach for JavaScript, emphasizing that direct `<head>` tag manipulation should be avoided in favor of Next.js's Metadata APIs for advanced features like streaming and de-duplication.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Next.js',
}

export default function Layout({ children }: { children: React.ReactNode }) {
  return '...'
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Next.js',
}

export default function Layout({ children }) {
  return '...'
}
```

----------------------------------------

TITLE: Secure Next.js API Route with Authentication and Role-Based Authorization
DESCRIPTION: This snippet demonstrates how to implement robust security for Next.js API Routes. It includes checks for user authentication using `getSession` and then verifies if the authenticated user possesses the required 'admin' role, returning 401 Unauthorized errors if conditions are not met.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_34

LANGUAGE: typescript
CODE:
```
import { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const session = await getSession(req)

  // Check if the user is authenticated
  if (!session) {
    res.status(401).json({
      error: 'User is not authenticated',
    })
    return
  }

  // Check if the user has the 'admin' role
  if (session.user.role !== 'admin') {
    res.status(401).json({
      error: 'Unauthorized access: User does not have admin privileges.',
    })
    return
  }

  // Proceed with the route for authorized users
  // ... implementation of the API Route
}
```

LANGUAGE: javascript
CODE:
```
export default async function handler(req, res) {
  const session = await getSession(req)

  // Check if the user is authenticated
  if (!session) {
    res.status(401).json({
      error: 'User is not authenticated',
    })
    return
  }

  // Check if the user has the 'admin' role
  if (session.user.role !== 'admin') {
    res.status(401).json({
      error: 'Unauthorized access: User does not have admin privileges.',
    })
    return
  }

  // Proceed with the route for authorized users
  // ... implementation of the API Route
}
```

----------------------------------------

TITLE: Sanitize User Data for Public Consumption
DESCRIPTION: This `ts` snippet demonstrates how to sanitize user data before it's passed to client-side components. The `getUser` function fetches all user data but then explicitly returns only the `name` field, which is considered public. This ensures that only necessary and non-sensitive information is exposed, mitigating the risks associated with direct database queries in Server Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
import { sql } from './db'\n\nexport async function getUser(slug: string) {\n  const [rows] = await sql`SELECT * FROM user WHERE slug = ${slug}`\n  const user = rows[0]\n\n  // Return only the public fields\n  return {\n    name: user.name,\n  }\n}
```

----------------------------------------

TITLE: Starting Next.js Development Server (Bash)
DESCRIPTION: This snippet provides various command-line options to start the Next.js development server. It lists common package managers like npm, yarn, pnpm, and bun, allowing developers to choose their preferred method to run the application locally.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw-empty/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Starting Next.js Development Server - Bash
DESCRIPTION: This snippet provides commands to start the Next.js development server using various package managers. Running one of these commands launches the application locally, typically accessible at http://localhost:3000, enabling real-time page updates during development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-empty/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Implement Optimistic UI Updates with React useOptimistic Hook
DESCRIPTION: This snippet illustrates how to use the `useOptimistic` hook to provide immediate UI feedback before a server function completes. It allows the UI to update optimistically with a new message, then reverts or confirms the state based on the actual server response. This improves perceived performance by reducing latency.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
'use client'

import { useOptimistic } from 'react'
import { send } from './actions'

type Message = {
  message: string
}

export function Thread({ messages }: { messages: Message[] }) {
  const [optimisticMessages, addOptimisticMessage] = useOptimistic<
    Message[],
    string
  >(messages, (state, newMessage) => [...state, { message: newMessage }])

  const formAction = async (formData: FormData) => {
    const message = formData.get('message') as string
    addOptimisticMessage(message)
    await send(message)
  }

  return (
    <div>
      {optimisticMessages.map((m, i) => (
        <div key={i}>{m.message}</div>
      ))}
      <form action={formAction}>
        <input type="text" name="message" />
        <button type="submit">Send</button>
      </form>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useOptimistic } from 'react'
import { send } from './actions'

export function Thread({ messages }) {
  const [optimisticMessages, addOptimisticMessage] = useOptimistic(
    messages,
    (state, newMessage) => [...state, { message: newMessage }]
  )

  const formAction = async (formData) => {
    const message = formData.get('message')
    addOptimisticMessage(message)
    await send(message)
  }

  return (
    <div>
      {optimisticMessages.map((m) => (
        <div>{m.message}</div>
      ))}
      <form action={formAction}>
        <input type="text" name="message" />
        <button type="submit">Send</button>
      </form>
    </div>
  )
}
```

----------------------------------------

TITLE: Configure Next.js Build and Start Scripts in package.json
DESCRIPTION: This JSON snippet illustrates the essential `scripts` configuration within a `package.json` file for a Next.js application. It defines commands for development (`dev`), production build (`build`), and starting the production server (`start`), which are crucial for deploying Next.js as a Node.js server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/16-deploying.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  }
}
```

----------------------------------------

TITLE: Handle Mutations with Next.js Server Actions (GOOD Example)
DESCRIPTION: This example demonstrates the recommended way to perform mutations in Next.js using Server Actions. By encapsulating the mutation logic (e.g., `logout`) within a Server Action and invoking it via a `<form>` element, side-effects are properly managed, preventing accidental triggers from GET requests and enhancing security.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
// GOOD: Using Server Actions to handle mutations
import { logout } from './actions'

export default function Page() {
  return (
    <>
      <UserProfile />
      <form action={logout}>
        <button type="submit">Logout</button>
      </form>
    </>
  )
}
```

----------------------------------------

TITLE: Creating a Reusable Layout Component in Next.js
DESCRIPTION: This snippet defines a reusable `Layout` React component in `components/layout.js`. It imports `Navbar` and `Footer` components and renders them around its `children` prop, providing a consistent structural wrapper for multiple pages. This component is designed to be wrapped around page content to ensure a shared UI.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Navbar from './navbar'
import Footer from './footer'

export default function Layout({ children }) {
  return (
    <>
      <Navbar />
      <main>{children}</main>
      <Footer />
    </>
  )
}
```

----------------------------------------

TITLE: Vitest Unit Test for Next.js App Router Page
DESCRIPTION: A unit test using Vitest and React Testing Library to verify that the Next.js App Router `<Page />` component successfully renders a 'Home' heading.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/vitest.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { expect, test } from 'vitest'
import { render, screen } from '@testing-library/react'
import Page from '../app/page'

test('Page', () => {
  render(<Page />)
  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()
})
```

LANGUAGE: jsx
CODE:
```
import { expect, test } from 'vitest'
import { render, screen } from '@testing-library/react'
import Page from '../app/page'

test('Page', () => {
  render(<Page />)
  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()
})
```

----------------------------------------

TITLE: Displaying Form Submission Loading State with React
DESCRIPTION: This snippet illustrates how to manage and display a loading state during a form submission using React's `useState` hook. The `isLoading` state is set to `true` when the form submission begins and reset to `false` upon completion (success or failure), disabling the submit button and changing its text to provide user feedback.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import React, { useState, FormEvent } from 'react'

export default function Page() {
  const [isLoading, setIsLoading] = useState<boolean>(false)

  async function onSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()
    setIsLoading(true) // Set loading to true when the request starts

    try {
      const formData = new FormData(event.currentTarget)
      const response = await fetch('/api/submit', {
        method: 'POST',
        body: formData,
      })

      // Handle response if necessary
      const data = await response.json()
      // ...
    } catch (error) {
      // Handle error if necessary
      console.error(error)
    } finally {
      setIsLoading(false) // Set loading to false when the request completes
    }
  }

  return (
    <form onSubmit={onSubmit}>
      <input type="text" name="name" />
      <button type="submit" disabled={isLoading}>
        {isLoading ? 'Loading...' : 'Submit'}
      </button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
import React, { useState } from 'react'

export default function Page() {
  const [isLoading, setIsLoading] = useState(false)

  async function onSubmit(event) {
    event.preventDefault()
    setIsLoading(true) // Set loading to true when the request starts

    try {
      const formData = new FormData(event.currentTarget)
      const response = await fetch('/api/submit', {
        method: 'POST',
        body: formData,
      })

      // Handle response if necessary
      const data = await response.json()
      // ...
    } catch (error) {
      // Handle error if necessary
      console.error(error)
    } finally {
      setIsLoading(false) // Set loading to false when the request completes
    }
  }

  return (
    <form onSubmit={onSubmit}>
      <input type="text" name="name" />
      <button type="submit" disabled={isLoading}>
        {isLoading ? 'Loading...' : 'Submit'}
      </button>
    </form>
  )
}
```

----------------------------------------

TITLE: Creating a Custom 500 Page in Next.js (JSX)
DESCRIPTION: This snippet defines a custom 500 error page component in Next.js. By creating `pages/500.js`, this component will be statically generated at build time and served when a server-side error occurs. It displays a '500 - Server-side error occurred' heading.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/08-custom-error.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export default function Custom500() {
  return <h1>500 - Server-side error occurred</h1>
}
```

----------------------------------------

TITLE: Basic Usage of create-next-app CLI
DESCRIPTION: Shows the fundamental command structure for initializing a Next.js project using `create-next-app` with optional project name and configuration flags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/create-next-app.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest [project-name] [options]
```

----------------------------------------

TITLE: Define Inline Server Functions with `use server` (Next.js/React)
DESCRIPTION: The `use server` directive can be placed inline at the top of a specific function to mark only that function as a server function. This allows a server component to define and use a server action directly within its scope, such as an `updatePost` function that revalidates a path after saving data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-server.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { EditPost } from './edit-post'
import { revalidatePath } from 'next/cache'

export default async function PostPage({ params }: { params: { id: string } }) {
  const post = await getPost(params.id)

  async function updatePost(formData: FormData) {
    'use server'
    await savePost(params.id, formData)
    revalidatePath(`/posts/${params.id}`)
  }

  return <EditPost updatePostAction={updatePost} post={post} />
}
```

LANGUAGE: jsx
CODE:
```
import { EditPost } from './edit-post'
import { revalidatePath } from 'next/cache'

export default async function PostPage({ params }) {
  const post = await getPost(params.id)

  async function updatePost(formData) {
    'use server'
    await savePost(params.id, formData)
    revalidatePath(`/posts/${params.id}`)
  }

  return <EditPost updatePostAction={updatePost} post={post} />
}
```

----------------------------------------

TITLE: Next.js Tainting for Sensitive Data Protection
DESCRIPTION: Prevent sensitive data from being exposed to the client by tainting data objects or specific values in Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_19

LANGUAGE: APIDOC
CODE:
```
Next.js Tainting:
  Purpose: Prevent sensitive server-side data from reaching the client.
  Mechanism: Mark data objects or specific values as 'tainted'.
```

----------------------------------------

TITLE: Define Base Metadata in Next.js Root Layout
DESCRIPTION: Sets up default metadata for the entire application within `app/layout.js`, including a global title and Open Graph properties. This serves as the base for child pages to inherit or overwrite.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_47

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Acme',
  openGraph: {
    title: 'Acme',
    description: 'Acme is a...',}
}
```

----------------------------------------

TITLE: Implementing Server-Side Form Validation with Zod (TypeScript)
DESCRIPTION: This TypeScript snippet extends a Next.js API Route to include server-side form validation using the Zod library. It defines a Zod schema to validate the request body. The `schema.parse(req.body)` call will throw an error if validation fails, ensuring data integrity before further processing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'
import { z } from 'zod'

const schema = z.object({
  // ...
})

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const parsed = schema.parse(req.body)
  // ...
}
```

----------------------------------------

TITLE: Starting Next.js Development Server (Bash)
DESCRIPTION: This snippet provides commands to initiate the Next.js development server using different JavaScript package managers. Executing any of these commands will launch the application locally, typically accessible via `http://localhost:3000`, allowing for real-time page updates during development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw-empty/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Starting Next.js Development Server (Bash)
DESCRIPTION: This snippet provides various command-line options to start the Next.js development server. It allows developers to run the application locally for testing and development purposes, with auto-updates on file changes. The server typically runs on `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-empty/ts/README-template.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Tagging fetch requests for cache revalidation in Next.js
DESCRIPTION: To enable `revalidateTag` functionality, `fetch` requests can be tagged using the `next.tags` option. This allows specific cache entries associated with the tag to be revalidated later. The example demonstrates tagging user data fetched by ID with the 'user' tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export async function getUserById(id: string) {
  const data = await fetch(`https://...`, {
    next: {
      tags: ['user'],
    },
  })
}
```

LANGUAGE: jsx
CODE:
```
export async function getUserById(id) {
  const data = await fetch(`https://...`, {
    next: {
      tags: ['user'],
    },
  })
}
```

----------------------------------------

TITLE: GOOD Example: Pass Sanitized Data to Client Component
DESCRIPTION: This `tsx` snippet shows the recommended approach for component-level data access when passing data to a Client Component. It imports `getUser` (which sanitizes data) and passes only the `publicProfile` object to the `Profile` component. This ensures that the Client Component receives only the necessary and non-sensitive data, preventing accidental exposure of private information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { getUser } from '../data/user'\nimport Profile from './ui/profile'\n\nexport default async function Page({\n  params: { slug },\n}: {\n  params: { slug: string }\n}) {\n  const publicProfile = await getUser(slug)\n  return <Profile user={publicProfile} />\n}
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: This command starts the Next.js development server, enabling hot-reloading and other development features. It is typically run in the root directory of the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#_snippet_5

LANGUAGE: Bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Define Server Functions for Client Component import (TypeScript/JavaScript)
DESCRIPTION: Shows how to create a Server Function in a separate file with the 'use server' directive at the top of the file. This pattern enables Client Components to import and invoke these server-side functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
'use server'

export async function createPost() {}
```

LANGUAGE: js
CODE:
```
'use server'

export async function createPost() {}
```

----------------------------------------

TITLE: Running Next.js Application in Development Mode with npm
DESCRIPTION: These commands are used to install project dependencies and then start the Next.js development server. 'npm install' fetches all required packages, and 'npm run dev' launches the application, making it accessible locally, typically at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Updating Next.js and React Dependencies in package.json (Diff)
DESCRIPTION: This snippet shows the necessary changes in `package.json` to upgrade Next.js, React, and React-DOM to their respective React 19 compatible versions. It also includes `pnpm` overrides for `@types/react` and `@types/react-dom` to ensure correct type resolution for React 19.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-codemod/bin/__testfixtures__/next-14-installed/README.md#_snippet_0

LANGUAGE: diff
CODE:
```
diff --git a/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json b/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json
index 5ec4c37f0b..131f5b9f4a 100644
--- a/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json
+++ b/packages/next-codemod/bin/__testfixtures__/next-14-installed/package.json
@@ -4,10 +4,16 @@
     "dev": "next dev"
   },
   "dependencies": {
-    "next": "14.3.0-canary.44",
-    "react": "18.2.0",
-    "react-dom": "18.2.0",
-    "@types/react": "^18.2.0",
-    "@types/react-dom": "^18.2.0"
+    "next": "15.0.4-canary.43",
+    "react": "19.0.0",
+    "react-dom": "19.0.0",
+    "@types/react": "19.0.0",
+    "@types/react-dom": "19.0.0"
+  },
+  "pnpm": {
+    "overrides": {
+      "@types/react": "19.0.0",
+      "@types/react-dom": "19.0.0"
+    }
   }
 }
```

----------------------------------------

TITLE: Running Next.js Development Server (Bash)
DESCRIPTION: This snippet provides various command-line options to start the Next.js development server. It allows developers to run the application locally for development and testing, with automatic page updates on file changes. The commands use different package managers (npm, yarn, pnpm, bun) to execute the 'dev' script defined in the project's 'package.json'.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Hoist Data Fetching to Next.js Root Layout with Promise
DESCRIPTION: This snippet demonstrates how to initiate server-side data fetching in the Next.js root layout by calling a function that returns a Promise (e.g., `getUser()`) and passing this Promise directly to a `UserProvider` without awaiting it. This allows Next.js to start data fetching early on the server, improving performance and enabling streaming.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { UserProvider } from './user-provider'
import { getUser } from './user' // some server-side function

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  let userPromise = getUser() // do NOT await

  return (
    <html lang="en">
      <body>
        <UserProvider userPromise={userPromise}>{children}</UserProvider>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { UserProvider } from './user-provider'
import { getUser } from './user' // some server-side function

export default function RootLayout({ children }) {
  let userPromise = getUser() // do NOT await

  return (
    <html lang="en">
      <body>
        <UserProvider userPromise={userPromise}>{children}</UserProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Implement Authentication for Server Functions (Next.js/React)
DESCRIPTION: It is crucial to implement authentication and authorization checks within server functions to protect sensitive operations. This example demonstrates how to authenticate a user token before allowing a `createUser` operation to proceed, throwing an error if unauthorized.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-server.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use server'

import { db } from '@/lib/db' // Your database client
import { authenticate } from '@/lib/auth' // Your authentication library

export async function createUser(
  data: { name: string; email: string },
  token: string
) {
  const user = authenticate(token)
  if (!user) {
    throw new Error('Unauthorized')
  }
  const newUser = await db.user.create({ data })
  return newUser
}
```

LANGUAGE: jsx
CODE:
```
'use server'

import { db } from '@/lib/db' // Your database client
import { authenticate } from '@/lib/auth' // Your authentication library

export async function createUser(data, token) {
  const user = authenticate(token)
  if (!user) {
    throw new Error('Unauthorized')
  }
  const newUser = await db.user.create({ data })
  return newUser
}
```

----------------------------------------

TITLE: Define `fetchUsers` Server Function with `use server` (Next.js/React)
DESCRIPTION: This snippet shows how to define a server function, `fetchUsers`, in a dedicated file using the `use server` directive. This function is designed to retrieve all users from a database on the server side.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-server.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
'use server'
import { db } from '@/lib/db' // Your database client

export async function fetchUsers() {
  const users = await db.user.findMany()
  return users
}
```

LANGUAGE: jsx
CODE:
```
'use server'
import { db } from '@/lib/db' // Your database client

export async function fetchUsers() {
  const users = await db.user.findMany()
  return users
}
```

----------------------------------------

TITLE: Next.js: Statically Generate Dynamic Segments with `generateStaticParams`
DESCRIPTION: This snippet demonstrates how to use the `generateStaticParams` function in Next.js to pre-render dynamic route segments at build time. By fetching data (e.g., posts from an API) and returning an array of parameters (e.g., `slug`), this function ensures that specific instances of dynamic routes are statically generated, significantly improving performance by avoiding dynamic rendering at request time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/04-linking-and-navigating.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  // ...
}
```

LANGUAGE: jsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}

export default async function Page({ params }) {
  const { slug } = await params
  // ...
}
```

----------------------------------------

TITLE: Manage Form Pending State with React useActionState Hook
DESCRIPTION: This snippet demonstrates how to use the `useActionState` hook to manage the pending state of a form submission. It exposes a `pending` boolean that can be used to disable the submit button or show a loading indicator while the form action is being executed. The `createUser` action is an assumed server function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      {/* Other form elements */}
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      {/* Other form elements */}
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Configuring VS Code for Next.js Debugging (launch.json)
DESCRIPTION: This JSON configuration file (`.vscode/launch.json`) sets up various debugging profiles for a Next.js application within VS Code. It includes configurations for debugging the server-side (Node.js), client-side (Chrome/Firefox), and a combined full-stack debugging session. Parameters like `command`, `url`, `program`, and `serverReadyAction` are used to define how the debugger attaches and launches the application. It requires the Firefox Debugger extension for Firefox configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/debugging.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Next.js: debug server-side",
      "type": "node-terminal",
      "request": "launch",
      "command": "npm run dev"
    },
    {
      "name": "Next.js: debug client-side",
      "type": "chrome",
      "request": "launch",
      "url": "http://localhost:3000"
    },
    {
      "name": "Next.js: debug client-side (Firefox)",
      "type": "firefox",
      "request": "launch",
      "url": "http://localhost:3000",
      "reAttach": true,
      "pathMappings": [
        {
          "url": "webpack://_N_E",
          "path": "${workspaceFolder}"
        }
      ]
    },
    {
      "name": "Next.js: debug full stack",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/node_modules/next/dist/bin/next",
      "runtimeArgs": ["--inspect"],
      "skipFiles": ["<node_internals>/**"],
      "serverReadyAction": {
        "action": "debugWithEdge",
        "killOnServerStop": true,
        "pattern": "- Local:.+(https?://.+)",
        "uriFormat": "%s",
        "webRoot": "${workspaceFolder}"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Using Next.js Image Component in app/page.js
DESCRIPTION: Demonstrates how to import and use the `next/image` component in a Next.js `app/page.js` file to display an image with specified width, height, and alt text, enabling automatic image optimization features.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      width={500}
      height={500}
      alt="Picture of the author"
    />
  )
}
```

----------------------------------------

TITLE: Ensure `Math.random()` is Client-Side Only in Next.js Components
DESCRIPTION: This approach illustrates how to restrict `Math.random()` calls to the browser environment by moving them into React effects or event handlers, or by using `useRef` to initialize the value lazily. Since React does not run effects or events during server rendering, this prevents the component from being excluded from prerendered HTML and avoids hydration errors when the random value is only intended for client-side use.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-random-client.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
'use client'

export default function Workflow({ currentStep, onNext, onPrev }) {
  const [id] = useState(() => Math.random().toString(36).slice(2))

  const next = onNext
    ? () => {
        trackEvent(id, 'forward')
        onNext()
      }
    : null

  const previous = onPrev
    ? () => {
        trackEvent(id, 'previous')
        onPrev()
      }
    : null

  return (
    <>
      {currentStep}
      {next ? <button onClick={next}>Next</button> : null}
      {previous ? <button onClick={previous}>Previous</button> : null}
    </>
  )
}
```

LANGUAGE: JSX
CODE:
```
'use client'

import { useRef } from 'react'

function getOrCreateId(ref) {
  if (!ref.current) {
    ref.current = Math.random().toString(36).slice(2)
  }
  return ref.current
}

export default function Workflow({ currentStep, onNext, onPrev }) {
  const idRef = useRef(null)

  const next = onNext
    ? () => {
        trackEvent(getOrCreateId(idRef), 'forward')
        onNext()
      }
    : null

  const previous = onPrev
    ? () => {
        trackEvent(getOrCreateId(idRef), 'previous')
        onPrev()
      }
    : null

  return (
    <>
      {currentStep}
      {next ? <button onClick={next}>Next</button> : null}
      {previous ? <button onClick={previous}>Previous</button> : null}
    </>
  )
}
```

----------------------------------------

TITLE: Accessing Router Instance with useRouter Hook in Next.js (JSX)
DESCRIPTION: This snippet demonstrates how to use the `useRouter` hook within a React function component in Next.js to access the router instance. It creates an `ActiveLink` component that dynamically styles a link based on the current `router.asPath` and handles client-side navigation using `router.push(href)` on click. This hook is essential for implementing routing logic in functional components and cannot be used with class components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import { useRouter } from 'next/router'

function ActiveLink({ children, href }) {
  const router = useRouter()
  const style = {
    marginRight: 10,
    color: router.asPath === href ? 'red' : 'black',
  }

  const handleClick = (e) => {
    e.preventDefault()
    router.push(href)
  }

  return (
    <a href={href} onClick={handleClick} style={style}>
      {children}
    </a>
  )
}

export default ActiveLink
```

----------------------------------------

TITLE: Example Next.js Image Optimization Configuration
DESCRIPTION: This code snippet provides a comprehensive example of a valid `images` configuration within `next.config.js`. It outlines various properties like `deviceSizes`, `imageSizes`, `domains`, `path`, `loader`, `minimumCacheTTL`, `formats`, `dangerouslyAllowSVG`, `contentSecurityPolicy`, `contentDispositionType`, `localPatterns`, `remotePatterns`, `qualities`, and `unoptimized`, demonstrating the correct structure to prevent configuration errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-images-config.mdx#_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    // limit of 25 deviceSizes values
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    // limit of 25 imageSizes values
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    // limit of 50 domains values (deprecated)
    domains: [],
    // path prefix for Image Optimization API, useful with `loader`
    path: '/_next/image',
    // loader can be 'default', 'imgix', 'cloudinary', 'akamai', or 'custom'
    loader: 'default',
    // file with `export default function loader({src, width, quality})`
    loaderFile: '',
    // disable static imports for image files
    disableStaticImages: false,
    // minimumCacheTTL is in seconds, must be integer 0 or more
    minimumCacheTTL: 60,
    // ordered list of acceptable optimized image formats (mime types)
    formats: ['image/webp'],
    // enable dangerous use of SVG images
    dangerouslyAllowSVG: false,
    // set the Content-Security-Policy header
    contentSecurityPolicy: "default-src 'self'; script-src 'none'; sandbox;",
    // sets the Content-Disposition header ('inline' or 'attachment')
    contentDispositionType: 'attachment',
    // limit of 25 objects
    localPatterns: [],
    // limit of 50 objects
    remotePatterns: [],
    // limit of 20 integers
    qualities: [25, 50, 75],
    // when true, every image will be unoptimized
    unoptimized: false
  }
}
```

----------------------------------------

TITLE: Next.js Cache Interactions: Data Cache and Client-side Router Cache
DESCRIPTION: Explains the interaction between Data Cache and Client-side Router Cache, particularly regarding immediate invalidation using Server Actions versus Route Handlers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_13

LANGUAGE: APIDOC
CODE:
```
Cache Interactions:
  - Data Cache and Client-side Router Cache:
    - To immediately invalidate Data Cache and Router Cache: Use revalidatePath or revalidateTag in a Server Action.
    - Revalidating Data Cache in a Route Handler WILL NOT immediately invalidate Router Cache (Router Cache serves previous payload until hard refresh or automatic invalidation).
```

----------------------------------------

TITLE: Understanding Closures and Encryption in Next.js Server Actions
DESCRIPTION: This snippet demonstrates how Server Actions can form closures, accessing variables from their outer scope, like `publishVersion`. It highlights that Next.js automatically encrypts these captured variables when sent to the client and back to the server, ensuring sensitive data is not exposed. It also shows how to use a captured snapshot of data to prevent race conditions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const publishVersion = await getLatestVersion();

  async function publish() {
    "use server";
    if (publishVersion !== await getLatestVersion()) {
      throw new Error('The version has changed since pressing publish');
    }
    ...
  }

  return (
    <form>
      <button formAction={publish}>Publish</button>
    </form>
  );
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const publishVersion = await getLatestVersion();

  async function publish() {
    "use server";
    if (publishVersion !== await getLatestVersion()) {
      throw new Error('The version has changed since pressing publish');
    }
    ...
  }

  return (
    <form>
      <button formAction={publish}>Publish</button>
    </form>
  );
}
```

----------------------------------------

TITLE: Using Next.js Link Component with Object `href`
DESCRIPTION: Illustrates how to use the `Link` component with an `href` prop defined as an object, allowing for navigation to a path with query parameters. This example navigates to `/about?name=test`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

// Navigate to /about?name=test
export default function Page() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' }
      }}
    >
      About
    </Link>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

// Navigate to /about?name=test
export default function Page() {
  return (
    <Link
      href={{
        pathname: '/about',
        query: { name: 'test' }
      }}
    >
      About
    </Link>
  )
}
```

----------------------------------------

TITLE: Using NEXT_PUBLIC_ Environment Variable in Client-Side Code
DESCRIPTION: This JavaScript example demonstrates how to reference a `NEXT_PUBLIC_` prefixed environment variable within a Next.js client-side component (e.g., `pages/index.js`). Next.js automatically replaces `process.env.NEXT_PUBLIC_ANALYTICS_ID` with its actual value during the build process, making it available in the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_9

LANGUAGE: js
CODE:
```
import setupAnalyticsService from '../lib/my-analytics-service'

// 'NEXT_PUBLIC_ANALYTICS_ID' can be used here as it's prefixed by 'NEXT_PUBLIC_'.
// It will be transformed at build time to `setupAnalyticsService('abcdefghijk')`.
setupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)

function HomePage() {
  return <h1>Hello World</h1>
}

export default HomePage
```

----------------------------------------

TITLE: Define GET Route Handlers in Next.js App Router
DESCRIPTION: Illustrates how to create custom GET request handlers using Route Handlers in the `app` directory. These handlers leverage Web Request and Response APIs, replacing traditional API Routes for server-side logic. Examples are provided for both TypeScript and JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_30

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {}
```

LANGUAGE: js
CODE:
```
export async function GET(request) {}
```

----------------------------------------

TITLE: Apply Specific Font from Utility File to Next.js App Router Page Element
DESCRIPTION: Illustrates importing a specific font (e.g., `roboto_mono`) from a utility file (`./fonts`) and applying its `className` to an HTML element (e.g., `<h1>`) within a Next.js App Router page component (`app/page.tsx/js`). This allows for granular font control.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_24

LANGUAGE: tsx
CODE:
```
import { roboto_mono } from './fonts'

export default function Page() {
  return (
    <>
      <h1 className={roboto_mono.className}>My page</h1>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { roboto_mono } from './fonts'

export default function Page() {
  return (
    <>
      <h1 className={roboto_mono.className}>My page</h1>
    </>
  )
}
```

----------------------------------------

TITLE: Delete Session Cookie in Next.js
DESCRIPTION: This snippet defines an asynchronous function `deleteSession` that uses Next.js's `cookies` utility to access the cookie store and delete the 'session' cookie. This function is designed to be used on the server-side to clear a user's session.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_18

LANGUAGE: TypeScript
CODE:
```
import 'server-only'
import { cookies } from 'next/headers'

export async function deleteSession() {
  const cookieStore = await cookies()
  cookieStore.delete('session')
}
```

LANGUAGE: JavaScript
CODE:
```
import 'server-only'
import { cookies } from 'next/headers'

export async function deleteSession() {
  const cookieStore = await cookies()
  cookieStore.delete('session')
}
```

----------------------------------------

TITLE: Next.js Server Actions for Forms and Validation
DESCRIPTION: Utilize Server Actions to manage form submissions, perform server-side validation, and handle errors effectively within Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_14

LANGUAGE: APIDOC
CODE:
```
Next.js Server Actions (Forms):
  Purpose: Handle form submissions and validation on the server.
  Key Features:
    - Server-side form submission handling.
    - Integrated server-side validation.
    - Error handling for form inputs.
```

----------------------------------------

TITLE: Update `package.json` Scripts for Next.js
DESCRIPTION: Provides the essential `scripts` configuration for `package.json` to run Next.js development, build, and start commands.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_17

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  }
}
```

----------------------------------------

TITLE: Manage Image Loading Strategy with `loading` in Next.js
DESCRIPTION: The `loading` prop controls when an image begins to load. Options include `lazy` (default), which defers loading until the image is near the viewport, and `eager`, which loads immediately. Use `eager` sparingly, only when immediate loading is critical, as `lazy` is generally preferred for performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_10

LANGUAGE: jsx
CODE:
```
// Defaults to lazy
<Image loading="lazy" />
```

----------------------------------------

TITLE: Define Server Functions at File Top with `use server` (Next.js/React)
DESCRIPTION: The `use server` directive placed at the top of a file designates all functions within that file to be executed on the server side. This example demonstrates creating a `createUser` server function that interacts with a database client to persist user data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-server.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
'use server'
import { db } from '@/lib/db' // Your database client

export async function createUser(data) {
  const user = await db.user.create({ data })
  return user
}
```

----------------------------------------

TITLE: Next.js generateImageMetadata Function API Reference
DESCRIPTION: Detailed API documentation for the `generateImageMetadata` function, including its parameters and expected return structure for image metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-image-metadata.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
generateImageMetadata(params?: object): Array<object>

Parameters:
  params (optional):
    Type: object
    Description: An object containing dynamic route parameters from the root segment down to the segment generateImageMetadata is called from.
    Example values:
      app/shop/icon.js -> /shop -> undefined
      app/shop/[slug]/icon.js -> /shop/1 -> { slug: '1' }
      app/shop/[tag]/[item]/icon.js -> /shop/1/2 -> { tag: '1', item: '2' }

Returns:
  Type: Array<object>
  Description: An array of objects, each containing metadata for an image. Each object must include an 'id' value.
  Image Metadata Object Properties:
    id (required):
      Type: string
      Description: Unique identifier for the image, passed to the props of the image generating function.
    alt:
      Type: string
      Description: Alternative text for the image.
    size:
      Type: { width: number; height: number }
      Description: Dimensions of the image.
    contentType:
      Type: string
      Description: MIME type of the image (e.g., 'image/png').
```

----------------------------------------

TITLE: Applying Tailwind CSS Classes in Next.js (TypeScript)
DESCRIPTION: This snippet illustrates the direct application of Tailwind CSS utility classes within a Next.js functional component written in TypeScript. It styles an <h1> element with text-3xl for font size, font-bold for weight, and underline for text decoration, demonstrating basic styling integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_10

LANGUAGE: TypeScript
CODE:
```
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Secure Server Actions with forbidden for Role-Based Mutations
DESCRIPTION: This example shows how to integrate `forbidden` into a Next.js Server Action to enforce role-based authorization for data mutations. Before performing a sensitive update, it checks the user's session role and throws a 403 error if the user is not authorized.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/forbidden.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateRole(formData: FormData) {
  const session = await verifySession()

  // Ensure only admins can update roles
  if (session.role !== 'admin') {
    forbidden()
  }

  // Perform the role update for authorized users
  // ...
}
```

LANGUAGE: JavaScript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateRole(formData) {
  const session = await verifySession()

  // Ensure only admins can update roles
  if (session.role !== 'admin') {
    forbidden()
  }

  // Perform the role update for authorized users
  // ...
}
```

----------------------------------------

TITLE: Define Server Action for User Signup in Next.js
DESCRIPTION: This snippet shows the basic structure for a Next.js Server Action named `signup`. Server Actions execute securely on the server, making them suitable for handling authentication logic and processing form data submitted from client components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export async function signup(formData: FormData) {}
```

LANGUAGE: jsx
CODE:
```
export async function signup(formData) {}
```

----------------------------------------

TITLE: Next.js Form `action` (string) Props - App Router
DESCRIPTION: Documents the props supported by the Next.js `<Form>` component when its `action` prop is a string, specifically for the App Router. It details `action`, `replace`, `scroll`, and `prefetch` props, their types, and behaviors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/form.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
<Form> Component Props (App Router - action as string):

action:
  Type: string (URL or relative path)
  Required: Yes
  Description: The URL or path to navigate to when the form is submitted. An empty string "" will navigate to the same route with updated search params.

replace:
  Type: boolean
  Required: No
  Default: false
  Description: Replaces the current history state instead of pushing a new one to the browser's history stack.

scroll:
  Type: boolean
  Required: No
  Default: true
  Description: Controls the scroll behavior during navigation. Scrolls to the top of the new route, and maintains the scroll position for backwards and forwards navigation.

prefetch:
  Type: boolean
  Required: No
  Default: true
  Description: Controls whether the path should be prefetched when the form becomes visible in the user's viewport.
```

----------------------------------------

TITLE: Perform Actions on Route Change with usePathname
DESCRIPTION: Illustrates how to use `usePathname` and `useSearchParams` within a `useEffect` hook to trigger actions whenever the URL's pathname or search parameters change. This is useful for analytics or state updates tied to navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-pathname.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'\n\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nfunction ExampleClientComponent() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    // Do something here...\n  }, [pathname, searchParams])\n}
```

LANGUAGE: jsx
CODE:
```
'use client'\n\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nfunction ExampleClientComponent() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    // Do something here...\n  }, [pathname, searchParams])\n}
```

----------------------------------------

TITLE: Using new Next.js routing hooks in Client Components
DESCRIPTION: Demonstrates how to import and use the `useRouter`, `usePathname`, and `useSearchParams` hooks from `next/navigation` within a Next.js Client Component in the `app` directory. These hooks are used for programmatic navigation, accessing the current URL path, and retrieving URL search parameters, respectively. Note that these hooks are only supported in Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter, usePathname, useSearchParams } from 'next/navigation'

export default function ExampleClientComponent() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  // ...
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useRouter, usePathname, useSearchParams } from 'next/navigation'

export default function ExampleClientComponent() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  // ...
}
```

----------------------------------------

TITLE: Implementing Sequential Data Fetching with React Suspense
DESCRIPTION: Demonstrates a sequential data fetching pattern where the `<Playlists>` component fetches data only after the `<Artist>` component has completed its fetch, as `<Playlists>` depends on the `artistID` prop. React `<Suspense>` is used to show a fallback UI while data is being fetched, improving user experience and enabling streaming.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
export default async function Page({
  params,
}: {
  params: Promise<{ username: string }>
}) {
  const { username } = await params
  // Get artist information
  const artist = await getArtist(username)

  return (
    <>
      <h1>{artist.name}</h1>
      {/* Show fallback UI while the Playlists component is loading */}
      <Suspense fallback={<div>Loading...</div>}>
        {/* Pass the artist ID to the Playlists component */}
        <Playlists artistID={artist.id} />
      </Suspense>
    </>
  )
}

async function Playlists({ artistID }: { artistID: string }) {
  // Use the artist ID to fetch playlists
  const playlists = await getArtistPlaylists(artistID)

  return (
    <ul>
      {playlists.map((playlist) => (
        <li key={playlist.id}>{playlist.name}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { username } = await params
  // Get artist information
  const artist = await getArtist(username)

  return (
    <>
      <h1>{artist.name}</h1>
      {/* Show fallback UI while the Playlists component is loading */}
      <Suspense fallback={<div>Loading...</div>}>
        {/* Pass the artist ID to the Playlists component */}
        <Playlists artistID={artist.id} />
      </Suspense>
    </>
  )
}

async function Playlists({ artistID }) {
  // Use the artist ID to fetch playlists
  const playlists = await getArtistPlaylists(artistID)

  return (
    <ul>
      {playlists.map((playlist) => (
        <li key={playlist.id}>{playlist.name}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Display Pending State with React useActionState Hook
DESCRIPTION: This snippet illustrates how to use React's "useActionState" hook to manage the pending state of a Server Function. It returns a "pending" boolean, which can be used to display a loading indicator or disable UI elements while the server action is in progress.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'

import { useActionState, startTransition } from 'react'
import { createPost } from '@/app/actions'
import { LoadingSpinner } from '@/app/ui/loading-spinner'

export function Button() {
  const [state, action, pending] = useActionState(createPost, false)

  return (
    <button onClick={() => startTransition(action)}>
      {pending ? <LoadingSpinner /> : 'Create Post'}
    </button>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useActionState, startTransition } from 'react'
import { createPost } from '@/app/actions'
import { LoadingSpinner } from '@/app/ui/loading-spinner'

export function Button() {
  const [state, action, pending] = useActionState(createPost, false)

  return (
    <button onClick={() => startTransition(action)}>
      {pending ? <LoadingSpinner /> : 'Create Post'}
    </button>
  )
}
```

----------------------------------------

TITLE: Create Post Server Action with Redirect
DESCRIPTION: This server-side function (`createPost`) is responsible for processing form data to create a new post. After the post is successfully created, it uses the `redirect` function from `next/navigation` to programmatically navigate the user to the newly created post's dedicated page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/form.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
'use server'
import { redirect } from 'next/navigation'

export async function createPost(formData: FormData) {
  // Create a new post
  // ...

  // Redirect to the new post
  redirect(`/posts/${data.id}`)
}
```

LANGUAGE: jsx
CODE:
```
'use server'
import { redirect } from 'next/navigation'

export async function createPost(formData) {
  // Create a new post
  // ...

  // Redirect to the new post
  redirect(`/posts/${data.id}`)
}
```

----------------------------------------

TITLE: Display Server-Side Validation Errors with React useActionState
DESCRIPTION: This React component, `SignupForm`, demonstrates how to use the `useActionState` hook to manage form state and display server-side validation errors. It connects to the `signup` Server Action and conditionally renders error messages for name, email, and password fields based on the state returned from the action.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

import { signup } from '@/app/actions/auth'
import { useActionState } from 'react'

export default function SignupForm() {
  const [state, action, pending] = useActionState(signup, undefined)

  return (
    <form action={action}>
      <div>
        <label htmlFor="name">Name</label>
        <input id="name" name="name" placeholder="Name" />
      </div>
      {state?.errors?.name && <p>{state.errors.name}</p>}

      <div>
        <label htmlFor="email">Email</label>
        <input id="email" name="email" placeholder="Email" />
      </div>
      {state?.errors?.email && <p>{state.errors.email}</p>}

      <div>
        <label htmlFor="password">Password</label>
        <input id="password" name="password" type="password" />
      </div>
      {state?.errors?.password && (
        <div>
          <p>Password must:</p>
          <ul>
            {state.errors.password.map((error) => (
              <li key={error}>- {error}</li>
            ))}
          </ul>
        </div>
      )}
      <button disabled={pending} type="submit">
        Sign Up
      </button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { signup } from '@/app/actions/auth'
import { useActionState } from 'react'

export default function SignupForm() {
  const [state, action, pending] = useActionState(signup, undefined)

  return (
    <form action={action}>
      <div>
        <label htmlFor="name">Name</label>
        <input id="name" name="name" placeholder="Name" />
      </div>
      {state?.errors?.name && <p>{state.errors.name}</p>}


```

----------------------------------------

TITLE: Fetch User Data in Next.js App Router
DESCRIPTION: Defines an asynchronous function to fetch user data from a specified API endpoint using the native `fetch` API. This function is designed to be reusable across different components and pages, leveraging Next.js's automatic request deduplication.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
export async function getUser(id: string) {
  const res = await fetch(`https://.../users/${id}`)
  return res.json()
}
```

----------------------------------------

TITLE: On-Demand Page Revalidation with `res.revalidate()` in Next.js API Routes
DESCRIPTION: This API Route example shows how to implement on-demand page revalidation using `res.revalidate()` in the Next.js Pages Router. It includes a security check for a secret token and demonstrates how to revalidate a specific page path, ensuring the latest content is served.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_8

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Check for secret to confirm this is a valid request
  if (req.query.secret !== process.env.MY_SECRET_TOKEN) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  try {
    // This should be the actual path not a rewritten path
    // e.g. for "/posts/[id]" this should be "/posts/1"
    await res.revalidate('/posts/1')
    return res.json({ revalidated: true })
  } catch (err) {
    // If there was an error, Next.js will continue
    // to show the last successfully generated page
    return res.status(500).send('Error revalidating')
  }
}
```

LANGUAGE: js
CODE:
```
export default async function handler(req, res) {
  // Check for secret to confirm this is a valid request
  if (req.query.secret !== process.env.MY_SECRET_TOKEN) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  try {
    // This should be the actual path not a rewritten path
    // e.g. for "/posts/[id]" this should be "/posts/1"
    await res.revalidate('/posts/1')
    return res.json({ revalidated: true })
  } catch (err) {
    // If there was an error, Next.js will continue
    // to show the last successfully generated page
    return res.status(500).send('Error revalidating')
  }
}
```

----------------------------------------

TITLE: Installing Dependencies and Running Next.js Locally (Shell)
DESCRIPTION: This snippet provides shell commands to set up and run a Next.js project. It first installs necessary Node.js dependencies using 'npm install' and then starts the development server locally on port 3000 with 'npm run dev'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-formspree/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
# Install dependencies
npm install

# Run next locally at localhost:3000
npm run dev
```

----------------------------------------

TITLE: Running Next.js Application in Development Mode
DESCRIPTION: These commands install project dependencies and then start the Next.js development server. `npm install` or `yarn install` fetches required packages, while `npm run dev` or `yarn dev` launches the application, typically making it accessible at `http://localhost:3000` for local development and testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
# or
yarn install
yarn dev
```

----------------------------------------

TITLE: Consume Data Access Layer Profile DTO in Next.js Page
DESCRIPTION: This `tsx` snippet demonstrates how a Next.js `Page` Server Component consumes data from the Data Access Layer. It imports `getProfile` (presumably a DTO function like `getProfileDTO`) and awaits its result. This pattern ensures that the `profile` object passed to the page is already sanitized and contains only safe, non-sensitive data, making it suitable for rendering without risk of exposing private information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { getProfile } from '../../data/user'\n\nexport async function Page({ params: { slug } }) {\n  // This page can now safely pass around this profile knowing\n  // that it shouldn't contain anything sensitive.\n  const profile = await getProfile(slug);\n  ...\n}
```

----------------------------------------

TITLE: Fetch Data in Next.js Server Components with ORM or Database
DESCRIPTION: This example illustrates how to perform direct database queries within a Next.js Server Component using an ORM or database client. Since Server Components run on the server, direct database access is secure. The component is an asynchronous function that awaits a database call to retrieve all posts, which are then rendered.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { db, posts } from '@/lib/db'

export default async function Page() {
  const allPosts = await db.select().from(posts)
  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { db, posts } from '@/lib/db'

export default async function Page() {
  const allPosts = await db.select().from(posts)
  return (
    <ul>
      {allPosts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Copying Local Environment Variables File
DESCRIPTION: This command copies the example environment variables file, `.env.local.example`, to `.env.local`. The `.env.local` file is crucial for storing sensitive configuration details like Couchbase credentials and is automatically ignored by Git to prevent accidental exposure in version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: This snippet provides commands to start the Next.js development server using various package managers. Running one of these commands will launch the application, typically accessible at `http://localhost:3000`, and enable hot-reloading for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Next.js App Router Server-Side Rendering with `fetch()` and `no-store` Cache
DESCRIPTION: Illustrates how to achieve server-side rendering behavior in the Next.js App Router, similar to `getServerSideProps`. Data is fetched directly within an `async` Server Component using `fetch()` with `cache: 'no-store'`, ensuring data is refetched on every request and reducing client-side JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_16

LANGUAGE: tsx
CODE:
```
// `app` directory

// This function can be named anything
async function getProjects() {
  const res = await fetch(`https://...`, { cache: 'no-store' })
  const projects = await res.json()

  return projects
}

export default async function Dashboard() {
  const projects = await getProjects()

  return (
    <ul>
      {projects.map((project) => (
        <li key={project.id}>{project.name}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
// `app` directory

// This function can be named anything
async function getProjects() {
  const res = await fetch(`https://...`, { cache: 'no-store' })
  const projects = await res.json()

  return projects
}

export default async function Dashboard() {
  const projects = await getProjects()

  return (
    <ul>
      {projects.map((project) => (
        <li key={project.id}>{project.name}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Rendering Next.js Image Component - JSX
DESCRIPTION: This snippet demonstrates how to render an image using the `Image` component within JSX. It specifies the image source (`src`), alternative text (`alt`) for accessibility, and explicit dimensions (`width`, `height`), which are crucial for layout shift prevention and image optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/app-dir/mdx/app/image/page.mdx#_snippet_1

LANGUAGE: JSX
CODE:
```
<Image src="/test.jpg" alt="Next.js Logo" width={180} height={37} />
```

----------------------------------------

TITLE: Using revalidatePath in a Next.js Server Action
DESCRIPTION: This snippet shows how to integrate `revalidatePath` within a Next.js server action to trigger cache revalidation after an operation, such as form submission.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx#_snippet_5

LANGUAGE: ts
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'

export default async function submit() {
  await submitForm()
  revalidatePath('/')
}
```

----------------------------------------

TITLE: Generate Open Graph Images and Metadata in Next.js
DESCRIPTION: This snippet demonstrates how to dynamically generate multiple Open Graph images for a route segment in Next.js. It uses the `generateImageMetadata` function to define metadata for each image, including size, alt text, and content type, based on external data. The default export then renders the actual image content using `ImageResponse`, fetching specific text for each image based on product and image IDs. It relies on `next/og` and custom utility functions for image data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-image-metadata.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { ImageResponse } from 'next/og'
import { getCaptionForImage, getOGImages } from '@/app/utils/images'

export async function generateImageMetadata({
  params,
}: {
  params: { id: string }
}) {
  const images = await getOGImages(params.id)

  return images.map((image, idx) => ({
    id: idx,
    size: { width: 1200, height: 600 },
    alt: image.text,
    contentType: 'image/png',
  }))
}

export default async function Image({
  params,
  id,
}: {
  params: { id: string }
  id: number
}) {
  const productId = (await params).id
  const imageId = id
  const text = await getCaptionForImage(productId, imageId)

  return new ImageResponse(
    (
      <div
        style={
          {
            // ...
          }
        }
      >
        {text}
      </div>
    )
  )
}
```

LANGUAGE: jsx
CODE:
```
import { ImageResponse } from 'next/og'
import { getCaptionForImage, getOGImages } from '@/app/utils/images'

export async function generateImageMetadata({ params }) {
  const images = await getOGImages(params.id)

  return images.map((image, idx) => ({
    id: idx,
    size: { width: 1200, height: 600 },
    alt: image.text,
    contentType: 'image/png',
  }))
}

export default async function Image({ params, id }) {
  const productId = (await params).id
  const imageId = id
  const text = await getCaptionForImage(productId, imageId)

  return new ImageResponse(
    (
      <div
        style={
          {
            // ...
          }
        }
      >
        {text}
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Display Remote Images with Next.js Image Component
DESCRIPTION: This snippet demonstrates how to render a remote image using the `next/image` component in a Next.js application. It requires providing the `src` URL, `alt` text, and explicit `width` and `height` props, as Next.js cannot infer these for remote assets during build time. Alternatively, the `fill` prop can be used to make the image fill its parent.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-images.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="https://s3.amazonaws.com/my-bucket/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

----------------------------------------

TITLE: Creating Responsive Next.js Images from Static Imports
DESCRIPTION: Explains how to make a statically imported image responsive by setting `width: '100%'` and `height: 'auto'` in its style, leveraging Next.js's automatic width/height detection.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_39

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'
import mountains from '../public/mountains.jpg'

export default function Responsive() {
  return (
    <div style={{ display: 'flex', flexDirection: 'column' }}>
      <Image
        alt="Mountains"
        // Importing an image will
        // automatically set the width and height
        src={mountains}
        sizes="100vw"
        // Make the image display full width
        // and preserve its aspect ratio
        style={{
          width: '100%',
          height: 'auto',
        }}
      />
    </div>
  )
}
```

----------------------------------------

TITLE: Implement custom image loader for Next.js
DESCRIPTION: Configures Next.js to use a custom image optimization service by setting `loader` to 'custom' in `next.config.js` and providing a `loaderFile`. The `loaderFile` exports a default function that takes `src`, `width`, and `quality` and returns a URL string for image optimization, adapting for both App Router and Pages Router environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_25

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    loader: 'custom',
    loaderFile: './my/image/loader.js',
  },
}
```

LANGUAGE: js
CODE:
```
'use client'

export default function myImageLoader({ src, width, quality }) {
  return `https://example.com/${src}?w=${width}&q=${quality || 75}`
}
```

LANGUAGE: js
CODE:
```
export default function myImageLoader({ src, width, quality }) {
  return `https://example.com/${src}?w=${width}&q=${quality || 75}`
}
```

----------------------------------------

TITLE: Fetch Data from External HTTP API in Next.js Server Component
DESCRIPTION: This example demonstrates fetching data from an external HTTP API within a Next.js Server Component using `fetch`. It shows how to securely retrieve an authentication token from cookies and include it in the request headers, adhering to a Zero Trust model. This method is recommended for existing large applications with established security practices or when separate backend teams manage APIs independently.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = cookies()
  const token = cookieStore.get('AUTH_TOKEN')?.value

  const res = await fetch('https://api.example.com/profile', {
    headers: {
      Cookie: `AUTH_TOKEN=${token}`,
      // Other headers
    },
  })

  // ....
}
```

----------------------------------------

TITLE: Caching External Data for generateViewport (After Use Cache)
DESCRIPTION: This snippet provides the solution for using external data in `generateViewport` by applying the `"use cache"` directive. This directive marks the function producing the external data as cacheable, allowing Next.js to prerender the viewport metadata with the cached data.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-viewport.mdx#_snippet_3

LANGUAGE: JSX
CODE:
```
import { db } from './db'

export async function generateViewport() {
  "use cache"
  const { width, initialScale } = await db.query('viewport-size')
  return {
    width,
    initialScale,
  }
}

export default async function Layout({ children }) {
  return ...
}
```

----------------------------------------

TITLE: Configure Basic Redirect in Next.js
DESCRIPTION: This snippet demonstrates how to set up a fundamental redirect in Next.js. It redirects requests from '/about' to the root path '/' permanently, using the `source`, `destination`, and `permanent` properties within the `redirects` array in `next.config.js`. The `permanent: true` setting uses a 308 status code, indicating the redirect should be cached by clients and search engines.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/redirects.mdx#_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  async redirects() {
    return [
      {
        source: '/about',
        destination: '/',
        permanent: true,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Process Callback URL for User Redirection and Cookie Setting in Next.js
DESCRIPTION: This Route Handler manages a callback URL, typically used after a user completes a third-party authentication flow. It extracts a session token and a redirect URL from query parameters, then redirects the user while setting a secure, HTTP-only session cookie.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_11

LANGUAGE: typescript
CODE:
```
import { type NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  const token = request.nextUrl.searchParams.get('session_token')
  const redirectUrl = request.nextUrl.searchParams.get('redirect_url')

  const response = NextResponse.redirect(new URL(redirectUrl, request.url))

  response.cookies.set({
    value: token,
    name: '_token',
    path: '/',
    secure: true,
    httpOnly: true,
    expires: undefined // session cookie
  })

  return response
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

export async function GET(request) {
  const token = request.nextUrl.searchParams.get('session_token')
  const redirectUrl = request.nextUrl.searchParams.get('redirect_url')

  const response = NextResponse.redirect(new URL(redirectUrl, request.url))

  response.cookies.set({
    value: token,
    name: '_token',
    path: '/',
    secure: true,
    httpOnly: true,
    expires: undefined // session cookie
  })

  return response
}
```

----------------------------------------

TITLE: Inherit Metadata in Next.js Child Page
DESCRIPTION: Shows how `app/about/page.js` inherits `openGraph` fields from its parent layout because it only defines a top-level `title` and does not set its own `openGraph` metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_53

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'About',
}

// Output:
// <title>About</title>
// <meta property="og:title" content="Acme" />
// <meta property="og:description" content="Acme is a..." />
```

----------------------------------------

TITLE: Applying Global CSS in Next.js App Router
DESCRIPTION: Shows how to apply global CSS styles across an entire Next.js application using the App Router. Create a `global.css` file and import it into the root layout component (`app/layout.tsx` or `app/layout.js`). These styles will be applied to every route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-css.mdx#_snippet_2

LANGUAGE: css
CODE:
```
body {
  padding: 20px 20px 60px;
  max-width: 680px;
  margin: 0 auto;
}
```

LANGUAGE: tsx
CODE:
```
// These styles apply to every route in the application
import './global.css'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
// These styles apply to every route in the application
import './global.css'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Next.js 15 Dynamic API Synchronous Access Warning Example
DESCRIPTION: Illustrates how direct, synchronous access to dynamic APIs like `params` in Next.js 15 will issue a warning, as these APIs are now asynchronous. This code will trigger the warning.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
function Page({ params }) {
  // direct access of `params.id`.
  return <p>ID: {params.id}</p>
}
```

----------------------------------------

TITLE: Initializing Next.js Project with npm
DESCRIPTION: This command initializes a new Next.js project named 'api-routes-rest-app' using `create-next-app` via `npx`. It bootstraps the project with the 'api-routes-rest' example, setting up the necessary file structure and dependencies for a REST API.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-rest/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-rest api-routes-rest-app
```

----------------------------------------

TITLE: Bootstrapping Next.js App with Rematch using npx
DESCRIPTION: This command initializes a new Next.js project named `with-rematch-app` using `create-next-app` and pre-configures it with the `with-rematch` example. It's the recommended way to quickly set up the project using `npx`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rematch/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-rematch with-rematch-app
```

----------------------------------------

TITLE: Initializing Next.js Project with styled-jsx using npx
DESCRIPTION: This command initializes a new Next.js application using `create-next-app` via `npx`. It specifically clones the `with-styled-jsx` example, setting up a project ready for development with styled-jsx. This requires Node.js and npm to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-jsx/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-styled-jsx with-styled-jsx-app
```

----------------------------------------

TITLE: Integrate Google Non-Variable Font with Specific Weight in Next.js App Router
DESCRIPTION: Illustrates how to import and use a Google non-variable font, like Roboto, in `app/layout.tsx` or `app/layout.js` for the Next.js App Router. It requires specifying the font weight, and the font's `className` is applied to the `<html>` tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_15

LANGUAGE: tsx
CODE:
```
import { Roboto } from 'next/font/google'

const roboto = Roboto({
  weight: '400',
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={roboto.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Roboto } from 'next/font/google'

const roboto = Roboto({
  weight: '400',
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={roboto.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Tagging unstable_cache functions for cache revalidation in Next.js
DESCRIPTION: Alternatively, `unstable_cache` functions can be marked with the `tags` option to associate their cached output with specific tags. This enables targeted revalidation using `revalidateTag`. The example shows tagging a cached database query for users with the 'user' tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export const getUserById = unstable_cache(
  async (id: string) => {
    return db.query.users.findFirst({ where: eq(users.id, id) })
  },
  ['user'], // Needed if variables are not passed as parameters
  {
    tags: ['user'],
  }
)
```

LANGUAGE: jsx
CODE:
```
export const getUserById = unstable_cache(
  async (id) => {
    return db.query.users.findFirst({ where: eq(users.id, id) })
  },
  ['user'], // Needed if variables are not passed as parameters
  {
    tags: ['user'],
  }
)
```

----------------------------------------

TITLE: Running Linting for Next.js Project (Shell)
DESCRIPTION: This command executes the linting process for the entire Next.js project, checking code and documentation against configured ESLint, Prettier, and alex rules. It identifies potential errors and style violations.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/repository/linting.md#_snippet_0

LANGUAGE: Shell
CODE:
```
pnpm lint
```

----------------------------------------

TITLE: Correctly Exporting getStaticProps as a Separate Export
DESCRIPTION: This snippet shows the correct implementation for defining `getStaticProps` in a Next.js page. The `getStaticProps` function is exported as a named constant, allowing Next.js to properly identify and execute it for static generation. This is the required pattern for `getStaticProps`, `getStaticPaths`, and `getServerSideProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/gssp-component-member.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
function Page(props) {
  return <p>hello world</p>
}

export default Page

export const getStaticProps = () => ({
  props: {
    hello: 'world',
  },
})
```

----------------------------------------

TITLE: Adding HTML and Body Tags to Next.js Root Layout (TypeScript)
DESCRIPTION: This snippet demonstrates the correct way to define the `<html>` and `<body>` tags within a Next.js Root Layout component. It shows how to wrap the `children` prop with these essential HTML tags, which is crucial for resolving the 'Missing Root Layout tags' error and ensuring proper page structure and rendering in a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-root-layout-tags.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <body>
        {children}
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Lazy Load Client Components with next/dynamic
DESCRIPTION: Demonstrates how to use `next/dynamic` to lazy load Client Components in Next.js. It shows examples of immediate loading into a separate bundle, on-demand loading based on a condition, and client-side only loading by disabling Server-Side Rendering (SSR) for specific components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'
import dynamic from 'next/dynamic'

// Client Components:
const ComponentA = dynamic(() => import('../components/A'))
const ComponentB = dynamic(() => import('../components/B'))
const ComponentC = dynamic(() => import('../components/C'), { ssr: false })

export default function ClientComponentExample() {
  const [showMore, setShowMore] = useState(false)

  return (
    <div>
      {/* Load immediately, but in a separate client bundle */}
      <ComponentA />

      {/* Load on demand, only when/if the condition is met */}
      {showMore && <ComponentB />}
      <button onClick={() => setShowMore(!showMore)}>Toggle</button>

      {/* Load only on the client side */}
      <ComponentC />
    </div>
  )
}
```

----------------------------------------

TITLE: Display Form Validation Errors using React useActionState in Next.js Client Component
DESCRIPTION: Shows how to create a Client Component in Next.js that uses React's `useActionState` hook to manage form state and display validation errors. It binds the form to a server action and conditionally renders error messages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

const initialState = {
  message: '',
}

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useActionState } from 'react'
import { createUser } from '@/app/actions'

const initialState = {
  message: '',
}

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState)

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Basic Usage of Next.js Link Component
DESCRIPTION: Demonstrates how to import and use the `Link` component for simple client-side navigation to a dashboard route in Next.js applications, applicable for both App Router and Pages Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/dashboard">Dashboard</Link>
}
```

----------------------------------------

TITLE: Next.js Route Segment Config: `dynamic = 'force-static'`
DESCRIPTION: Demonstrates how to use `export const dynamic = 'force-static'` in a route segment to force static rendering for all paths, even if `generateStaticParams` returns an empty array or is not defined. This ensures the route is always statically generated.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_29

LANGUAGE: jsx
CODE:
```
export const dynamic = 'force-static'
```

----------------------------------------

TITLE: Next.js Page Component `searchParams` Prop API Reference
DESCRIPTION: Detailed API reference for the `searchParams` prop available to Next.js page components. It's a promise that resolves to an object containing the search parameters of the current URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
searchParams (optional)
  Type: Promise<object>
  Description: A promise that resolves to an object containing the search parameters of the current URL.
  Access: Since the `searchParams` prop is a promise. You must use `async/await` or React's `use` function to access the values.
  Note: In version 14 and earlier, `searchParams` was synchronous. Synchronous access is deprecated in Next.js 15.
  Behavior: `searchParams` is a Dynamic API whose values cannot be known ahead of time. Using it will opt the page into dynamic rendering at request time.
  Format: `searchParams` is a plain JavaScript object, not a `URLSearchParams` instance.

  Examples:
  | Example URL     | `searchParams`                |
  | --------------- | ----------------------------- |
  | `/shop?a=1`     | `Promise<{ a: '1' }>`         |
  | `/shop?a=1&b=2` | `Promise<{ a: '1', b: '2' }>` |
  | `/shop?a=1&a=2` | `Promise<{ a: ['1', '2'] }>`  |
```

----------------------------------------

TITLE: Add Type Safety to Async `generateMetadata` Function
DESCRIPTION: This example shows how to correctly type an asynchronous `generateMetadata` function. By returning `Promise<Metadata>`, you ensure type safety for metadata that is resolved asynchronously, such as from an API call.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_35

LANGUAGE: TSX
CODE:
```
import type { Metadata } from 'next'

export async function generateMetadata(): Promise<Metadata> {
  return {
    title: 'Next.js',
  }
}
```

----------------------------------------

TITLE: Define a basic Next.js Route Handler
DESCRIPTION: Demonstrates the basic convention for defining a Route Handler in Next.js using a `route.js` or `route.ts` file within the `app` directory. It shows an asynchronous GET function that handles incoming requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {}
```

LANGUAGE: js
CODE:
```
export async function GET(request) {}
```

----------------------------------------

TITLE: Applying Tailwind CSS Classes in Next.js (JavaScript)
DESCRIPTION: This snippet illustrates the direct application of Tailwind CSS utility classes within a Next.js functional component written in JavaScript. It styles an <h1> element with text-3xl for font size, font-bold for weight, and underline for text decoration, demonstrating basic styling integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_11

LANGUAGE: JavaScript
CODE:
```
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Page Component with Suspense for Partial Static Rendering
DESCRIPTION: This example shows how to wrap a Client Component that uses `useSearchParams` (like `SearchBar`) within a `<Suspense>` boundary. This allows the outer page to be statically rendered, while the dynamic part (the `SearchBar`) is client-side rendered, with a fallback displayed initially.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-search-params.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import SearchBar from './search-bar'

// This component passed as a fallback to the Suspense boundary
// will be rendered in place of the search bar in the initial HTML.
// When the value is available during React hydration the fallback
// will be replaced with the `<SearchBar>` component.
function SearchBarFallback() {
  return <>placeholder</>
}

export default function Page() {
  return (
    <>
      <nav>
        <Suspense fallback={<SearchBarFallback />}>
          <SearchBar />
        </Suspense>
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import SearchBar from './search-bar'

// This component passed as a fallback to the Suspense boundary
// will be rendered in place of the search bar in the initial HTML.
// When the value is available during React hydration the fallback
// will be replaced with the `<SearchBar>` component.
function SearchBarFallback() {
  return <>placeholder</>
}

export default function Page() {
  return (
    <>
      <nav>
        <Suspense fallback={<SearchBarFallback />}>
          <SearchBar />
        </Suspense>
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}
```

----------------------------------------

TITLE: Report Web Vitals in Next.js Applications
DESCRIPTION: This snippet demonstrates how to use the `useReportWebVitals` hook to capture and log performance metrics (Web Vitals) in Next.js applications. It shows implementations for both Pages Router (`_app.js`) and App Router (a dedicated client component and its integration into `layout.js`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { useReportWebVitals } from 'next/web-vitals'

function MyApp({ Component, pageProps }) {
  useReportWebVitals((metric) => {
    console.log(metric)
  })

  return <Component {...pageProps} />
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

export function WebVitals() {
  useReportWebVitals((metric) => {
    console.log(metric)
  })
}
```

LANGUAGE: jsx
CODE:
```
import { WebVitals } from './_components/web-vitals'

export default function Layout({ children }) {
  return (
    <html>
      <body>
        <WebVitals />
        {children}
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Initializing Next.js Project with npm
DESCRIPTION: This command uses `npx create-next-app` to bootstrap a new Next.js application. It specifically pulls the `cache-handler-redis` example, setting up a project named `cache-handler-redis-app` with Redis cache integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cache-handler-redis cache-handler-redis-app
```

----------------------------------------

TITLE: Define a Next.js Page Component with params and searchParams
DESCRIPTION: The `page` file allows you to define UI that is unique to a route by default exporting a component. This component can receive `params` for dynamic route segments and `searchParams` for URL query parameters, both of which are promises.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default function Page({
  params,
  searchParams,
}: {
  params: Promise<{ slug: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  return <h1>My Page</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page({ params, searchParams }) {
  return <h1>My Page</h1>
}
```

----------------------------------------

TITLE: Next.js App Router Data Fetching with `fetch()` and Caching Strategies
DESCRIPTION: Demonstrates how to fetch data in the Next.js App Router using `fetch()` with different caching behaviors: `force-cache` for static data (like `getStaticProps`), `no-store` for dynamic data (like `getServerSideProps`), and `next: { revalidate: N }` for time-based revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  // This request should be cached until manually invalidated.
  // Similar to `getStaticProps`.
  // `force-cache` is the default and can be omitted.
  const staticData = await fetch(`https://...`, { cache: 'force-cache' })

  // This request should be refetched on every request.
  // Similar to `getServerSideProps`.
  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })

  // This request should be cached with a lifetime of 10 seconds.
  // Similar to `getStaticProps` with the `revalidate` option.
  const revalidatedData = await fetch(`https://...`, {
    next: { revalidate: 10 },
  })

  return <div>...</div>
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  // This request should be cached until manually invalidated.
  // Similar to `getStaticProps`.
  // `force-cache` is the default and can be omitted.
  const staticData = await fetch(`https://...`, { cache: 'force-cache' })

  // This request should be refetched on every request.
  // Similar to `getServerSideProps`.
  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })

  // This request should be cached with a lifetime of 10 seconds.
  // Similar to `getStaticProps` with the `revalidate` option.
  const revalidatedData = await fetch(`https://...`, {
    next: { revalidate: 10 },
  })

  return <div>...</div>
}
```

----------------------------------------

TITLE: Next.js Metadata API for SEO
DESCRIPTION: Improve your application's Search Engine Optimization (SEO) by using the Metadata API to add page titles, descriptions, and other metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_23

LANGUAGE: APIDOC
CODE:
```
Next.js Metadata API:
  Purpose: Enhance Search Engine Optimization (SEO).
  Capabilities:
    - Add page titles.
    - Add page descriptions.
    - Manage other page-level metadata.
```

----------------------------------------

TITLE: Fetching Data with API Key (Potential Client Exposure)
DESCRIPTION: This function demonstrates fetching data from an external service using an `API_KEY` from `process.env`. Without proper safeguards, this `API_KEY` could be exposed to the client if the module is accidentally imported into a Client Component, leading to environment variable poisoning.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_12

LANGUAGE: typescript
CODE:
```
export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

LANGUAGE: javascript
CODE:
```
export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

----------------------------------------

TITLE: Secure Next.js Route Handlers with Authentication and Authorization
DESCRIPTION: Illustrates how to implement a two-tier security check in Next.js Route Handlers. It first verifies the user's session for authentication and then checks their role for authorization, returning appropriate HTTP status codes (401 for unauthenticated, 403 for unauthorized) if checks fail.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_31

LANGUAGE: ts
CODE:
```
import { verifySession } from '@/app/lib/dal'

export async function GET() {
  // User authentication and role verification
  const session = await verifySession()

  // Check if the user is authenticated
  if (!session) {
    // User is not authenticated
    return new Response(null, { status: 401 })
  }

  // Check if the user has the 'admin' role
  if (session.user.role !== 'admin') {
    // User is authenticated but does not have the right permissions
    return new Response(null, { status: 403 })
  }

  // Continue for authorized users
}
```

LANGUAGE: js
CODE:
```
import { verifySession } from '@/app/lib/dal'

export async function GET() {
  // User authentication and role verification
  const session = await verifySession()

  // Check if the user is authenticated
  if (!session) {
    // User is not authenticated
    return new Response(null, { status: 401 })
  }

  // Check if the user has the 'admin' role
  if (session.user.role !== 'admin') {
    // User is authenticated but does not have the right permissions
    return new Response(null, { status: 403 })
  }

  // Continue for authorized users
}
```

----------------------------------------

TITLE: React `cache` Function for Memoizing Data Requests
DESCRIPTION: Illustrates how to use the React `cache` function to memoize the return value of an asynchronous function, such as a database query. This prevents redundant executions for the same inputs, similar to `fetch`'s automatic memoization, and is useful for non-`fetch` data sources.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_30

LANGUAGE: ts
CODE:
```
import { cache } from 'react'
import db from '@/lib/db'

export const getItem = cache(async (id: string) => {
  const item = await db.item.findUnique({ id })
  return item
})
```

LANGUAGE: js
CODE:
```
import { cache } from 'react'
import db from '@/lib/db'

export const getItem = cache(async (id) => {
  const item = await db.item.findUnique({ id })
  return item
})
```

----------------------------------------

TITLE: Generate Dynamic Images with ImageResponse in Next.js Route Handlers
DESCRIPTION: Demonstrates how to use `ImageResponse` within a Next.js Route Handler (`app/api/route.js`) to dynamically generate and serve an image (e.g., for Open Graph) at request time. It sets up a basic HTML structure with inline styles for a welcome message, handling potential errors during image generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/image-response.mdx#_snippet_1

LANGUAGE: js
CODE:
```
import { ImageResponse } from 'next/og'

export async function GET() {
  try {
    return new ImageResponse(
      (
        <div
          style={{
            height: '100%',
            width: '100%',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            backgroundColor: 'white',
            padding: '40px',
          }}
        >
          <div
            style={{
              fontSize: 60,
              fontWeight: 'bold',
              color: 'black',
              textAlign: 'center',
            }}
          >
            Welcome to My Site
          </div>
          <div
            style={{
              fontSize: 30,
              color: '#666',
              marginTop: '20px',
            }}
          >
            Generated with Next.js ImageResponse
          </div>
        </div>
      ),
      {
        width: 1200,
        height: 630,
      }
    )
  } catch (e) {
    console.log(`${e.message}`)
    return new Response(`Failed to generate the image`, {
      status: 500,
    })
  }
}
```

----------------------------------------

TITLE: Implement ISR with Next.js Pages Router
DESCRIPTION: This example demonstrates Incremental Static Regeneration using the Pages Router. It uses `getStaticPaths` to pre-render specific blog post paths at build time and `getStaticProps` to fetch post data. The `revalidate` property within `getStaticProps` configures the cache invalidation period for the static page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import type { GetStaticPaths, GetStaticProps } from 'next'

interface Post {
  id: string
  title: string
  content: string
}

interface Props {
  post: Post
}

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  const paths = posts.map((post: Post) => ({
    params: { id: String(post.id) },
  }))

  // We'll prerender only these paths at build time.
  // { fallback: 'blocking' } will server-render pages
  // on-demand if the path doesn't exist.
  return { paths, fallback: false }
}

export const getStaticProps: GetStaticProps<Props> = async ({
  params,
}: {
  params: { id: string }
}) => {
  const post = await fetch(`https://api.vercel.app/blog/${params.id}`).then(
    (res) => res.json()
  )

  return {
    props: { post },
    // Next.js will invalidate the cache when a
    // request comes in, at most once every 60 seconds.
    revalidate: 60,
  }
}

export default function Page({ post }: Props) {
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
export async function getStaticPaths() {
  const posts = await fetch('https://api.vercel.app/blog').then((res) =>
    res.json()
  )
  const paths = posts.map((post) => ({
    params: { id: post.id },
  }))

  // We'll prerender only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}

export async function getStaticProps({ params }) {
  const post = await fetch(`https://api.vercel.app/blog/${params.id}`).then(
    (res) => res.json()
  )

  return {
    props: { post },
    // Next.js will invalidate the cache when a
    // request comes in, at most once every 60 seconds.
    revalidate: 60,
  }
}

export default function Page({ post }) {
  return (
    <main>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Configure Wildcard Path Matching in Next.js Redirects
DESCRIPTION: This example demonstrates wildcard path matching using `*` after a parameter (e.g., `:slug*`). This allows the redirect to match and capture multiple nested path segments, such as '/blog/a/b/c/d/hello-world'. The captured wildcard path can then be used in the `destination`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/redirects.mdx#_snippet_3

LANGUAGE: js
CODE:
```
module.exports = {
  async redirects() {
    return [
      {
        source: '/blog/:slug*',
        destination: '/news/:slug*', // Matched parameters can be used in the destination
        permanent: true,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Declare Client Component Entry Point with 'use client' (React/Next.js)
DESCRIPTION: This snippet demonstrates how to declare a React component as a Client Component by adding the `'use client'` directive at the top of the file. This enables client-side interactivity, state management, and access to browser APIs. The example shows a simple counter component using React's `useState` hook.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-client.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'

export default function Counter() {
  const [count, setCount] = useState(0)

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  )
}
```

----------------------------------------

TITLE: Implement Optimistic Authentication Checks with Next.js Middleware
DESCRIPTION: This code snippet demonstrates how to use Next.js Middleware to perform optimistic authentication checks. It defines protected and public routes, decrypts the user session from a cookie, and redirects users based on their authentication status. For unauthenticated users on protected routes, it redirects to '/login'. For authenticated users on public routes (excluding '/dashboard'), it redirects to '/dashboard'. The `config.matcher` is used to specify routes where Middleware should run, excluding API routes, static assets, and images. This approach prioritizes performance by avoiding database lookups within the Middleware.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_23

LANGUAGE: tsx
CODE:
```
import { NextRequest, NextResponse } from 'next/server'
import { decrypt } from '@/app/lib/session'
import { cookies } from 'next/headers'

// 1. Specify protected and public routes
const protectedRoutes = ['/dashboard']
const publicRoutes = ['/login', '/signup', '/']

export default async function middleware(req: NextRequest) {
  // 2. Check if the current route is protected or public
  const path = req.nextUrl.pathname
  const isProtectedRoute = protectedRoutes.includes(path)
  const isPublicRoute = publicRoutes.includes(path)

  // 3. Decrypt the session from the cookie
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  // 4. Redirect to /login if the user is not authenticated
  if (isProtectedRoute && !session?.userId) {
    return NextResponse.redirect(new URL('/login', req.nextUrl))
  }

  // 5. Redirect to /dashboard if the user is authenticated
  if (
    isPublicRoute &&
    session?.userId &&
    !req.nextUrl.pathname.startsWith('/dashboard')
  ) {
    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))
  }

  return NextResponse.next()
}

// Routes Middleware should not run on
export const config = {
  matcher: ['/((?!api|_next/static|_next/image|.*\.png$).*)']
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'
import { decrypt } from '@/app/lib/session'
import { cookies } from 'next/headers'

// 1. Specify protected and public routes
const protectedRoutes = ['/dashboard']
const publicRoutes = ['/login', 'signup', '/']

export default async function middleware(req) {
  // 2. Check if the current route is protected or public
  const path = req.nextUrl.pathname
  const isProtectedRoute = protectedRoutes.includes(path)
  const isPublicRoute = publicRoutes.includes(path)

  // 3. Decrypt the session from the cookie
  const cookie = (await cookies()).get('session')?.value
  const session = await decrypt(cookie)

  // 5. Redirect to /login if the user is not authenticated
  if (isProtectedRoute && !session?.userId) {
    return NextResponse.redirect(new URL('/login', req.nextUrl))
  }

  // 6. Redirect to /dashboard if the user is authenticated
  if (
    isPublicRoute &&
    session?.userId &&
    !req.nextUrl.pathname.startsWith('/dashboard')
  ) {
    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))
  }

  return NextResponse.next()
}

// Routes Middleware should not run on
export const config = {
  matcher: ['/((?!api|_next/static|_next/image|.*\.png$).*)']
}
```

----------------------------------------

TITLE: Conditionally Apply Headers in Next.js with `has` and `missing`
DESCRIPTION: This configuration snippet for `next.config.js` demonstrates how to apply HTTP headers conditionally based on incoming request properties such as headers, query parameters, cookies, or the host. It utilizes the `has` field to require specific matches and the `missing` field to require the absence of certain properties. The example also shows how to capture values from matched properties using regex for use in the applied header's value.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_7

LANGUAGE: js
CODE:
```
module.exports = {
  async headers() {
    return [
      // if the header `x-add-header` is present,
      // the `x-another-header` header will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-add-header',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: 'hello',
          },
        ],
      },
      // if the header `x-no-header` is not present,
      // the `x-another-header` header will be applied
      {
        source: '/:path*',
        missing: [
          {
            type: 'header',
            key: 'x-no-header',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: 'hello',
          },
        ],
      },
      // if the source, query, and cookie are matched,
      // the `x-authorized` header will be applied
      {
        source: '/specific/:path*',
        has: [
          {
            type: 'query',
            key: 'page',
            // the page value will not be available in the
            // header key/values since value is provided and
            // doesn't use a named capture group e.g. (?<page>home)
            value: 'home',
          },
          {
            type: 'cookie',
            key: 'authorized',
            value: 'true',
          },
        ],
        headers: [
          {
            key: 'x-authorized',
            value: ':authorized',
          },
        ],
      },
      // if the header `x-authorized` is present and
      // contains a matching value, the `x-another-header` will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-authorized',
            value: '(?<authorized>yes|true)',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: ':authorized',
          },
        ],
      },
      // if the host is `example.com`,
      // this header will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'host',
            value: 'example.com',
          },
        ],
        headers: [
          {
            key: 'x-another-header',
            value: ':authorized',
          },
        ],
      },
    ]
  }
}
```

----------------------------------------

TITLE: Next.js API Caching Behavior Reference Table
DESCRIPTION: Provides a quick reference table detailing how specific Next.js APIs affect the Router Cache, Full Route Cache, Data Cache, and React Cache, indicating whether they cache, revalidate, or opt out.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_14

LANGUAGE: APIDOC
CODE:
```
API Caching Effects:
  - <Link prefetch>: Router Cache (Cache)
  - router.prefetch: Router Cache (Cache)
  - router.refresh: Router Cache (Revalidate)
  - fetch: Data Cache (Cache), React Cache (Cache)
  - fetch options.cache: Data Cache (Cache or Opt out)
  - fetch options.next.revalidate: Full Route Cache (Revalidate), Data Cache (Revalidate)
  - fetch options.next.tags: Full Route Cache (Cache), Data Cache (Cache)
  - revalidateTag: Router Cache (Revalidate - Server Action), Full Route Cache (Revalidate), Data Cache (Revalidate)
  - revalidatePath: Router Cache (Revalidate - Server Action), Full Route Cache (Revalidate), Data Cache (Revalidate)
  - const revalidate: Full Route Cache (Revalidate or Opt out), Data Cache (Revalidate or Opt out)
  - const dynamic: Full Route Cache (Cache or Opt out), Data Cache (Cache or Opt out)
  - cookies: Router Cache (Revalidate - Server Action), Full Route Cache (Opt out)
  - headers, searchParams: Full Route Cache (Opt out)
  - generateStaticParams: Full Route Cache (Cache)
  - React.cache: React Cache (Cache)
  - unstable_cache: Data Cache (Cache)
```

----------------------------------------

TITLE: Define a Basic Server Action in Next.js
DESCRIPTION: This snippet illustrates how to define a simple Server Action in Next.js by marking an asynchronous function with `'use server'`. Server Actions allow for direct server-side logic execution without manual API endpoint creation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use server'

export async function create() {}
```

LANGUAGE: js
CODE:
```
'use server'

export async function create() {}
```

----------------------------------------

TITLE: Create and Store User Session in Next.js App Router
DESCRIPTION: This asynchronous function creates a new user session by inserting it into the database, encrypting the session ID, and storing the encrypted session in a secure HTTP-only cookie. It's designed for optimistic authentication checks in Next.js App Router applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_21

LANGUAGE: TypeScript
CODE:
```
import cookies from 'next/headers'
import { db } from '@/app/lib/db'
import { encrypt } from '@/app/lib/session'

export async function createSession(id: number) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)

  // 1. Create a session in the database
  const data = await db
    .insert(sessions)
    .values({
      userId: id,
      expiresAt,
    })
    // Return the session ID
    .returning({ id: sessions.id })

  const sessionId = data[0].id

  // 2. Encrypt the session ID
  const session = await encrypt({ sessionId, expiresAt })

  // 3. Store the session in cookies for optimistic auth checks
  const cookieStore = await cookies()
  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: 'lax',
    path: '/',
  })
}
```

LANGUAGE: JavaScript
CODE:
```
import cookies from 'next/headers'
import { db } from '@/app/lib/db'
import { encrypt } from '@/app/lib/session'

export async function createSession(id) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)

  // 1. Create a session in the database
  const data = await db
    .insert(sessions)
    .values({
      userId: id,
      expiresAt,
    })
    // Return the session ID
    .returning({ id: sessions.id })

  const sessionId = data[0].id

  // 2. Encrypt the session ID
  const session = await encrypt({ sessionId, expiresAt })

  // 3. Store the session in cookies for optimistic auth checks
  const cookieStore = await cookies()
  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: 'lax',
    path: '/',
  })
}
```

----------------------------------------

TITLE: Migrate Next.js Link Component Usage
DESCRIPTION: This code snippet illustrates the change in the Next.js Link component's usage between version 12 and 13. In Next.js 13, the `<a>` tag is no longer required as a direct child of `<Link>`, simplifying its syntax and always rendering an `<a>` tag under the hood.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

// Next.js 12: `<a>` has to be nested otherwise it's excluded
<Link href="/about">
  <a>About</a>
</Link>

// Next.js 13: `<Link>` always renders `<a>` under the hood
<Link href="/about">
  About
</Link>
```

----------------------------------------

TITLE: Invoke Server Function with HTML Form Action
DESCRIPTION: This snippet demonstrates how to trigger a Next.js Server Function by assigning it directly to the "action" prop of an HTML <form> element. The Server Function automatically receives the FormData object, allowing easy extraction of form inputs. This method is suitable for both Server and Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { createPost } from '@/app/actions'

export function Form() {
  return (
    <form action={createPost}>
      <input type="text" name="title" />
      <input type="text" name="content" />
      <button type="submit">Create</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { createPost } from '@/app/actions'

export function Form() {
  return (
    <form action={createPost}>
      <input type="text" name="title" />
      <input type="text" name="content" />
      <button type="submit">Create</button>
    </form>
  )
}
```

LANGUAGE: ts
CODE:
```
'use server'

export async function createPost(formData: FormData) {
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}
```

LANGUAGE: js
CODE:
```
'use server'

export async function createPost(formData) {
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}
```

----------------------------------------

TITLE: Call Server Functions from Client Components (Next.js/React)
DESCRIPTION: Server Functions defined in separate files can be imported and executed directly from Client Components. This example demonstrates a client-side button that, when clicked, invokes the `fetchUsers` server function to retrieve data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-server.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'
import { fetchUsers } from '../actions'

export default function MyButton() {
  return <button onClick={() => fetchUsers()}>Fetch Users</button>
}
```

LANGUAGE: jsx
CODE:
```
'use client'
import { fetchUsers } from '../actions'

export default function MyButton() {
  return <button onClick={() => fetchUsers()}>Fetch Users</button>
}
```

----------------------------------------

TITLE: Control Image Preloading with `priority` in Next.js
DESCRIPTION: The `priority` boolean prop determines if an image should be preloaded (`true`) or lazy-loaded (`false`). Setting it to `true` disables lazy loading and is recommended for above-the-fold or LCP images to improve initial page performance. Avoid using it with the `loading` prop to prevent warnings.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
// Default priority is false
<Image priority={false} />
```

----------------------------------------

TITLE: Secure Next.js Preview API Route with Token and Slug Validation
DESCRIPTION: This advanced Next.js API route (`pages/api/preview.js`) securely enables Preview Mode. It validates a `secret` token and a `slug` query parameter, fetches content from a headless CMS using `getPostBySlug`, and prevents preview mode if the content doesn't exist. Upon successful validation, it calls `res.setPreviewData({})` to enable Preview Mode and then redirects the user to the fetched content's path, preventing open redirect vulnerabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_2

LANGUAGE: JavaScript
CODE:
```
export default async (req, res) => {
  // Check the secret and next parameters
  // This secret should only be known to this API route and the CMS
  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  // Fetch the headless CMS to check if the provided `slug` exists
  // getPostBySlug would implement the required fetching logic to the headless CMS
  const post = await getPostBySlug(req.query.slug)

  // If the slug doesn't exist prevent preview mode from being enabled
  if (!post) {
    return res.status(401).json({ message: 'Invalid slug' })
  }

  // Enable Preview Mode by setting the cookies
  res.setPreviewData({})

  // Redirect to the path from the fetched post
  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities
  res.redirect(post.slug)
}
```

----------------------------------------

TITLE: Page Component Using Asynchronous Token Retrieval (Next.js 15)
DESCRIPTION: This `Page` component is updated to be `async` and correctly `await`s the result of `getToken`, aligning with the new asynchronous nature of Next.js 15's request APIs and ensuring proper data fetching.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { getToken } from '.../token-utils'

export default async function Page() {
  const token = await getToken();
  validateToken(token)
  return ...
}
```

----------------------------------------

TITLE: Invoking Next.js Server Actions with React useEffect
DESCRIPTION: This snippet demonstrates how to trigger a Next.js Server Action from a client component using React's `useEffect` hook. It's useful for scenarios where a mutation needs to be automatically invoked, such as updating a view count on component mount, and shows how to manage pending states with `useTransition` for user feedback.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_11

LANGUAGE: TSX
CODE:
```
'use client'

import { incrementViews } from './actions'
import { useState, useEffect, useTransition } from 'react'

export default function ViewCount({ initialViews }: { initialViews: number }) {
  const [views, setViews] = useState(initialViews)
  const [isPending, startTransition] = useTransition()

  useEffect(() => {
    startTransition(async () => {
      const updatedViews = await incrementViews()
      setViews(updatedViews)
    })
  }, [])

  // You can use `isPending` to give users feedback
  return <p>Total Views: {views}</p>
}
```

LANGUAGE: JSX
CODE:
```
'use client'

import { incrementViews } from './actions'
import { useState, useEffect, useTransition } from 'react'

export default function ViewCount({ initialViews }) {
  const [views, setViews] = useState(initialViews)
  const [isPending, startTransition] = useTransition()

  useEffect(() => {
    startTransition(async () => {
      const updatedViews = await incrementViews()
      setViews(updatedViews)
    })
  }, [])

  // You can use `isPending` to give users feedback
  return <p>Total Views: {views}</p>
}
```

----------------------------------------

TITLE: Redirecting User with permanentRedirect in Next.js Server Component
DESCRIPTION: This example demonstrates how to use `permanentRedirect` within a Next.js Server Component (`page.js`) to redirect a user to the `/login` page if a team resource is not found. It shows importing the function and conditionally calling it to terminate rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/permanentRedirect.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { permanentRedirect } from 'next/navigation'

async function fetchTeam(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  const team = await fetchTeam(id)
  if (!team) {
    permanentRedirect('/login')
  }

  // ...
}
```

----------------------------------------

TITLE: Next.js Server Actions Security Practices
DESCRIPTION: Ensure users are authorized to call Server Actions by reviewing and implementing recommended security practices for Next.js Server Components and Actions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_20

LANGUAGE: APIDOC
CODE:
```
Next.js Server Actions (Security):
  Purpose: Ensure authorization for Server Action calls.
  Recommendation: Implement robust authorization checks.
```

----------------------------------------

TITLE: Correct `next/link` Usage for Next.js Internal Navigation
DESCRIPTION: This snippet demonstrates the recommended way to navigate to internal Next.js pages using the `Link` component from `next/link`. Importing and wrapping the anchor element with `Link` enables client-side route transitions, providing a smooth single-page application experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-html-link-for-pages.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

function Home() {
  return (
    <div>
      <Link href="/about">About Us</Link>
    </div>
  )
}

export default Home
```

----------------------------------------

TITLE: Return JSON Response from Next.js Middleware
DESCRIPTION: This snippet demonstrates how to directly produce a response from Next.js Middleware by returning a `Response` or `NextResponse` instance. It shows an example of checking authentication and, if unauthorized, returning a JSON error message with a 401 status code.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_20

LANGUAGE: ts
CODE:
```
import type { NextRequest } from 'next/server'
import { isAuthenticated } from '@lib/auth'

// Limit the middleware to paths starting with `/api/`
export const config = {
  matcher: '/api/:function*',
}

export function middleware(request: NextRequest) {
  // Call our authentication function to check the request
  if (!isAuthenticated(request)) {
    // Respond with JSON indicating an error message
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    )
  }
}
```

LANGUAGE: js
CODE:
```
import { isAuthenticated } from '@lib/auth'

// Limit the middleware to paths starting with `/api/`
export const config = {
  matcher: '/api/:function*',
}

export function middleware(request) {
  // Call our authentication function to check the request
  if (!isAuthenticated(request)) {
    // Respond with JSON indicating an error message
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    )
  }
}
```

----------------------------------------

TITLE: Write Unit Test for Next.js Page Component (App Router)
DESCRIPTION: Shows how to write a basic unit test using React Testing Library and Jest for a Next.js App Router component. The test verifies that the `Page` component successfully renders a heading element using `render`, `screen.getByRole`, and `toBeInTheDocument`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_14

LANGUAGE: JSX
CODE:
```
import '@testing-library/jest-dom'
import { render, screen } from '@testing-library/react'
import Page from '../app/page'

describe('Page', () => {
  it('renders a heading', () => {
    render(<Page />)

    const heading = screen.getByRole('heading', { level: 1 })

    expect(heading).toBeInTheDocument()
  })
})
```

----------------------------------------

TITLE: Access Dynamic Route Parameters in Next.js Layout
DESCRIPTION: This example illustrates how to access dynamic route parameters (`params`) within a layout component. The `params` prop is a promise that resolves to an object containing the route parameters, requiring `async/await` to access its values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
export default async function Layout({
  params,
}: {
  params: Promise<{ team: string }>
}) {
  const { team } = await params
}
```

LANGUAGE: jsx
CODE:
```
export default async function Layout({ params }) {
  const { team } = await params
}
```

----------------------------------------

TITLE: Define Root Layout and Metadata in Next.js
DESCRIPTION: This snippet demonstrates how to define global metadata using Next.js's Metadata API and set up the RootLayout component. The RootLayout wraps the entire application, providing a base HTML structure and enabling SEO improvements. It accepts children to render nested components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-vite.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'My App',
  description: 'My App is a...'
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'My App',
  description: 'My App is a...'
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <div id="root">{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Implementing revalidatePath in a Next.js Route Handler
DESCRIPTION: This example demonstrates how to create a Next.js Route Handler that uses `revalidatePath` to invalidate cached data based on a path provided in the request query parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const path = request.nextUrl.searchParams.get('path')

  if (path) {
    revalidatePath(path)
    return Response.json({ revalidated: true, now: Date.now() })
  }

  return Response.json({
    revalidated: false,
    now: Date.now(),
    message: 'Missing path to revalidate',
  })
}
```

LANGUAGE: js
CODE:
```
import { revalidatePath } from 'next/cache'

export async function GET(request) {
  const path = request.nextUrl.searchParams.get('path')

  if (path) {
    revalidatePath(path)
    return Response.json({ revalidated: true, now: Date.now() })
  }

  return Response.json({
    revalidated: false,
    now: Date.now(),
    message: 'Missing path to revalidate',
  })
}
```

----------------------------------------

TITLE: Starting Next.js Development Server (Bash)
DESCRIPTION: This command starts the Next.js development server, making the application accessible locally, typically at `http://localhost:3000`. It enables hot-reloading and other development features, allowing developers to see changes in real-time. This command requires all project dependencies to be installed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Refactoring Synchronous `params` and `searchParams` Access in Next.js 15 (After)
DESCRIPTION: This snippet demonstrates the corrected asynchronous access pattern for `params` and `searchParams` required in Next.js 15. The component is now `async`, and `params` and `searchParams` are `await`ed before their values are destructured, ensuring compatibility with the new Promise-based API. The `app/page.js` example shows that the `export * from` pattern remains valid as long as the exported component correctly handles the asynchronous values.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-params.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export default async function ComponentThatWillBeExportedAsPage({ params, searchParams }) {
  const { slug } = await params;
  const { page } = await searchParams
  return <RenderList slug={slug} page={page}>
}
```

LANGUAGE: jsx
CODE:
```
export * from '.../some-file'
```

----------------------------------------

TITLE: Handling Client-Side Form Submission (TypeScript React)
DESCRIPTION: This TypeScript React component demonstrates how to handle form submissions on the client-side. The `onSubmit` function prevents default form behavior, creates `FormData` from the current target, and sends a POST request to `/api/submit` using `fetch`. It then handles the JSON response from the API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { FormEvent } from 'react'

export default function Page() {
  async function onSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const response = await fetch('/api/submit', {
      method: 'POST',
      body: formData,
    })

    // Handle response if necessary
    const data = await response.json()
    // ...
  }

  return (
    <form onSubmit={onSubmit}>
      <input type="text" name="name" />
      <button type="submit">Submit</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Creating Next.js App with npx
DESCRIPTION: This command initializes a new Next.js project named 'hello-world-app' using `npx` and the 'hello-world' example template. It sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/hello-world/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example hello-world hello-world-app
```

----------------------------------------

TITLE: Define Server Actions with Automatic Dead Code Elimination
DESCRIPTION: This example demonstrates how to define Server Actions using the `'use server'` directive. It highlights Next.js's built-in security features: Server Actions that are actually used in the application (like `updateUserAction`) receive secure, encrypted IDs for client reference, while unused actions (like `deleteUserAction`) are automatically removed during the build process, preventing them from becoming publicly accessible endpoints.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_11

LANGUAGE: JSX
CODE:
```
// app/actions.js
'use server'

// If this action **is** used in our application, Next.js
// will create a secure ID to allow the client to reference
// and call the Server Action.
export async function updateUserAction(formData) {}

// If this action **is not** used in our application, Next.js
// will automatically remove this code during `next build`
// and will not create a public endpoint.
export async function deleteUserAction(formData) {}
```

----------------------------------------

TITLE: Validate Form Fields in Next.js Server Action
DESCRIPTION: This code demonstrates how to integrate Zod schema validation within a Next.js Server Action. The `signup` function uses `SignupFormSchema.safeParse` to validate incoming `FormData`. If validation fails, it returns early with flattened field errors, preventing unnecessary calls to an authentication provider or database.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { SignupFormSchema, FormState } from '@/app/lib/definitions'

export async function signup(state: FormState, formData: FormData) {
  // Validate form fields
  const validatedFields = SignupFormSchema.safeParse({
    name: formData.get('name'),
    email: formData.get('email'),
    password: formData.get('password'),
  })

  // If any form fields are invalid, return early
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Call the provider or db to create a user...
}
```

LANGUAGE: javascript
CODE:
```
import { SignupFormSchema } from '@/app/lib/definitions'

export async function signup(state, formData) {
  // Validate form fields
  const validatedFields = SignupFormSchema.safeParse({
    name: formData.get('name'),
    email: formData.get('email'),
    password: formData.get('password'),
  })

  // If any form fields are invalid, return early
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Call the provider or db to create a user...
}
```

----------------------------------------

TITLE: Next.js Link Component for Navigation
DESCRIPTION: Explains the usage of the <Link> component for client-side navigation and prefetching in both App Router and Pages Router environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Component: <Link>
  Purpose: Client-side navigation and prefetching
  Applicability: App Router, Pages Router
```

----------------------------------------

TITLE: Creating JSON Responses with NextResponse (JavaScript)
DESCRIPTION: The static `json` method is a convenient way to create a `NextResponse` instance that sends a JSON payload. It leverages the standard `Response.json` method and then wraps the resulting response body and initialization options within a new `NextResponse` instance. This is commonly used in API routes or middleware to return structured data.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_28

LANGUAGE: JavaScript
CODE:
```
    static json(body, init) {
        const response = Response.json(body, init);
        return new NextResponse(response.body, response);
    }
```

----------------------------------------

TITLE: Create Next.js App Router root layout
DESCRIPTION: Define the root layout component for the Next.js App Router, which is required and must contain `<html>` and `<body>` tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Create Data Transfer Object (DTO) for User Profile
DESCRIPTION: This `tsx` snippet defines `getProfileDTO`, a function within the Data Access Layer responsible for fetching user data and transforming it into a Data Transfer Object (DTO). It uses `getCurrentUser` for authorization checks and applies privacy rules (`canSeeUsername`, `canSeePhoneNumber`) to selectively expose data. This ensures only relevant and authorized information is returned, adhering to API minimization principles and preventing over-fetching or sensitive data exposure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import 'server-only'\nimport { getCurrentUser } from './auth'\n\nfunction canSeeUsername(viewer: User) {\n  // Public info for now, but can change\n  return true\n}\n\nfunction canSeePhoneNumber(viewer: User, team: string) {\n  // Privacy rules\n  return viewer.isAdmin || team === viewer.team\n}\n\nexport async function getProfileDTO(slug: string) {\n  // Don't pass values, read back cached values, also solves context and easier to make it lazy\n\n  // use a database API that supports safe templating of queries\n  const [rows] = await sql`SELECT * FROM user WHERE slug = ${slug}`\n  const userData = rows[0]\n\n  const currentUser = await getCurrentUser()\n\n  // only return the data relevant for this query and not everything\n  // <https://www.w3.org/2001/tag/doc/APIMinimization>\n  return {\n    username: canSeeUsername(currentUser) ? userData.username : null,\n    phonenumber: canSeePhoneNumber(currentUser, userData.team)\n      ? userData.phonenumber\n      : null,\n  }\n}
```

----------------------------------------

TITLE: BAD Example: Exposing Sensitive Data in Component-Level Access
DESCRIPTION: This `tsx` snippet illustrates an anti-pattern where a Server Component directly fetches all user data from the database and passes the entire `userData` object to a Client Component (`Profile`). This is problematic because it exposes all fields, including potentially sensitive ones, to the client, violating data privacy and security principles. It highlights the risk of direct component-level data access without proper sanitization.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import Profile from './components/profile.tsx'\n\nexport async function Page({ params: { slug } }) {\n  const [rows] = await sql`SELECT * FROM user WHERE slug = ${slug}`\n  const userData = rows[0]\n  // EXPOSED: This exposes all the fields in userData to the client because\n  // we are passing the data from the Server Component to the Client.\n  return <Profile user={userData} />\n}
```

----------------------------------------

TITLE: Next.js useRouter API Methods Reference
DESCRIPTION: Comprehensive API documentation for the methods available on the `router` object returned by the `useRouter` hook. It details functions like `push` for navigation with history, `replace` for navigation without history, `refresh` for re-fetching data, `prefetch` for optimizing transitions, and `back`/`forward` for history navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-router.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
router.push(href: string, { scroll: boolean }):
  description: Perform a client-side navigation to the provided route. Adds a new entry into the browser’s history stack.
  parameters:
    href: string - The destination route.
    scroll: boolean - (Optional) Controls whether the page scrolls to the top after navigation.
router.replace(href: string, { scroll: boolean }):
  description: Perform a client-side navigation to the provided route without adding a new entry into the browser’s history stack.
  parameters:
    href: string - The destination route.
    scroll: boolean - (Optional) Controls whether the page scrolls to the top after navigation.
router.refresh():
  description: Refresh the current route. Making a new request to the server, re-fetching data requests, and re-rendering Server Components. The client will merge the updated React Server Component payload without losing unaffected client-side React (e.g. useState) or browser state (e.g. scroll position).
router.prefetch(href: string):
  description: Prefetch the provided route for faster client-side transitions.
  parameters:
    href: string - The route to prefetch.
router.back():
  description: Navigate back to the previous route in the browser’s history stack.
router.forward():
  description: Navigate forwards to the next page in the browser’s history stack.
```

----------------------------------------

TITLE: Fetch Data in Next.js Server Components
DESCRIPTION: Demonstrates how to use the extended `fetch` API within Next.js Server Components to retrieve data from an external API and render it. This example shows fetching blog posts and displaying their titles.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/fetch.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  let data = await fetch('https://api.vercel.app/blog')
  let posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  let data = await fetch('https://api.vercel.app/blog')
  let posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Implementing Partial Prerendering with Suspense in Next.js
DESCRIPTION: This example demonstrates how to enable Partial Prerendering and use React Suspense to define dynamic boundaries within a Next.js page. Static components render immediately, while dynamic components wrapped in Suspense are streamed asynchronously, improving initial page load performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/06-partial-prerendering.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import { Suspense } from 'react'
import StaticComponent from './StaticComponent'
import DynamicComponent from './DynamicComponent'
import Fallback from './Fallback'

export const experimental_ppr = true

export default function Page() {
  return (
    <>
      <StaticComponent />
      <Suspense fallback={<Fallback />}>
        <DynamicComponent />
      </Suspense>
    </>
  )
}
```

----------------------------------------

TITLE: Enabling Preview Mode in Next.js API Route (Basic)
DESCRIPTION: This snippet demonstrates the basic usage of `res.setPreviewData({})` within a Next.js API route. Calling this method sets specific cookies in the browser, activating Preview Mode for subsequent requests. This allows statically generated pages to be rendered at request time, fetching draft content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default function handler(req, res) {
  // ...
  res.setPreviewData({})
  // ...
}
```

----------------------------------------

TITLE: Avoid Side-Effects in Next.js Layouts During Prefetching (Before)
DESCRIPTION: This code demonstrates a Next.js layout where `trackPageView()` is called directly. This leads to unwanted side-effects during route prefetching, as analytics tracking occurs before the user actually visits the page, resulting in inaccurate data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/prefetching.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { trackPageView } from '@/lib/analytics'

export default function Layout({ children }: { children: React.ReactNode }) {
  // This runs during prefetch
  trackPageView()

  return <div>{children}</div>
}
```

LANGUAGE: jsx
CODE:
```
import { trackPageView } from '@/lib/analytics'

export default function Layout({ children }) {
  // This runs during prefetch
  trackPageView()

  return <div>{children}</div>
}
```

----------------------------------------

TITLE: Invoke Server Functions from Client Components (TypeScript/JavaScript)
DESCRIPTION: Demonstrates how a Client Component can import and invoke a Server Function defined in a separate file. The example uses the formAction prop on a button to trigger the server-side createPost function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use client'

import { createPost } from '@/app/actions'

export function Button() {
  return <button formAction={createPost}>Create</button>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { createPost } from '@/app/actions'

export function Button() {
  return <button formAction={createPost}>Create</button>
}
```

----------------------------------------

TITLE: Next.js Project Auditing Checklist
DESCRIPTION: This section provides a comprehensive checklist for auditing Next.js projects, focusing on security and best practices. It highlights key areas such as the Data Access Layer, client and server components, input validation in dynamic routes, and the critical `middleware.tsx` and `route.tsx` files, recommending regular penetration testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_18

LANGUAGE: APIDOC
CODE:
```
Auditing Next.js Projects Recommendations:
- Data Access Layer:
  - Establish an isolated Data Access Layer.
  - Verify database packages and environment variables are not imported outside the Data Access Layer.
- "use client" files:
  - Check if Component props expect private data.
  - Assess if type signatures are overly broad.
- "use server" files:
  - Validate Action arguments within the action or Data Access Layer.
  - Ensure user re-authorization inside the action.
- Dynamic Routes (e.g., /[param]/):
  - Validate all user input parameters.
- middleware.tsx and route.tsx:
  - Conduct thorough audits using traditional security techniques.
  - Implement regular Penetration Testing or Vulnerability Scanning.
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Starts the Next.js development server, which watches for code changes and provides hot module reloading. This command is essential for actively developing and testing changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#_snippet_5

LANGUAGE: shell
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Remove <a> Tags from Next.js Link Components
DESCRIPTION: This codemod updates Next.js `Link` components by removing nested `<a>` tags, aligning with the new `Link` component behavior. For cases where auto-fixing is not possible (e.g., custom components inside `Link`), it adds a `legacyBehavior` prop to maintain existing functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/codemods.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
npx @next/codemod@latest new-link .
```

LANGUAGE: jsx
CODE:
```
<Link href="/about">
  <a>About</a>
</Link>
```

LANGUAGE: jsx
CODE:
```
<Link href="/about">
  About
</Link>
```

LANGUAGE: jsx
CODE:
```
<Link href="/about">
  <a onClick={() => console.log('clicked')}>About</a>
</Link>
```

LANGUAGE: jsx
CODE:
```
<Link href="/about" onClick={() => console.log('clicked')}>
  About
</Link>
```

LANGUAGE: jsx
CODE:
```
const Component = () => <a>About</a>

<Link href="/about">
  <Component />
</Link>
```

LANGUAGE: jsx
CODE:
```
const Component = () => <a>About</a>

<Link href="/about" legacyBehavior>
  <Component />
</Link>
```

----------------------------------------

TITLE: Return Non-UI Content (RSS Feed) from Next.js Route Handler
DESCRIPTION: Explains how to use Route Handlers to return non-UI content, specifically demonstrating how to generate an RSS feed (`text/xml`) response. It highlights the flexibility of Route Handlers for serving various content types beyond typical UI.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_21

LANGUAGE: ts
CODE:
```
export async function GET() {
  return new Response(
    `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>Next.js Documentation</title>
  <link>https://nextjs.org/docs</link>
  <description>The React Framework for the Web</description>
</channel>

</rss>`,
    {
      headers: {
        'Content-Type': 'text/xml',
      },
    }
  )
}
```

LANGUAGE: js
CODE:
```
export async function GET() {
  return new Response(`<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

<channel>
  <title>Next.js Documentation</title>
  <link>https://nextjs.org/docs</link>
  <description>The React Framework for the Web</description>
</channel>

</rss>`)
}
```

----------------------------------------

TITLE: Next.js Image Component Props Reference
DESCRIPTION: Detailed documentation for the available properties of the Next.js `next/image` component, including their types, status, and comprehensive usage descriptions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Props:
  - name: src
    type: String
    status: Required
    description: The source of the image. Can be an internal path string, an absolute external URL (requires remotePatterns config), or a static import. Refer to code examples for usage.
  - name: alt
    type: String
    status: Required
    description: The `alt` property is used to describe the image for screen readers and search engines. It is also the fallback text if images have been disabled or an error occurs while loading the image. It should contain text that could replace the image without changing the meaning of the page. It is not meant to supplement the image and should not repeat information that is already provided in the captions above or below the image. If the image is purely decorative or not intended for the user, the `alt` property should be an empty string (`alt=""`).
  - name: width
    type: Integer (px)
    status: Optional
    description: Specifies the width of the image in pixels.
  - name: height
    type: Integer (px)
    status: Optional
    description: Specifies the height of the image in pixels.
  - name: fill
    type: Boolean
    status: Optional
    description: When true, the image will fill its parent element.
  - name: loader
    type: Function
    status: Optional
    description: A custom function to generate the image URL.
  - name: sizes
    type: String
    status: Optional
    description: A string of media conditions and image source sizes.
  - name: quality
    type: Integer (1-100)
    status: Optional
    description: The quality of the optimized image, from 1 to 100.
  - name: priority
    type: Boolean
    status: Optional
    description: When true, the image will be considered high priority and preloaded.
  - name: placeholder
    type: String
    status: Optional
    description: The placeholder to use while the image is loading (e.g., "blur", "empty").
  - name: style
    type: Object
    status: Optional
    description: Inline style object to apply to the image element.
  - name: onLoadingComplete
    type: Function
    status: Deprecated
    description: Callback function invoked when the image has finished loading.
  - name: onLoad
    type: Function
    status: Optional
    description: Callback function invoked when the image has finished loading.
  - name: onError
    type: Function
    status: Optional
    description: Callback function invoked if an error occurs during image loading.
  - name: loading
    type: String
    status: Optional
    description: Specifies the loading behavior of the image (e.g., "lazy", "eager").
  - name: blurDataURL
    type: String
    status: Optional
    description: A Data URL to use as a placeholder image.
  - name: overrideSrc
    type: String
    status: Optional
    description: Overrides the default src for SEO purposes.
```

----------------------------------------

TITLE: Add Metadata to Root Layout in Next.js App Router
DESCRIPTION: Examples of adding metadata like title and description to the root layout in a Next.js App Router application, leveraging built-in SEO support.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Home',
  description: 'Welcome to Next.js',
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Home',
  description: 'Welcome to Next.js',
}
```

----------------------------------------

TITLE: Programmatic Navigation with useRouter in Next.js
DESCRIPTION: This snippet demonstrates how to use the `useRouter` hook from `next/navigation` within a Client Component to programmatically navigate to a new route. Clicking the 'Dashboard' button triggers a client-side navigation to '/dashboard', adding a new entry to the browser's history stack.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-router.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  )
}
```

----------------------------------------

TITLE: Configure Google Font with Specific Weight in Next.js
DESCRIPTION: When not using variable fonts, you need to specify a weight for Google Fonts. This example demonstrates how to import the Roboto font and set its weight to '400' for use in the Root Layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/13-fonts.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { Roboto } from 'next/font/google'

const roboto = Roboto({
  weight: '400',
  subsets: ['latin'],
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={roboto.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { Roboto } from 'next/font/google'

const roboto = Roboto({
  weight: '400',
  subsets: ['latin'],
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={roboto.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Configure Tailwind CSS for Next.js App Router
DESCRIPTION: Demonstrates how to update the `tailwind.config.js` file to include the `app` directory for Tailwind CSS content scanning. This ensures that Tailwind utility classes used in `app` directory components are correctly processed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_31

LANGUAGE: js
CODE:
```
module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx,mdx}', // <-- Add this line
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
  ],
}
```

----------------------------------------

TITLE: Next.js App Router: Integrate Client-Only Component into Page
DESCRIPTION: Updates the main `page.tsx` (or `page.js`) to import and render the `ClientOnly` component. This integrates the client-side application into the Next.js entrypoint, allowing the SPA to take over and manage routing client-side.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import { ClientOnly } from './client'

export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return <ClientOnly />
}
```

LANGUAGE: jsx
CODE:
```
import { ClientOnly } from './client'

export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return <ClientOnly />
}
```

----------------------------------------

TITLE: Next.js App Router: Define Initial Catch-All Page
DESCRIPTION: Sets up the initial `page.tsx` (or `page.js`) for the optional catch-all route. It uses `generateStaticParams` to ensure only the root path (`/`) is generated, effectively mapping all routes to this single page as a Server Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return '...' // We'll update this
}
```

LANGUAGE: jsx
CODE:
```
export function generateStaticParams() {
  return [{ slug: [''] }]
}

export default function Page() {
  return '...' // We'll update this
}
```

----------------------------------------

TITLE: Define Next.js Client Component in App Directory
DESCRIPTION: This snippet demonstrates how to create a Client Component within the Next.js `app` directory. By adding the `'use client'` directive, the component gains access to browser APIs, state, and effects, similar to components in the `pages` directory, while still benefiting from server-side prerendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
'use client'

// This is a Client Component (same as components in the `pages` directory)
// It receives data as props, has access to state and effects, and is
// prerendered on the server during the initial page load.
export default function HomePage({ recentPosts }) {
  return (
    <div>
      {recentPosts.map((post) => (
        <div key={post.id}>{post.title}</div>
      ))}
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

// This is a Client Component. It receives data as props and
// has access to state and effects just like Page components
// in the `pages` directory.
export default function HomePage({ recentPosts }) {
  return (
    <div>
      {recentPosts.map((post) => (
        <div key={post.id}>{post.title}</div>
      ))}
    </div>
  )
}
```

----------------------------------------

TITLE: Upgrade Next.js using codemod
DESCRIPTION: Use the Next.js codemod to automatically upgrade your application to the latest stable version. This command simplifies the upgrade process by applying necessary code transformations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/17-upgrading.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx @next/codemod@latest upgrade latest
```

----------------------------------------

TITLE: Integrate Client Component into Next.js Server Component Page
DESCRIPTION: This example illustrates how to create a default Server Component page (`page.tsx`) in the Next.js `app` directory. It shows how to import and render a Client Component within it, and how to perform data fetching directly within the Server Component using the new `fetch` API before passing data as props to the Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
// Import your Client Component
import HomePage from './home-page'

async function getPosts() {
  const res = await fetch('https://...')
  const posts = await res.json()
  return posts
}

export default async function Page() {
  // Fetch data directly in a Server Component
  const recentPosts = await getPosts()
  // Forward fetched data to your Client Component
  return <HomePage recentPosts={recentPosts} />
}
```

LANGUAGE: jsx
CODE:
```
// Import your Client Component
import HomePage from './home-page'

async function getPosts() {
  const res = await fetch('https://...')
  const posts = await res.json()
  return posts
}

export default async function Page() {
  // Fetch data directly in a Server Component
  const recentPosts = await getPosts()
  // Forward fetched data to your Client Component
  return <HomePage recentPosts={recentPosts} />
}
```

----------------------------------------

TITLE: Cache Next.js Function Output
DESCRIPTION: Demonstrates applying `use cache` to an asynchronous function (TSX/JSX) to cache its return value, useful for network requests, database queries, or slow computations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-cache.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export async function getData() {
  'use cache'

  const data = await fetch('/api/data')
  return data
}
```

LANGUAGE: jsx
CODE:
```
export async function getData() {
  'use cache'

  const data = await fetch('/api/data')
  return data
}
```

----------------------------------------

TITLE: Installing Dependencies and Running Next.js in Development (npm)
DESCRIPTION: These commands first install all project dependencies using `npm install`, then start the Next.js development server using `npm run dev`. This makes the application accessible locally, typically at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Bootstrapping Next.js App with Mux Video Example (Bun)
DESCRIPTION: This command uses `bunx` to initialize a new Next.js project with the `with-mux-video` example. It's for users who prefer Bun as their JavaScript runtime and package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mux-video/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
bunx create-next-app --example with-mux-video with-mux-video-app
```

----------------------------------------

TITLE: Optimizing Client Bundle Size by Selective Client Components
DESCRIPTION: This example illustrates how to reduce JavaScript bundle size by applying the 'use client' directive only to specific interactive components, rather than marking large parts of your UI. It demonstrates a Server Component layout importing a Client Component search bar, allowing most of the UI to remain a Server Component while enabling interactivity where needed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
// Client Component
import Search from './search'
// Server Component
import Logo from './logo'

// Layout is a Server Component by default
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <>
      <nav>
        <Logo />
        <Search />
      </nav>
      <main>{children}</main>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
// Client Component
import Search from './search'
// Server Component
import Logo from './logo'

// Layout is a Server Component by default
export default function Layout({ children }) {
  return (
    <>
      <nav>
        <Logo />
        <Search />
      </nav>
      <main>{children}</main>
    </>
  )
}
```

LANGUAGE: tsx
CODE:
```
'use client'

export default function Search() {
  // ...
}
```

LANGUAGE: jsx
CODE:
```
'use client'

export default function Search() {
  // ...
}
```

----------------------------------------

TITLE: Define a Next.js Root Layout
DESCRIPTION: This snippet shows how to define the top-most root layout for a Next.js application. It is responsible for defining the `<html>` and `<body>` tags and wrapping the entire application's content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Integrate Google Fonts with Tailwind CSS in Next.js App Router Layout
DESCRIPTION: Explains how to use `next/font/google` to define CSS variables for Google Fonts (Inter, Roboto Mono) and apply them to the HTML document in a Next.js App Router `layout.tsx` or `layout.js` for seamless Tailwind CSS integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_30

LANGUAGE: tsx
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto-mono',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html
      lang="en"
      className={`${inter.variable} ${roboto_mono.variable} antialiased`}
    >
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
})

const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-roboto-mono',
})

export default function RootLayout({ children }) {
  return (
    <html
      lang="en"
      className={`${inter.variable} ${roboto_mono.variable} antialiased`}
    >
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Generate and Apply CSP Nonce with Next.js Middleware
DESCRIPTION: This middleware function dynamically generates a unique nonce for each request and constructs a Content Security Policy (CSP) header. It sets the CSP header in both the request and response, ensuring secure content delivery. This approach requires dynamic rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/content-security-policy.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')
  const cspHeader = `
    default-src 'self';
    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';
    style-src 'self' 'nonce-${nonce}';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
`
  // Replace newline characters and spaces
  const contentSecurityPolicyHeaderValue = cspHeader
    .replace(/\s{2,}/g, ' ')
    .trim()

  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-nonce', nonce)

  requestHeaders.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  const response = NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  })
  response.headers.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  return response
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')
  const cspHeader = `
    default-src 'self';
    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';
    style-src 'self' 'nonce-${nonce}';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
`
  // Replace newline characters and spaces
  const contentSecurityPolicyHeaderValue = cspHeader
    .replace(/\s{2,}/g, ' ')
    .trim()

  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-nonce', nonce)
  requestHeaders.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  const response = NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  })
  response.headers.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )

  return response
}
```

----------------------------------------

TITLE: Securing Server-Only Data Fetching with `server-only`
DESCRIPTION: This example shows how to explicitly mark a module as server-only by importing the `server-only` package. This prevents the module from being accidentally imported into a Client Component, causing a build-time error and ensuring sensitive server-side logic remains isolated.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_13

LANGUAGE: javascript
CODE:
```
import 'server-only'

export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

----------------------------------------

TITLE: Mark Module as Server-Only in TypeScript
DESCRIPTION: This TypeScript snippet illustrates how to use `import 'server-only'` at the top of a module (e.g., `lib/data.ts`). This directive ensures that the module's code is exclusively for server-side execution, causing a build error if it's ever imported into a client environment, thereby preventing accidental exposure of server-only logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_10

LANGUAGE: TypeScript
CODE:
```
import 'server-only'

//...
```

----------------------------------------

TITLE: Migrating Next.js Page Params & SearchParams to Async (JavaScript)
DESCRIPTION: This snippet demonstrates how to update `params` and `searchParams` in Next.js `page.js` to be asynchronous in Next.js 15 for JavaScript. Both props are now Promises, requiring `await` to access their properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_16

LANGUAGE: javascript
CODE:
```
// Before
export function generateMetadata({ params, searchParams }) {
  const { slug } = params
  const { query } = searchParams
}

export default function Page({ params, searchParams }) {
  const { slug } = params
  const { query } = searchParams
}

// After
export async function generateMetadata(props) {
  const params = await props.params
  const searchParams = await props.searchParams
  const slug = params.slug
  const query = searchParams.query
}

export async function Page(props) {
  const params = await props.params
  const searchParams = await props.searchParams
  const slug = params.slug
  const query = searchParams.query
}
```

----------------------------------------

TITLE: Starting Next.js Development Server (Bash)
DESCRIPTION: These commands initiate the Next.js development server, making the application accessible locally. They provide various package manager options (npm, yarn, pnpm, bun) to run the `dev` script defined in `package.json`.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Running Next.js in Development Mode (Bash)
DESCRIPTION: These commands are used to set up and run the Next.js application in development mode. `npm install` installs all project dependencies, and `npm run dev` starts the development server, enabling hot-reloading and other development features.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Define a Basic GET Route Handler
DESCRIPTION: Illustrates the fundamental structure for creating a public HTTP `GET` endpoint in Next.js using the `route.ts` or `route.js` file convention, accessible at `/api`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
export function GET(request: Request) {}
```

LANGUAGE: js
CODE:
```
export function GET(request) {}
```

----------------------------------------

TITLE: Implement Rate Limiting in Next.js Route Handlers
DESCRIPTION: This snippet demonstrates how to implement server-side rate limiting for a Next.js API route. It uses an asynchronous `checkRateLimit` function to determine if the request exceeds the allowed rate and returns a 429 status code if the limit is exceeded.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_16

LANGUAGE: ts
CODE:
```
import { NextResponse } from 'next/server'
import { checkRateLimit } from '@/lib/rate-limit'

export async function POST(request: Request) {
  const { rateLimited } = await checkRateLimit(request)

  if (rateLimited) {
    return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
  }

  return new Response(null, { status: 204 })
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'
import { checkRateLimit } from '@/lib/rate-limit'

export async function POST(request) {
  const { rateLimited } = await checkRateLimit(request)

  if (rateLimited) {
    return NextResponse.json({ error: 'Rate limit exceeded' }, { status: 429 })
  }

  return new Response(null, { status: 204 })
}
```

----------------------------------------

TITLE: Custom Image Loader Function for App Router
DESCRIPTION: This JavaScript function defines a custom image loader for the Next.js App Router. It takes `src`, `width`, and `quality` as parameters and constructs a URL for an external image optimization service. The `'use client'` directive marks it as a Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/images.mdx#_snippet_1

LANGUAGE: js
CODE:
```
'use client'

export default function myImageLoader({ src, width, quality }) {
  return `https://example.com/${src}?w=${width}&q=${quality || 75}`
}
```

----------------------------------------

TITLE: Next.js Link Component Props (App Router)
DESCRIPTION: Detailed reference for props available on the `<Link>` component when used with the Next.js App Router, outlining each prop's type, requirement, and purpose.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Prop: href
  Example: href="/dashboard"
  Type: String or Object
  Required: Yes
Prop: replace
  Example: replace={false}
  Type: Boolean
  Required: -
Prop: scroll
  Example: scroll={false}
  Type: Boolean
  Required: -
Prop: prefetch
  Example: prefetch={false}
  Type: Boolean or null
  Required: -
Prop: onNavigate
  Example: onNavigate={(e) => {}}
  Type: Function
  Required: -
```

----------------------------------------

TITLE: Implement a Dynamic Segment with Data Fetching in Next.js
DESCRIPTION: This example demonstrates how to create a dynamic route segment (`[slug]`) that fetches and displays data based on the dynamic parameter. The `params` prop provides access to the dynamic segment value, enabling the page to retrieve specific content like a blog post.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export default async function BlogPostPage({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = await params
  const post = await getPost(slug)

  return (
    <div>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function BlogPostPage({ params }) {
  const { slug } = await params
  const post = await getPost(slug)

  return (
    <div>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </div>
  )
}
```

----------------------------------------

TITLE: Calling revalidateTag to invalidate cache entries in Next.js
DESCRIPTION: `revalidateTag` is used to invalidate cache entries associated with a specific tag. It should be called within a Route Handler or Server Action after a data mutation event. This example demonstrates revalidating all entries tagged 'user' after an update.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { revalidateTag } from 'next/cache'

export async function updateUser(id: string) {
  // Mutate data
  revalidateTag('user')
}
```

LANGUAGE: jsx
CODE:
```
import { revalidateTag } from 'next/cache'

export async function updateUser(id) {
  // Mutate data
  revalidateTag('user')
}
```

----------------------------------------

TITLE: Generate Dynamic Open Graph Images with Next.js ImageResponse
DESCRIPTION: This example demonstrates how to create dynamic Open Graph images for blog posts using Next.js's `ImageResponse`. It shows how to define image metadata like size and content type, fetch post-specific data, and render a JSX element within `ImageResponse` to display dynamic content like a post title.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/14-metadata-and-og-images.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { ImageResponse } from 'next/og'
import { getPost } from '@/app/lib/data'

// Image metadata
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image({ params }: { params: { slug: string } }) {
  const post = await getPost(params.slug)

  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    )
  )
}
```

LANGUAGE: jsx
CODE:
```
import { ImageResponse } from 'next/og'
import { getPost } from '@/app/lib/data'

// Image metadata
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image({ params }) {
  const post = await getPost(params.slug)

  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        {post.title}
      </div>
    )
  )
}
```

----------------------------------------

TITLE: Tagging Fetch Calls for On-Demand Revalidation in Next.js App Router
DESCRIPTION: This snippet demonstrates how to tag `fetch` requests in a Next.js App Router component. By adding `next: { tags: ['posts'] }` to the fetch options, the data fetched can later be invalidated on-demand using `revalidateTag` based on the 'posts' tag.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog', {
    next: { tags: ['posts'] },
  })
  const posts = await data.json()
  // ...
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog', {
    next: { tags: ['posts'] },
  })
  const posts = await data.json()
  // ...
}
```

----------------------------------------

TITLE: Create Next.js App with Default Template
DESCRIPTION: Command to start the interactive `create-next-app` process, prompting the user for project configuration details.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/create-next-app.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx create-next-app@latest
```

----------------------------------------

TITLE: Next.js App Router Hooks API Overview and Changes
DESCRIPTION: Overview of the new routing hooks (`useRouter`, `usePathname`, `useSearchParams`) introduced for the Next.js `app` directory, detailing their purpose, import paths, and differences from `pages` router hooks. Also lists properties removed from the new `useRouter` hook and notes on compatibility.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_13

LANGUAGE: APIDOC
CODE:
```
useRouter() (from 'next/navigation'):
  Purpose: Programmatic navigation.
  Behavior:
    - Does not return 'pathname' (use usePathname() instead).
    - Does not return 'query' object (use useSearchParams() and useParams() instead).
  Removed Properties:
    - isFallback (replaced by new fallback mechanism)
    - locale, locales, defaultLocales, domainLocales (built-in i18n no longer necessary)
    - basePath (alternative not yet implemented)
    - asPath (concept of 'as' removed)
    - isReady (no longer necessary; useSearchParams() skips prerendering)
    - route (use usePathname() or useSelectedLayoutSegments() instead)
  Supported In: Client Components only.

usePathname() (from 'next/navigation'):
  Purpose: Get the current URL pathname.
  Supported In: Client Components only.

useSearchParams() (from 'next/navigation'):
  Purpose: Get URL search parameters.
  Behavior: During static rendering, components using this hook skip prerendering and render on client.
  Supported In: Client Components only.

useParams() (from 'next/navigation' - implied):
  Purpose: Get dynamic route parameters.

useRouter() (from 'next/router'):
  Purpose: Router hook for 'pages' directory.
  Compatibility: Not supported in 'app' directory.

useRouter() (from 'next/compat/router'):
  Purpose: For sharing components between 'pages' and 'app' routers.
  Usage: Intended for transition period; update to 'next/navigation' useRouter when fully on 'app' router.
```

----------------------------------------

TITLE: Compatible `href` for External URLs in Next.js Link Component (JSX)
DESCRIPTION: This snippet illustrates the correct way to handle external URLs with the `next/link` component. By placing the full external URL (`mailto:john@example.com`) directly in the `href` prop, the `as` prop is not needed for external navigation, thus avoiding the incompatibility error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-relative-url-external-as.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page(props) {
  return (
    <>
      <Link href="mailto:john@example.com">
        <a>Invalid link</a>
      </Link>
    </>
  )
}
```

----------------------------------------

TITLE: Handling ESLint no-floating-promises with Next.js Router Methods
DESCRIPTION: Provides multiple solutions to address the `no-floating-promises` ESLint rule when calling Promise-returning Next.js router methods like `router.push`. Solutions include disabling the lint rule, `void`ing the Promise, or using an `async` function with `await` and then `void`ing the function call.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_23

LANGUAGE: jsx
CODE:
```
import { useEffect } from 'react'
import { useRouter } from 'next/router'

// Here you would fetch and return the user
const useUser = () => ({ user: null, loading: false })

export default function Page() {
  const { user, loading } = useUser()
  const router = useRouter()

  useEffect(() => {
    // disable the linting on the next line - This is the cleanest solution
    // eslint-disable-next-line no-floating-promises
    router.push('/login')

    // void the Promise returned by router.push
    if (!(user || loading)) {
      void router.push('/login')
    }
    // or use an async function, await the Promise, then void the function call
    async function handleRouteChange() {
      if (!(user || loading)) {
        await router.push('/login')
      }
    }
    void handleRouteChange()
  }, [user, loading])

  return <p>Redirecting...</p>
}
```

----------------------------------------

TITLE: Implement POST Route Handler with Error Handling
DESCRIPTION: Shows how to create a `POST` Route Handler in Next.js, incorporating `try/catch` blocks to manage potential exceptions during operations and return appropriate HTTP status codes based on success or failure.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import { submit } from '@/lib/submit'

export function POST(request: Request) {
  try {
    await submit(request)
    return new Response(null, { status: 204 })
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected error'

    return new Response(message, { status: 500 })
  }
}
```

LANGUAGE: js
CODE:
```
import { submit } from '@/lib/submit'

export function POST(request) {
  try {
    await submit(request)
    return new Response(null, { status: 204 })
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected error'

    return new Response(message, { status: 500 })
  }
}
```

----------------------------------------

TITLE: Handle Filtering, Pagination, and Sorting with searchParams in Next.js Server Components
DESCRIPTION: This snippet demonstrates how to access and use searchParams in a Next.js Server Component to handle URL query parameters for filtering, pagination, or sorting. It destructures 'page', 'sort', and 'query' from the searchParams promise, which is available as a prop to the page component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
export default async function Page({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const { page = '1', sort = 'asc', query = '' } = await searchParams

  return (
    <div>
      <h1>Product Listing</h1>
      <p>Search query: {query}</p>
      <p>Current page: {page}</p>
      <p>Sort order: {sort}</p>
    </div>
  )
}
```

LANGUAGE: javascript
CODE:
```
export default async function Page({ searchParams }) {
  const { page = '1', sort = 'asc', query = '' } = await searchParams

  return (
    <div>
      <h1>Product Listing</h1>
      <p>Search query: {query}</p>
      <p>Current page: {page}</p>
      <p>Sort order: {sort}</p>
    </div>
  )
}
```

----------------------------------------

TITLE: Migrating Synchronous Page Components to use `use` Hook (TSX)
DESCRIPTION: This snippet illustrates the change in synchronous page components where `params` and `searchParams` are now Promise-wrapped and must be accessed using the `use` React hook instead of direct destructuring. This ensures proper handling of asynchronous data in server components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
'use client'

// Before
type Params = { slug: string }
type SearchParams = { [key: string]: string | string[] | undefined }

export default function Page({
  params,
  searchParams,
}: {
  params: Params
  searchParams: SearchParams
}) {
  const { slug } = params
  const { query } = searchParams
}
```

LANGUAGE: tsx
CODE:
```
import { use } from 'react'

// After
type Params = Promise<{ slug: string }>
type SearchParams = Promise<{ [key: string]: string | string[] | undefined }>

export default function Page(props: {
  params: Params
  searchParams: SearchParams
}) {
  const params = use(props.params)
  const searchParams = use(props.searchParams)
  const slug = params.slug
  const query = searchParams.query
}
```

----------------------------------------

TITLE: Bootstrapping Next.js Blog Starter with npx
DESCRIPTION: This command uses `npx` to initialize a new Next.js application based on the `blog-starter` example. It creates a new directory named `blog-starter-app` containing the project files, setting up the basic structure for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example blog-starter blog-starter-app
```

----------------------------------------

TITLE: Create a Basic GET Route Handler
DESCRIPTION: Demonstrates how to create a simple GET request handler that returns a JSON response using the Web Response API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
export async function GET() {
  return Response.json({ message: 'Hello World' })
}
```

LANGUAGE: js
CODE:
```
export async function GET() {
  return Response.json({ message: 'Hello World' })
}
```

----------------------------------------

TITLE: Migrating Next.js Headers API to Async (TypeScript)
DESCRIPTION: This snippet illustrates the recommended asynchronous pattern for using the `headers` API in Next.js 15. The `headers()` function now returns a Promise, requiring `await` for proper access.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
import { headers } from 'next/headers'

// Before
const headersList = headers()
const userAgent = headersList.get('user-agent')

// After
const headersList = await headers()
const userAgent = headersList.get('user-agent')
```

----------------------------------------

TITLE: Loading Third-Party Scripts with next/script in Next.js (JSX)
DESCRIPTION: This snippet demonstrates how to correctly load a third-party script using the `next/script` component within a Next.js page. It ensures optimal performance and compatibility with React Suspense and server-side rendering, replacing the problematic direct use of `<script>` tags in `next/head`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-script-tags-in-head-component.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function Dashboard() {
  return (
    <>
      <Script src="https://example.com/script.js" />
    </>
  )
}
```

----------------------------------------

TITLE: Running Next.js in Development Mode with npm
DESCRIPTION: These commands first install all project dependencies using `npm install`, then start the Next.js development server with `npm run dev`. This allows you to view and test the application locally, typically accessible at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Configure viewport scaling and width in Next.js
DESCRIPTION: Sets properties like `width`, `initialScale`, `maximumScale`, and `userScalable` for the viewport. These properties control the initial zoom level, maximum zoom, and whether users can zoom in or out, ensuring a consistent viewing experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-viewport.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import type { Viewport } from 'next'

export const viewport: Viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 1,
  userScalable: false,
  // Also supported but less commonly used
  // interactiveWidget: 'resizes-visual',
}
```

LANGUAGE: jsx
CODE:
```
export const viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 1,
  userScalable: false,
  // Also supported but less commonly used
  // interactiveWidget: 'resizes-visual',
}
```

LANGUAGE: html
CODE:
```
<meta
  name="viewport"
  content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
/>
```

----------------------------------------

TITLE: Apply Global Font from Utility File in Next.js App Router Layout
DESCRIPTION: Demonstrates importing a globally intended font (e.g., `inter`) from a utility file (`./fonts`) and applying its `className` to the `<html>` tag in the Next.js App Router `layout.tsx/js` for application-wide styling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_23

LANGUAGE: tsx
CODE:
```
import { inter } from './fonts'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={inter.className}>
      <body>
        <div>{children}</div>
      </body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { inter } from './fonts'

export default function Layout({ children }) {
  return (
    <html lang="en" className={inter.className}>
      <body>
        <div>{children}</div>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Next.js `revalidate` Option Values and Behavior
DESCRIPTION: Detailed explanation of the possible values for the `revalidate` export in Next.js layouts, pages, and routes, controlling data revalidation frequency. Includes important notes on static analysis, runtime environments, and revalidation frequency rules.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
revalidate:
  false (default):
    Description: Caches any fetch requests that set their 'cache' option to 'force-cache' or are discovered before a Dynamic API is used. Semantically equivalent to 'revalidate: Infinity', meaning cached indefinitely. Individual 'fetch' requests can still use 'cache: no-store' or 'revalidate: 0' to avoid caching.
  0:
    Description: Ensures a layout or page is always dynamically rendered, even if no Dynamic APIs or uncached data fetches are discovered. Changes the default of 'fetch' requests without a 'cache' option to 'no-store'.
  number (in seconds):
    Description: Sets the default revalidation frequency of a layout or page to 'n' seconds.
  Good to know:
    - The revalidate value needs to be statically analyzable (e.g., 'revalidate = 600' is valid, but 'revalidate = 60 * 10' is not).
    - The revalidate value is not available when using 'runtime = 'edge''.
    - In Development, Pages are always rendered on-demand and are never cached.
  Revalidation Frequency:
    - The lowest 'revalidate' across each layout and page of a single route will determine the revalidation frequency of the entire route.
    - Individual 'fetch' requests can set a lower 'revalidate' than the route's default to increase the revalidation frequency of the entire route.
```

----------------------------------------

TITLE: Loading Google Analytics for All Routes with `@next/third-parties`
DESCRIPTION: This snippet demonstrates how to integrate Google Analytics 4 (GA4) across all routes of a Next.js application by including the `GoogleAnalytics` component from `@next/third-parties/google` in the root layout. It requires passing your GA4 measurement ID (`gaId`) to the component. By default, the script fetches after hydration, optimizing performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-script-for-ga.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
      <GoogleAnalytics gaId="G-XYZ" />
    </html>
  )
}
```

----------------------------------------

TITLE: Install Next.js automatically with create-next-app
DESCRIPTION: Use the `create-next-app` CLI to quickly scaffold a new Next.js project with interactive prompts for configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest
```

LANGUAGE: txt
CODE:
```
What is your project named? my-app
Would you like to use TypeScript? No / Yes
Would you like to use ESLint? No / Yes
Would you like to use Tailwind CSS? No / Yes
Would you like your code inside a \`src/\` directory? No / Yes
Would you like to use App Router? (recommended) No / Yes
Would you like to use Turbopack for \`next dev\`?  No / Yes
Would you like to customize the import alias (\`@/*\` by default)? No / Yes
What import alias would you like configured? @/*
```

----------------------------------------

TITLE: Set Cookies via `Set-Cookie` Header in Next.js Response
DESCRIPTION: This example illustrates how to set cookies by including the `Set-Cookie` HTTP header in the response object. This method is useful for sending cookies back to the client as part of an API response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request: Request) {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { 'Set-Cookie': `token=${token.value}` },
  })
}
```

LANGUAGE: javascript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request) {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { 'Set-Cookie': `token=${token.value}` },
  })
}
```

----------------------------------------

TITLE: Installing Dependencies and Starting Development Server with Yarn
DESCRIPTION: This snippet provides an alternative method to install project dependencies and start the development server using Yarn. It serves the same purpose as the npm commands.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
yarn
yarn dev
```

----------------------------------------

TITLE: Navigating Back in History with router.back in Next.js
DESCRIPTION: Demonstrates using `router.back()` to programmatically navigate back in the browser's history, mimicking a browser's back button click. This is implemented within a functional component on a button click.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/use-router.mdx#_snippet_15

LANGUAGE: JSX
CODE:
```
import { useRouter } from 'next/router'

export default function Page() {
  const router = useRouter()

  return (
    <button type="button" onClick={() => router.back()}>
      Click here to go back
    </button>
  )
}
```

----------------------------------------

TITLE: Demonstrating Incorrect Async Context Usage with Next.js Cookies (JSX)
DESCRIPTION: This snippet illustrates an incorrect way to use `cookies()` from `next/headers` within a `setTimeout` callback. Calling `cookies().getAll()` inside `setTimeout` causes it to be executed outside the original async context, leading to a `DynamicServerError` during static page generation in Next.js. This highlights the importance of managing execution contexts correctly when dealing with dynamic functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/dynamic-server-error.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
import { cookies } from 'next/headers'

async function getCookieData() {
  return new Promise((resolve) =>
    setTimeout(() => {
      // cookies will be called outside of the async context, causing a build-time error
      resolve(cookies().getAll())
    }, 1000)
  )
}

export default async function Page() {
  const cookieData = await getCookieData()
  return <div>Hello World</div>
}
```

----------------------------------------

TITLE: Handle Data Fetching Errors in Next.js Server Components
DESCRIPTION: This server component demonstrates how to handle errors when fetching data. If the network response is not OK, it returns a simple error message, preventing further rendering of the component's main content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-error-handling.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const res = await fetch(`https://...`)
  const data = await res.json()

  if (!res.ok) {
    return 'There was an error.'
  }

  return '...'
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const res = await fetch(`https://...`)
  const data = await res.json()

  if (!res.ok) {
    return 'There was an error.'
  }

  return '...'
}
```

----------------------------------------

TITLE: Set Request and Response Headers in Next.js Middleware
DESCRIPTION: This snippet illustrates how to manipulate HTTP headers within Next.js middleware. It shows how to clone existing request headers and set new ones using the `Headers` API, and how to apply these new headers to the `NextResponse.next()` object. Additionally, it demonstrates setting custom response headers directly on the `NextResponse` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_18

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Clone the request headers and set a new header `x-hello-from-middleware1`
  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-hello-from-middleware1', 'hello')

  // You can also set request headers in NextResponse.next
  const response = NextResponse.next({
    request: {
      // New request headers
      headers: requestHeaders,
    },
  })

  // Set a new response header `x-hello-from-middleware2`
  response.headers.set('x-hello-from-middleware2', 'hello')
  return response
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  // Clone the request headers and set a new header `x-hello-from-middleware1`
  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-hello-from-middleware1', 'hello')

  // You can also set request headers in NextResponse.next
  const response = NextResponse.next({
    request: {
      // New request headers
      headers: requestHeaders,
    },
  })

  // Set a new response header `x-hello-from-middleware2`
  response.headers.set('x-hello-from-middleware2', 'hello')
  return response
}
```

----------------------------------------

TITLE: Redirect User After Data Mutation in Next.js Server Action
DESCRIPTION: This snippet demonstrates how to use the `redirect` function within a Next.js Server Action to navigate the user to a new URL after a successful data mutation, such as creating a post. It also shows how to use `revalidatePath` to update the cache for related data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id: string) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}
```

LANGUAGE: javascript
CODE:
```
'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}
```

----------------------------------------

TITLE: Configure Next.js Twitter Card Metadata (Summary Large Image)
DESCRIPTION: This snippet demonstrates how to configure Next.js `metadata` to generate Twitter Card meta tags for a 'summary_large_image' card type. It includes properties like title, description, site ID, creator, and an absolute URL for the image. The corresponding HTML output shows the generated meta tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_20

LANGUAGE: jsx
CODE:
```
export const metadata = {
  twitter: {
    card: 'summary_large_image',
    title: 'Next.js',
    description: 'The React Framework for the Web',
    siteId: '1467726470533754880',
    creator: '@nextjs',
    creatorId: '1467726470533754880',
    images: ['https://nextjs.org/og.png'], // Must be an absolute URL
  },
}
```

LANGUAGE: html
CODE:
```
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site:id" content="1467726470533754880" />
<meta name="twitter:creator" content="@nextjs" />
<meta name="twitter:creator:id" content="1467726470533754880" />
<meta name="twitter:title" content="Next.js" />
<meta name="twitter:description" content="The React Framework for the Web" />
<meta name="twitter:image" content="https://nextjs.org/og.png" />
```

----------------------------------------

TITLE: Next.js App Router: Create Client-Only Entrypoint Component
DESCRIPTION: Defines a Client Component (`client.tsx` or `client.js`) that uses the `'use client'` directive. It dynamically imports the main application component (`../../App`) with `ssr: false` to ensure it runs exclusively on the client-side, making it suitable for embedding a Create React App.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
'use client'

import dynamic from 'next/dynamic'

const App = dynamic(() => import('../../App'), { ssr: false })

export function ClientOnly() {
  return <App />
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import dynamic from 'next/dynamic'

const App = dynamic(() => import('../../App'), { ssr: false })

export function ClientOnly() {
  return <App />
}
```

----------------------------------------

TITLE: Secure Next.js Server Actions with Role-Based Authorization
DESCRIPTION: Demonstrates how to implement authorization checks within Next.js Server Actions. Before proceeding with a mutation, the user's session is verified, and their role is checked to ensure they have the necessary permissions, treating Server Actions as public-facing API endpoints.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_30

LANGUAGE: ts
CODE:
```
'use server'
import { verifySession } from '@/app/lib/dal'

export async function serverAction(formData: FormData) {
  const session = await verifySession()
  const userRole = session?.user?.role

  // Return early if user is not authorized to perform the action
  if (userRole !== 'admin') {
    return null
  }

  // Proceed with the action for authorized users
}
```

LANGUAGE: js
CODE:
```
'use server'
import { verifySession } from '@/app/lib/dal'

export async function serverAction() {
  const session = await verifySession()
  const userRole = session.user.role

  // Return early if user is not authorized to perform the action
  if (userRole !== 'admin') {
    return null
  }

  // Proceed with the action for authorized users
}
```

----------------------------------------

TITLE: Create a Submit Button with React useFormStatus Hook
DESCRIPTION: This snippet shows how to create a reusable `SubmitButton` component that leverages the `useFormStatus` hook. This hook provides access to the pending state of the nearest parent form, allowing the button to be disabled automatically during form submission. This approach requires nesting the button component inside the form.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'

import { useFormStatus } from 'react-dom'

export function SubmitButton() {
  const { pending } = useFormStatus()

  return (
    <button disabled={pending} type="submit">
      Sign Up
    </button>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useFormStatus } from 'react-dom'

export function SubmitButton() {
  const { pending } = useFormStatus()

  return (
    <button disabled={pending} type="submit">
      Sign Up
    </button>
  )
}
```

----------------------------------------

TITLE: Disable Server-Side Rendering for Client Components
DESCRIPTION: Illustrates how to prevent a Client Component from being pre-rendered on the server by setting the `ssr` option to `false` in `next/dynamic`. This ensures the component is loaded only on the client side, which is useful for components that rely on browser-specific APIs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
const ComponentC = dynamic(() => import('../components/C'), { ssr: false })
```

----------------------------------------

TITLE: Configure Jest with next/jest
DESCRIPTION: Update your Jest configuration file to use `next/jest`. This transformer provides all necessary configurations for Jest to work seamlessly with Next.js, including setting up transforms, auto-mocking assets, and loading environment variables.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import type { Config } from 'jest'
import nextJest from 'next/jest.js'

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const config: Config = {
  coverageProvider: 'v8',
  testEnvironment: 'jsdom',
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
export default createJestConfig(config)
```

LANGUAGE: javascript
CODE:
```
const nextJest = require('next/jest')

/** @type {import('jest').Config} */
const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const config = {
  coverageProvider: 'v8',
  testEnvironment: 'jsdom',
  // Add more setup options before each test is run
  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(config)
```

----------------------------------------

TITLE: Set CORS Headers in Next.js Route Handler
DESCRIPTION: Illustrates how to set standard CORS headers (`Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, `Access-Control-Allow-Headers`) for a specific Route Handler in Next.js. It uses the `Response` object's headers property. Notes suggest using Middleware or `next.config.js` for broader application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_19

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {
  return new Response('Hello, Next.js!', {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}
```

LANGUAGE: js
CODE:
```
export async function GET(request) {
  return new Response('Hello, Next.js!', {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}
```

----------------------------------------

TITLE: Tainting an Object Reference with experimental_taintObjectReference
DESCRIPTION: Demonstrates how to use `experimental_taintObjectReference` to mark an entire object as sensitive, preventing it from being passed across the Server-Client boundary. The example shows tainting a `user` object returned from a database query with a descriptive message.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/taint.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { experimental_taintObjectReference } from 'react'

function getUserDetails(id: string): UserDetails {
  const user = await db.queryUserById(id)

  experimental_taintObjectReference(
    'Do not use the entire user info object. Instead, select only the fields you need.',
    user
  )

  return user
}
```

LANGUAGE: javascript
CODE:
```
import { experimental_taintObjectReference } from 'react'

function getUserDetails(id) {
  const user = await db.queryUserById(id)

  experimental_taintObjectReference(
    'Do not use the entire user info object. Instead, select only the fields you need.',
    user
  )

  return user
}
```

----------------------------------------

TITLE: Overwrite Metadata in Next.js Child Page
DESCRIPTION: Demonstrates how a child page (`app/blog/page.js`) can overwrite metadata defined in the parent layout. When `openGraph` is set, all its fields from the parent are replaced, even if some are omitted in the child.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_48

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Blog',
  openGraph: {
    title: 'Blog',
  },
}

// Output:
// <title>Blog</title>
// <meta property="og:title" content="Blog" />
```

----------------------------------------

TITLE: Implement Authentication with Next.js Middleware
DESCRIPTION: This snippet demonstrates how to use Next.js middleware to check if a user is authenticated. If the user is not authenticated, it returns a 401 Unauthorized JSON response. The middleware is configured to apply to specific API routes using `config.matcher`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_13

LANGUAGE: ts
CODE:
```
import { isAuthenticated } from '@lib/auth'

export const config = {
  matcher: '/api/:function*',
}

export function middleware(request: Request) {
  if (!isAuthenticated(request)) {
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    )
  }
}
```

LANGUAGE: js
CODE:
```
import { isAuthenticated } from '@lib/auth'

export const config = {
  matcher: '/api/:function*',
}

export function middleware(request) {
  if (!isAuthenticated(request)) {
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    )
  }
}
```

----------------------------------------

TITLE: Configure Next.js for Incremental Partial Prerendering
DESCRIPTION: This configuration enables incremental Partial Prerendering (PPR) in Next.js 15 by setting the `ppr` option to `incremental` within the `experimental` object in `next.config.js`. This is a crucial step for opting into PPR.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/ppr.mdx#_snippet_0

LANGUAGE: JavaScript
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    ppr: 'incremental',
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Configure Module Path Aliases with Base URL
DESCRIPTION: In addition to `baseUrl`, the `paths` option can be used within `compilerOptions` in `tsconfig.json` or `jsconfig.json` to create specific module aliases. This configuration maps `@/styles/*` and `@/components/*` to directories relative to the `baseUrl` location, further simplifying import paths.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_13

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": "src/",
    "paths": {
      "@/styles/*": ["styles/*"],
      "@/components/*": ["components/*"]
    }
  }
}
```

----------------------------------------

TITLE: Implement Next.js Middleware for URL Rewrites
DESCRIPTION: This Middleware example demonstrates how to rewrite a /dashboard path to either /auth/dashboard or /public/dashboard based on the presence of an authentication token in cookies. This prevents direct access to authenticated content and ensures users are redirected to the appropriate view.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_26

LANGUAGE: ts
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request: Request) {
  const nextUrl = request.nextUrl
  if (nextUrl.pathname === '/dashboard') {
    if (request.cookies.authToken) {
      return NextResponse.rewrite(new URL('/auth/dashboard', request.url))
    } else {
      return NextResponse.rewrite(new URL('/public/dashboard', request.url))
    }
  }
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  const nextUrl = request.nextUrl
  if (nextUrl.pathname === '/dashboard') {
    if (request.cookies.authToken) {
      return NextResponse.rewrite(new URL('/auth/dashboard', request.url))
    } else {
      return NextResponse.rewrite(new URL('/public/dashboard', request.url))
    }
  }
}
```

----------------------------------------

TITLE: Set Fetch Revalidation Period with `next.revalidate`
DESCRIPTION: Demonstrates how to use the `next.revalidate` option within a `fetch` request to specify a revalidation period in seconds. This mechanism revalidates the Data Cache and subsequently the Full Route Cache, ensuring fresh data and server-side re-rendering of components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_20

LANGUAGE: jsx
CODE:
```
fetch(`https://...`, { next: { revalidate: 3600 } })
```

----------------------------------------

TITLE: Calling revalidatePath to invalidate a route cache in Next.js
DESCRIPTION: `revalidatePath` is used to revalidate a specific route's cache following an event. It should be called within a Route Handler or Server Action after data mutations that affect the content of that route. This example shows revalidating the '/profile' route after a user update.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-caching-and-revalidating.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { revalidatePath } from 'next/cache'

export async function updateUser(id: string) {
  // Mutate data
  revalidatePath('/profile')
}
```

LANGUAGE: jsx
CODE:
```
import { revalidatePath } from 'next/cache'

export async function updateUser(id) {
  // Mutate data
  revalidatePath('/profile')
}
```

----------------------------------------

TITLE: Initializing OpenTelemetry NodeSDK for Tracing (TypeScript)
DESCRIPTION: This TypeScript code initializes the OpenTelemetry `NodeSDK` for tracing. It configures a `Resource` with a service name ('next-app') and sets up a `SimpleSpanProcessor` that exports traces using `OTLPTraceExporter` over HTTP. This setup is crucial for sending telemetry data from the Next.js application running in a Node.js environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'
import { Resource } from '@opentelemetry/resources'
import { NodeSDK } from '@opentelemetry/sdk-node'
import { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'
import { ATTR_SERVICE_NAME } from '@opentelemetry/semantic-conventions'

const sdk = new NodeSDK({
  resource: new Resource({
    [ATTR_SERVICE_NAME]: 'next-app',
  }),
  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),
})
sdk.start()
```

----------------------------------------

TITLE: Initializing OpenTelemetry NodeSDK for Tracing (JavaScript)
DESCRIPTION: This JavaScript code initializes the OpenTelemetry `NodeSDK` for tracing. It configures a `Resource` with a service name ('next-app') and sets up a `SimpleSpanProcessor` that exports traces using `OTLPTraceExporter` over HTTP. This setup is crucial for sending telemetry data from the Next.js application running in a Node.js environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_7

LANGUAGE: javascript
CODE:
```
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'
import { Resource } from '@opentelemetry/resources'
import { NodeSDK } from '@opentelemetry/sdk-node'
import { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'
import { ATTR_SERVICE_NAME } from '@opentelemetry/semantic-conventions'

const sdk = new NodeSDK({
  resource: new Resource({
    [ATTR_SERVICE_NAME]: 'next-app',
  }),
  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),
})
sdk.start()
```

----------------------------------------

TITLE: Imperative Client-Side Navigation with Next.js useRouter
DESCRIPTION: This example shows how to perform imperative client-side navigations using the `useRouter` hook from `next/router`. It demonstrates programmatically pushing a new route (`/about`) when a button is clicked, offering more control over navigation flow than the `Link` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { useRouter } from 'next/router'

export default function ReadMore() {
  const router = useRouter()

  return (
    <button onClick={() => router.push('/about')}>
      Click here to read more
    </button>
  )
}
```

----------------------------------------

TITLE: Transform and Aggregate External Data in Next.js Route Handler
DESCRIPTION: This example demonstrates how a Next.js Route Handler can fetch data from an external API, transform it, and return a processed payload. It specifically shows fetching weather data based on latitude and longitude from the request body, parsing it, and handling potential network or parsing errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_7

LANGUAGE: ts
CODE:
```
import { parseWeatherData } from '@/lib/weather'

export async function POST(request: Request) {
  const body = await request.json()
  const searchParams = new URLSearchParams({ lat: body.lat, lng: body.lng })

  try {
    const weatherResponse = await fetch(`${weatherEndpoint}?${searchParams}`)

    if (!weatherResponse.ok) {
      /* handle error */
    }

    const weatherData = await weatherResponse.text()
    const payload = parseWeatherData.asJSON(weatherData)

    return new Response(payload, { status: 200 })
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected exception'

    return new Response(message, { status: 500 })
  }
}
```

LANGUAGE: js
CODE:
```
import { parseWeatherData } from '@/lib/weather'

export async function POST(request) {
  const body = await request.json()
  const searchParams = new URLSearchParams({ lat: body.lat, lng: body.lng })

  try {
    const weatherResponse = await fetch(`${weatherEndpoint}?${searchParams}`)

    if (!weatherResponse.ok) {
      /* handle error */
    }

    const weatherData = await weatherResponse.text()
    const payload = parseWeatherData.asJSON(weatherData)

    return new Response(payload, { status: 200 })
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected exception'

    return new Response(message, { status: 500 })
  }
}
```

----------------------------------------

TITLE: Dynamically Import Named Export in Next.js App Router
DESCRIPTION: Shows how to dynamically import a specific named export from a module using `next/dynamic` in a Next.js App Router page. The example includes both the definition of the named export component and its dynamic import using the `.then()` method on the `import()` Promise.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_5

LANGUAGE: JSX
CODE:
```
'use client'

export function Hello() {
  return <p>Hello!</p>
}
```

LANGUAGE: JSX
CODE:
```
import dynamic from 'next/dynamic'

const ClientComponent = dynamic(() =>
  import('../components/hello').then((mod) => mod.Hello)
)
```

----------------------------------------

TITLE: Implementing Next.js OpenTelemetry Tracer Class
DESCRIPTION: This class, `NextTracerImpl`, provides the core functionality for Next.js tracing. It wraps OpenTelemetry's `trace` and `context` APIs, offering methods to retrieve the tracer instance, current context, trace propagation data, and the active span. The `trace` method handles span creation, context management, performance measurement, and error handling for both synchronous and asynchronous operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/nextjs-tracer/output.md#_snippet_40

LANGUAGE: JavaScript
CODE:
```
class NextTracerImpl {
    getTracerInstance() {
        return trace.getTracer('next.js', '0.0.1');
    }
    getContext() {
        return context;
    }
    getTracePropagationData() {
        const activeContext = context.active();
        const entries = [];
        propagation.inject(activeContext, entries, clientTraceDataSetter);
        return entries;
    }
    getActiveScopeSpan() {
        return trace.getSpan(context == null ? void 0 : context.active());
    }
    withPropagatedContext(carrier, fn, getter) {
        const activeContext = context.active();
        if (trace.getSpanContext(activeContext)) {
            return fn();
        }
        const remoteContext = propagation.extract(activeContext, carrier, getter);
        return context.with(remoteContext, fn);
    }
    trace(...args) {
        var _trace_getSpanContext;
        const [type, fnOrOptions, fnOrEmpty] = args;
        const { fn, options } = typeof fnOrOptions === 'function' ? {
            fn: fnOrOptions,
            options: {}
        } : {
            fn: fnOrEmpty,
            options: {
                ...fnOrOptions
            }
        };
        const spanName = options.spanName ?? type;
        if (!NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== '1' || options.hideSpan) {
            return fn();
        }
        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());
        let isRootSpan = false;
        if (!spanContext) {
            spanContext = (context == null ? void 0 : context.active()) ?? ROOT_CONTEXT;
            isRootSpan = true;
        } else if ((_trace_getSpanContext = trace.getSpanContext(spanContext)) == null ? void 0 : _trace_getSpanContext.isRemote) {
            isRootSpan = true;
        }
        const spanId = getSpanId();
        options.attributes = {
            'next.span_name': spanName,
            'next.span_type': type,
            ...options.attributes
        };
        return context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{
                const startTime = 'performance' in globalThis && 'measure' in performance ? globalThis.performance.now() : undefined;
                const onCleanup = ()=>{
                    rootSpanAttributesStore.delete(spanId);
                    if (startTime && process.env.NEXT_OTEL_PERFORMANCE_PREFIX && LogSpanAllowList.includes(type || '')) {
                        performance.measure(`${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-${(type.split('.').pop() || '').replace(/[A-Z]/g, (match)=>'-' + match.toLowerCase())}`, {
                            start: startTime,
                            end: performance.now()
                        });
                    }
                };
                if (isRootSpan) {
                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));
                }
                try {
                    if (fn.length > 1) {
                        return fn(span, (err)=>closeSpanWithError(span, err));
                    }
                    const result = fn(span);
                    if (isPromise(result)) {
                        return result.then((res)=>{
                            span.end();
                            return res;
                        }).catch((err)=>{
                            closeSpanWithError(span, err);
                            throw err;
                        }).finally(onCleanup);
                    } else {
                        span.end();
                        onCleanup();
                    }
                    return result;
                } catch (err) {
                    closeSpanWithError(span, err);
                    onCleanup();
                    throw err;
                }
            }));
    }
}
```

----------------------------------------

TITLE: Handle Not Found Pages in Next.js Route Segments (TS/JS)
DESCRIPTION: This snippet demonstrates how to implement a 404 'Not Found' page in a Next.js route segment. It uses the `notFound()` function to trigger the 404 UI when a requested resource, such as a blog post, is not found. The `getPostBySlug` function is used as an example dependency to fetch data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/10-error-handling.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { getPostBySlug } from '@/lib/posts'

export default async function Page({ params }: { params: { slug: string } }) {
  const { slug } = await params
  const post = getPostBySlug(slug)

  if (!post) {
    notFound()
  }

  return <div>{post.title}</div>
}
```

LANGUAGE: jsx
CODE:
```
import { getPostBySlug } from '@/lib/posts'

export default async function Page({ params }) {
  const { slug } = await params
  const post = getPostBySlug(slug)

  if (!post) {
    notFound()
  }

  return <div>{post.title}</div>
}
```

----------------------------------------

TITLE: Define Next.js Fonts in a Centralized File
DESCRIPTION: This snippet demonstrates how to create a `fonts.ts` or `fonts.js` file to centralize the definition of Google Fonts (Inter, Lora, Source_Sans_3) and local fonts (GreatVibes). It shows how to define variable fonts and specific weights for non-variable fonts, then export them for reuse across the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_40

LANGUAGE: ts
CODE:
```
import { Inter, Lora, Source_Sans_3 } from 'next/font/google'
import localFont from 'next/font/local'

// define your variable fonts
const inter = Inter()
const lora = Lora()
// define 2 weights of a non-variable font
const sourceCodePro400 = Source_Sans_3({ weight: '400' })
const sourceCodePro700 = Source_Sans_3({ weight: '700' })
// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder
const greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })

export { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }
```

LANGUAGE: js
CODE:
```
import { Inter, Lora, Source_Sans_3 } from 'next/font/google'
import localFont from 'next/font/local'

// define your variable fonts
const inter = Inter()
const lora = Lora()
// define 2 weights of a non-variable font
const sourceCodePro400 = Source_Sans_3({ weight: '400' })
const sourceCodePro700 = Source_Sans_3({ weight: '700' })
// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder
const greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })

export { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }
```

----------------------------------------

TITLE: Integrating Client Component for Pathname into Next.js Layout
DESCRIPTION: Shows how a Client Component (like the `Breadcrumbs` component accessing `usePathname`) can be rendered within a Next.js Layout. This allows layouts to display dynamic navigation elements based on the current pathname, even though the layout itself doesn't rerender.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Breadcrumbs } from '@/app/ui/Breadcrumbs'

export default function Layout({ children }) {
  return (
    <>
      <Breadcrumbs />
      <main>{children}</main>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Breadcrumbs } from '@/app/ui/Breadcrumbs'

export default function Layout({ children }) {
  return (
    <>
      <Breadcrumbs />
      <main>{children}</main>
    </>
  )
}
```

----------------------------------------

TITLE: Next.js Layouts for Shared UI (App Router)
DESCRIPTION: Details how to use layouts in the App Router to share UI across pages and enable partial rendering during navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
File Convention: app/layout.js
  Purpose: Share UI across pages
  Feature: Partial rendering on navigation
```

----------------------------------------

TITLE: Utilize Wrapped Client Components in Next.js Server Components
DESCRIPTION: This example shows how the previously wrapped third-party component, now functioning as a Client Component, can be seamlessly imported and rendered directly within a Next.js Server Component. This pattern effectively resolves compatibility issues, enabling the use of client-only features in a server-rendered context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import Carousel from './carousel'

export default function Page() {
  return (
    <div>
      <p>View pictures</p>
      {/*  Works, since Carousel is a Client Component */}
      <Carousel />
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Carousel from './carousel'

export default function Page() {
  return (
    <div>
      <p>View pictures</p>
      {/*  Works, since Carousel is a Client Component */}
      <Carousel />
    </div>
  )
}
```

----------------------------------------

TITLE: Read Dynamic Route Parameters in Client Components
DESCRIPTION: This snippet demonstrates how to read dynamic route parameters (`params`) within a Next.js Client Component. Since Client Components cannot be `async`, React's `use` function is employed to unwrap the `params` promise. The example shows how to extract a `slug` parameter for use within the client-side logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_18

LANGUAGE: tsx
CODE:
```
'use client'

import { use } from 'react'

export default function Page({
  params,
}: {
  params: Promise<{ slug: string }>
}) {
  const { slug } = use(params)
}
```

LANGUAGE: js
CODE:
```
'use client'

import { use } from 'react'

export default function Page({ params }) {
  const { slug } = use(params)
}
```

----------------------------------------

TITLE: Creating a Web App Manifest in Next.js
DESCRIPTION: This snippet demonstrates how to create a web app manifest file (manifest.ts or manifest.js) in Next.js using the App Router. The manifest defines essential PWA properties such as name, short name, description, start URL, display mode, theme colors, and icons, enabling users to install the PWA to their home screen and providing a native app-like experience.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/progressive-web-apps.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { MetadataRoute } from 'next'

export default function manifest(): MetadataRoute.Manifest {
  return {
    name: 'Next.js PWA',
    short_name: 'NextPWA',
    description: 'A Progressive Web App built with Next.js',
    start_url: '/',
    display: 'standalone',
    background_color: '#ffffff',
    theme_color: '#000000',
    icons: [
      {
        src: '/icon-192x192.png',
        sizes: '192x192',
        type: 'image/png',
      },
      {
        src: '/icon-512x512.png',
        sizes: '512x512',
        type: 'image/png',
      }
    ]
  }
}
```

LANGUAGE: JavaScript
CODE:
```
export default function manifest() {
  return {
    name: 'Next.js PWA',
    short_name: 'NextPWA',
    description: 'A Progressive Web App built with Next.js',
    start_url: '/',
    display: 'standalone',
    background_color: '#ffffff',
    theme_color: '#000000',
    icons: [
      {
        src: '/icon-192x192.png',
        sizes: '192x192',
        type: 'image/png',
      },
      {
        src: '/icon-512x512.png',
        sizes: '512x512',
        type: 'image/png',
      }
    ]
  }
}
```

----------------------------------------

TITLE: Send Next.js Web Vitals to External Analytics Endpoint in JavaScript
DESCRIPTION: This snippet demonstrates sending Web Vitals data to an external URL using `useReportWebVitals`. It prioritizes `navigator.sendBeacon` for background transmission, falling back to `fetch` with `keepalive` for robust data delivery.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/analytics.mdx#_snippet_4

LANGUAGE: js
CODE:
```
useReportWebVitals((metric) => {
  const body = JSON.stringify(metric)
  const url = 'https://example.com/analytics'

  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.
  if (navigator.sendBeacon) {
    navigator.sendBeacon(url, body)
  } else {
    fetch(url, { body, method: 'POST', keepalive: true })
  }
})
```

----------------------------------------

TITLE: Generate Static Params for Dynamic Routes in Next.js App Directory
DESCRIPTION: Illustrates the usage of `generateStaticParams` in the Next.js `app` directory, which replaces `getStaticPaths`. This function has a simplified API for returning route parameters and can be used within layouts, demonstrating data fetching and component rendering for dynamic routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_23

LANGUAGE: JSX
CODE:
```
// `app` directory
import PostLayout from '@/components/post-layout'

export async function generateStaticParams() {
  return [{ id: '1' }, { id: '2' }]
}

async function getPost(params) {
  const res = await fetch(`https://.../posts/${(await params).id}`)
  const post = await res.json()

  return post
}

export default async function Post({ params }) {
  const post = await getPost(params)

  return <PostLayout post={post} />
}
```

----------------------------------------

TITLE: Pass Server Functions as props to Client Components (TypeScript/JavaScript)
DESCRIPTION: Illustrates how a Server Function can be passed as a prop from a Server Component to a Client Component. The Client Component then uses this prop (e.g., updateItemAction) as the action for a form, allowing server-side logic to be triggered from the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'

export default function ClientComponent({
  updateItemAction,
}: {
  updateItemAction: (formData: FormData) => void
}) {
  return <form action={updateItemAction}>{/* ... */}</form>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

export default function ClientComponent({ updateItemAction }) {
  return <form action={updateItemAction}>{/* ... */}</form>
}
```

----------------------------------------

TITLE: Next.js Local Build and Start for Production Testing
DESCRIPTION: Before deploying to production, run `next build` to catch build errors and `next start` to measure application performance in a production-like environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_28

LANGUAGE: APIDOC
CODE:
```
Next.js Production Testing:
  Commands:
    - `next build`: Build application locally, catch build errors.
    - `next start`: Run application in production-like environment for performance measurement.
```

----------------------------------------

TITLE: Generate Open Graph Images with ImageResponse in File-based Metadata
DESCRIPTION: Illustrates the usage of `ImageResponse` within a `opengraph-image.tsx` file to generate Open Graph images. This approach supports both build-time and dynamic generation, defining image metadata (alt text, size, content type) and the JSX element for the image content, reusing the exported size configuration for `ImageResponse` options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/image-response.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { ImageResponse } from 'next/og'

// Image metadata
export const alt = 'My site'
export const size = {
  width: 1200,
  height: 630,
}

export const contentType = 'image/png'

// Image generation
export default async function Image() {
  return new ImageResponse(
    (
      // ImageResponse JSX element
      <div
        style={{
          fontSize: 128,
          background: 'white',
          width: '100%',
          height: '100%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        My site
      </div>
    ),
    // ImageResponse options
    {
      // For convenience, we can re-use the exported opengraph-image
      // size config to also set the ImageResponse's width and height.
      ...size,
    }
  )
}
```

----------------------------------------

TITLE: Next.js Nested Route File Conventions
DESCRIPTION: Defines the file and folder naming conventions for creating nested routes in Next.js applications, where each folder represents a route segment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
`folder`: Route segment
`folder/folder`: Nested route segment
```

----------------------------------------

TITLE: Next.js `fetchCache` Option Values
DESCRIPTION: Detailed explanation of the possible string values for the `fetchCache` export in Next.js, which allows overriding default `fetch` caching behavior across a layout or page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_8

LANGUAGE: APIDOC
CODE:
```
fetchCache:
  'auto' (default):
    Description: The default option to cache 'fetch' requests before Dynamic APIs with their provided 'cache' option, and not cache 'fetch' requests after Dynamic APIs.
  'default-cache':
    Description: Allows any 'cache' option to be passed to 'fetch', but if no option is provided, sets the 'cache' option to 'force-cache'. This means 'fetch' requests after Dynamic APIs are also considered static.
  'only-cache':
    Description: Ensures all 'fetch' requests opt into caching by changing the default to 'cache: force-cache' if no option is provided, and causes an error if any 'fetch' requests use 'cache: no-store'.
  'force-cache':
    Description: Ensures all 'fetch' requests opt into caching by setting the 'cache' option of all 'fetch' requests to 'force-cache'.
  'default-no-store':
    Description: Allows any 'cache' option to be passed to 'fetch', but if no option is provided, sets the 'cache' option to 'no-store'. This means 'fetch' requests before Dynamic APIs are also considered dynamic.
  'only-no-store':
    Description: Ensures all 'fetch' requests opt out of caching by changing the default to 'cache: no-store' if no option is provided, and causes an error if any 'fetch' requests use 'cache: force-cache'.
  'force-no-store':
    Description: Ensures all 'fetch' requests opt out of caching by setting the 'cache' option of all 'fetch' requests to 'no-store'. This forces all 'fetch' requests to be re-fetched every request, even if they provide a 'force-cache' option.
```

----------------------------------------

TITLE: Correct createContext Usage in Next.js Client Component
DESCRIPTION: This snippet demonstrates the correct way to use `createContext` in Next.js by adding the `'use client'` directive at the top of the file, ensuring the component is treated as a Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/context-in-server-component.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'
import { createContext } from 'react'

const Context = createContext()
```

----------------------------------------

TITLE: Correct usage: Mark component as Client Component with 'use client'
DESCRIPTION: This code snippet demonstrates the correct way to use a React client hook like `useEffect` by explicitly marking the component as a Client Component. Adding `'use client'` at the top of the file allows the component to use client-side features without error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/react-client-hook-in-server-component.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useEffect } from 'react'

export default function Example() {
  useEffect(() => {
    console.log('in useEffect')
  })
  return <p>Hello world</p>
}
```

----------------------------------------

TITLE: TypeScript Type Definitions for Dynamic Route `params`
DESCRIPTION: This API documentation provides TypeScript type definitions for the `params` prop, tailored for different dynamic route segment configurations, including single, catch-all, optional catch-all, and multiple dynamic segments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/dynamic-routes.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Route: app/blog/[slug]/page.js
params Type Definition: { slug: string }

Route: app/shop/[...slug]/page.js
params Type Definition: { slug: string[] }

Route: app/shop/[[...slug]]/page.js
params Type Definition: { slug?: string[] }

Route: app/[categoryId]/[itemId]/page.js
params Type Definition: { categoryId: string, itemId: string }
```

----------------------------------------

TITLE: Running Next.js Development Server with Yarn
DESCRIPTION: These commands first install project dependencies using `yarn install` and then start the Next.js development server with `yarn dev`. This provides an alternative to npm for managing dependencies and running the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Tag Fetch Requests for On-Demand Revalidation
DESCRIPTION: Demonstrates how to assign cache tags to a fetched resource using `options.next.tags`. These tags enable on-demand revalidation of data using `revalidateTag`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/fetch.mdx#_snippet_3

LANGUAGE: ts
CODE:
```
fetch(`https://...`, { next: { tags: ['collection'] } })
```

----------------------------------------

TITLE: Submit Form with Next.js Server Action
DESCRIPTION: This code demonstrates how to create a client-side form that utilizes a Next.js Server Action for data mutations. The `action` prop of the `Form` component is directly assigned to a server-side function, `createPost`, which will handle the form submission.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/form.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
import Form from 'next/form'
import { createPost } from '@/posts/actions'

export default function Page() {
  return (
    <Form action={createPost}>
      <input name="title" />
      {/* ... */}
      <button type="submit">Create Post</button>
    </Form>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Form from 'next/form'
import { createPost } from '@/posts/actions'

export default function Page() {
  return (
    <Form action={createPost}>
      <input name="title" />
      {/* ... */}
      <button type="submit">Create Post</button>
    </Form>
  )
}
```

----------------------------------------

TITLE: Implementing URLPattern for Page Matching in Next.js Middleware
DESCRIPTION: This section illustrates the shift from `request.page` for page matching to using the web standard `URLPattern` API. The 'Before' snippet relies on `event.request.page.params`, while the 'After' snippet provides a custom `params` helper function that leverages `URLPattern` to extract route parameters, offering more accurate and standard-compliant matching.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest, NextFetchEvent } from 'next/server'

export function middleware(request: NextRequest, event: NextFetchEvent) {
  const { params } = event.request.page
  const { locale, slug } = params

  if (locale && slug) {
    const { search, protocol, host } = request.nextUrl
    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)
    return NextResponse.redirect(url)
  }
}
```

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

const PATTERNS = [
  [
    new URLPattern({ pathname: '/:locale/:slug' }),
    ({ pathname }) => pathname.groups,
  ],
]

const params = (url) => {
  const input = url.split('?')[0]
  let result = {}

  for (const [pattern, handler] of PATTERNS) {
    const patternResult = pattern.exec(input)
    if (patternResult !== null && 'pathname' in patternResult) {
      result = handler(patternResult)
      break
    }
  }
  return result
}

export function middleware(request: NextRequest) {
  const { locale, slug } = params(request.url)

  if (locale && slug) {
    const { search, protocol, host } = request.nextUrl
    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)
    return NextResponse.redirect(url)
  }
}
```

----------------------------------------

TITLE: Delay Next.js Client Component Time Access to Browser with useEffect
DESCRIPTION: If a fallback UI is not desired, move the time access logic into a `useEffect` hook within the Client Component. React does not execute effects during server rendering, ensuring that the time-dependent code only runs in the browser, thereby preventing server-client hydration mismatches.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time-client.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

export function RelativeTime({ timestamp }) {
  const now = Date.now()
  return (
    <span suppressHydrationWarning>{computeTimeAgo({ timestamp, now })}</span>
  )
}

export default function Article({ articleData }) {
  return (
    <article>
      <h1>...</h1>
      <RelativeTime timestamp={articleData.publishedAt} />
    </article>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useState, useEffect } from 'react'

export function RelativeTime({ timestamp }) {
  const [timeAgo, setTimeAgo] = useState('')
  useEffect(() => {
    // The effect won't run while rendering on the server
    const now = Date.now()
    setTimeAgo(computeTimeAgo({ timestamp, now }))
  }, [timestamp])
  return <span>{timeAgo}</span>
}

export default function Article({ articleData }) {
  return (
    <article>
      <h1>...</h1>
      <RelativeTime timestamp={articleData.publishedAt} />
    </article>
  )
}
```

----------------------------------------

TITLE: Referencing Local Images from Public Folder in Next.js
DESCRIPTION: Illustrates how to use local images stored in the `public` directory with the Next.js `<Image>` component. Images placed in the `public` folder can be referenced directly by their path from the base URL, and `width` and `height` properties are explicitly set for proper rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/12-images.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export default function Page() {
  return (
    <Image
      src="/profile.png"
      alt="Picture of the author"
      width={500}
      height={500}
    />
  )
}
```

----------------------------------------

TITLE: Dynamic Routing with Next.js Middleware
DESCRIPTION: This Next.js middleware example demonstrates how to dynamically route requests based on conditions, such as a feature flag. It uses `NextResponse.rewrite` to redirect a specific path if a feature is enabled, useful for scenarios like migrations or A/B testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/multi-zones.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export async function middleware(request) {
  const { pathname, search } = req.nextUrl;
  if (pathname === '/your-path' && myFeatureFlag.isEnabled()) {
    return NextResponse.rewrite(`${rewriteDomain}${pathname}${search});
  }
}
```

----------------------------------------

TITLE: Next.js: Configure Dynamic Rendering with `dynamic` Export
DESCRIPTION: The `dynamic` export constant allows developers to control the rendering strategy for Next.js layouts, pages, and routes, enabling a switch between fully static or fully dynamic behavior. This provides a flexible way to manage caching and rendering, serving as a migration path from `getServerSideProps` and `getStaticProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route-segment-config.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export const dynamic = 'auto'
// 'auto' | 'force-dynamic' | 'error' | 'force-static'
```

LANGUAGE: js
CODE:
```
export const dynamic = 'auto'
// 'auto' | 'force-dynamic' | 'error' | 'force-static'
```

----------------------------------------

TITLE: Set Session Cookie via Next.js API Route
DESCRIPTION: This snippet shows an API Route handler for setting a session cookie. It uses the `serialize` function from the 'cookie' package to create a secure, HTTP-only cookie with a one-week expiration, encrypting session data from the request body before setting it in the response header.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_20

LANGUAGE: TypeScript
CODE:
```
import { serialize } from 'cookie'
import type { NextApiRequest, NextApiResponse } from 'next'
import { encrypt } from '@/app/lib/session'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const sessionData = req.body
  const encryptedSessionData = encrypt(sessionData)

  const cookie = serialize('session', encryptedSessionData, {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    maxAge: 60 * 60 * 24 * 7, // One week
    path: '/',
  })
  res.setHeader('Set-Cookie', cookie)
  res.status(200).json({ message: 'Successfully set cookie!' })
}
```

LANGUAGE: JavaScript
CODE:
```
import { serialize } from 'cookie'
import { encrypt } from '@/app/lib/session'

export default function handler(req, res) {
  const sessionData = req.body
  const encryptedSessionData = encrypt(sessionData)

  const cookie = serialize('session', encryptedSessionData, {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    maxAge: 60 * 60 * 24 * 7, // One week
    path: '/',
  })
  res.setHeader('Set-Cookie', cookie)
  res.status(200).json({ message: 'Successfully set cookie!' })
}
```

----------------------------------------

TITLE: Next.js Image Component for Image Optimization
DESCRIPTION: Optimize images with the Image Component, which automatically optimizes images, prevents layout shift, and serves them in modern formats like WebP.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_16

LANGUAGE: APIDOC
CODE:
```
Next.js <Image> Component:
  Purpose: Optimize image delivery and performance.
  Benefits:
    - Automatic image optimization.
    - Prevents layout shift (CLS).
    - Serves images in modern formats (e.g., WebP).
```

----------------------------------------

TITLE: Bootstrapping Next.js Project with pnpm
DESCRIPTION: This command uses `pnpm create` to initialize a new Next.js application, `cms-graphcms-app`, based on the `cms-graphcms` example. It's an alternative method to quickly set up the project structure and dependencies using pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-graphcms cms-graphcms-app
```

----------------------------------------

TITLE: Initializing Next.js App with Payload CMS Example using pnpm
DESCRIPTION: This command initializes a new Next.js application using `create-next-app` via pnpm. It fetches the `cms-payload` example and creates a project named `cms-payload-app`. This offers another package manager option for setting up the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-payload/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-payload cms-payload-app
```

----------------------------------------

TITLE: Initializing Next.js Project with next-intl using pnpm
DESCRIPTION: This command initializes a new Next.js application using `create-next-app` via pnpm, bootstrapping it with the `with-i18n-next-intl` example. It creates a directory named `with-i18n-next-intl-app` for the new project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-next-intl/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-i18n-next-intl with-i18n-next-intl-app
```

----------------------------------------

TITLE: Bootstrapping Next.js App with Shallow Routing using pnpm
DESCRIPTION: This command initializes a new Next.js application named 'with-shallow-routing-app' using `pnpm create next-app`. It specifically pulls the 'with-shallow-routing' example, offering another package manager option to set up a project with shallow routing capabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-shallow-routing/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-shallow-routing with-shallow-routing-app
```

----------------------------------------

TITLE: revalidateTag Function Signature and Usage
DESCRIPTION: Defines the `revalidateTag` function signature, its single `tag` parameter, and its return type. The `tag` parameter is a case-sensitive string up to 256 characters used to identify cached data for revalidation. It also includes an example of how to add tags to `fetch` requests for caching.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidateTag.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
revalidateTag(tag: string): void;

Parameters:
  tag: A string representing the cache tag associated with the data you want to revalidate. Must be less than or equal to 256 characters. This value is case-sensitive.

Returns:
  void (does not return a value)

Example of adding tags to fetch:
fetch(url, { next: { tags: [...] } });
```

----------------------------------------

TITLE: Migrating Next.js Layout Params to Async (TypeScript)
DESCRIPTION: This snippet shows how to update `params` in Next.js `layout.js` to be asynchronous in Next.js 15. The `params` prop is now a Promise, requiring `await` to access its properties in `generateMetadata` and the default export function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_11

LANGUAGE: typescript
CODE:
```
// Before
type Params = { slug: string }

export function generateMetadata({ params }: { params: Params }) {
  const { slug } = params
}

export default async function Layout({
  children,
  params,
}: {
  children: React.ReactNode
  params: Params
}) {
  const { slug } = params
}

// After
type Params = Promise<{ slug: string }>

export async function generateMetadata({ params }: { params: Params }) {
  const { slug } = await params
}

export default async function Layout({
  children,
  params,
}: {
  children: React.ReactNode
  params: Params
}) {
  const { slug } = await params
}
```

----------------------------------------

TITLE: Migrating Synchronous Page Components to use `use` Hook (JSX)
DESCRIPTION: This example demonstrates the updated pattern for synchronous page components in JSX, where `params` and `searchParams` are now accessed via the `use` React hook. This change is necessary because these values are now wrapped in Promises.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_18

LANGUAGE: jsx
CODE:
```
// Before
export default function Page({ params, searchParams }) {
  const { slug } = params
  const { query } = searchParams
}
```

LANGUAGE: jsx
CODE:
```
// After
import { use } from "react"

export default function Page(props) {
  const params = use(props.params)
  const searchParams = use(props.searchParams)
  const slug = params.slug
  const query = searchParams.query
}
```

----------------------------------------

TITLE: Set Cache Lifetime with options.next.revalidate
DESCRIPTION: Shows how to use the `revalidate` option within `options.next` to specify the cache lifetime of a fetched resource in seconds. This allows fine-grained control over data revalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/fetch.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
fetch(`https://...`, { next: { revalidate: false | 0 | number } })
```

----------------------------------------

TITLE: Next.js App Directory: generateStaticParams Function API
DESCRIPTION: API reference for the `generateStaticParams` function in the Next.js `app` directory, detailing its purpose, return shape, and usage context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_24

LANGUAGE: APIDOC
CODE:
```
generateStaticParams(): Array<Object>
  Description: Replaces getStaticPaths in the app directory. Used to define dynamic paths that should be pre-rendered at build time.
  Return Shape: An array of segment objects (e.g., [{ id: '1' }, { id: '2' }]).
  Usage Context: Can be used inside layouts.
```

----------------------------------------

TITLE: Caching Database Queries with `unstable_cache` in Next.js App Router
DESCRIPTION: This example shows how to use `unstable_cache` to cache data fetched from a database or ORM in the Next.js App Router. It defines a cached function `getCachedPosts` with a revalidation time and a 'posts' tag, allowing for efficient data retrieval and on-demand invalidation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { unstable_cache } from 'next/cache'
import { db, posts } from '@/lib/db'

const getCachedPosts = unstable_cache(
  async () => {
    return await db.select().from(posts)
  },
  ['posts'],
  { revalidate: 3600, tags: ['posts'] }
)

export default async function Page() {
  const posts = getCachedPosts()
  // ...
}
```

LANGUAGE: jsx
CODE:
```
import { unstable_cache } from 'next/cache'
import { db, posts } from '@/lib/db'

const getCachedPosts = unstable_cache(
  async () => {
    return await db.select().from(posts)
  },
  ['posts'],
  { revalidate: 3600, tags: ['posts'] }
)

export default async function Page() {
  const posts = getCachedPosts()
  // ...
}
```

----------------------------------------

TITLE: Invalidating Cached Data with `revalidateTag` in Next.js Server Actions
DESCRIPTION: This snippet demonstrates how to use `revalidateTag` within a Next.js Server Action or Route Handler to invalidate cached data. Calling `revalidateTag('posts')` will clear all cached data associated with the 'posts' tag, ensuring fresh data is fetched on subsequent requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_7

LANGUAGE: ts
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function createPost() {
  // Invalidate all data tagged with 'posts' in the cache
  revalidateTag('posts')
}
```

LANGUAGE: js
CODE:
```
'use server'

import { revalidateTag } from 'next/cache'

export async function createPost() {
  // Invalidate all data tagged with 'posts' in the cache
  revalidateTag('posts')
}
```

----------------------------------------

TITLE: Next.js Form `action` (function) Props - App Router
DESCRIPTION: Documents the props supported by the Next.js `<Form>` component when its `action` prop is a function (Server Action), specifically for the App Router. It details the `action` prop and notes that `replace` and `scroll` are ignored.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/form.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
<Form> Component Props (App Router - action as function):

action:
  Type: function (Server Action)
  Required: Yes
  Description: The Server Action to be called when the form is submitted.
  Note: When action is a function, the 'replace' and 'scroll' props are ignored.
```

----------------------------------------

TITLE: Create a Basic Nested Route Page in Next.js
DESCRIPTION: This snippet demonstrates how to create a basic page for a nested route, specifically `/blog`, in Next.js. By adding a `page.tsx` or `page.js` file inside the `app/blog` directory, the content becomes publicly accessible. It fetches and displays a list of posts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/03-layouts-and-pages.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
// Dummy imports
import { getPosts } from '@/lib/posts'
import { Post } from '@/ui/post'

export default async function Page() {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <Post key={post.id} post={post} />
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
// Dummy imports
import { getPosts } from '@/lib/posts'
import { Post } from '@/ui/post'

export default async function Page() {
  const posts = await getPosts()

  return (
    <ul>
      {posts.map((post) => (
        <Post key={post.id} post={post} />
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Correct Server Action Export in Next.js 'use server' Files
DESCRIPTION: Illustrates the correct way to export a function in a 'use server' file. All exported values must be async functions to be properly recognized and invoked as Server Actions.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-use-server-value.mdx#_snippet_1

LANGUAGE: js
CODE:
```
'use server'

// ✅ This is correct: an async function is exported.
export async function getServerData() {
  return '...'
}
```

----------------------------------------

TITLE: Process FormData and Send Email in Next.js Route Handler
DESCRIPTION: This example illustrates how to access form data from a request using request.formData(). It demonstrates a POST endpoint that extracts 'email' and 'contents' fields, validates them, and then uses external utilities (sendMail, validateInputs) to send an email, handling potential errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_5

LANGUAGE: ts
CODE:
```
import { sendMail, validateInputs } from '@/lib/email-transporter'

export async function POST(request: Request) {
  const formData = await request.formData()
  const email = formData.get('email')
  const contents = formData.get('contents')

  try {
    await validateInputs({ email, contents })
    const info = await sendMail({ email, contents })

    return Response.json({ messageId: info.messageId })
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected exception'

    return new Response(message, { status: 500 })
  }
}
```

LANGUAGE: js
CODE:
```
import { sendMail, validateInputs } from '@/lib/email-transporter'

export async function POST(request) {
  const formData = await request.formData()
  const email = formData.get('email')
  const contents = formData.get('contents')

  try {
    await validateInputs({ email, contents })
    const info = await sendMail({ email, contents })

    return Response.json({ messageId: info.messageId })
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected exception'

    return new Response(message, { status: 500 })
  }
}
```

----------------------------------------

TITLE: Migrating Next.js Layout Params to Async (JavaScript)
DESCRIPTION: This snippet demonstrates how to update `params` in Next.js `layout.js` to be asynchronous in Next.js 15 for JavaScript. The `params` prop is now a Promise, requiring `await` to access its properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_12

LANGUAGE: javascript
CODE:
```
// Before
export function generateMetadata({ params }) {
  const { slug } = params
}

export default async function Layout({ children, params }) {
  const { slug } = params
}

// After
export async function generateMetadata({ params }) {
  const { slug } = await params
}

export default async function Layout({ children, params }) {
  const { slug } = await params
}
```

----------------------------------------

TITLE: Implement Automatic Prefetching with Next.js Link Component
DESCRIPTION: This snippet demonstrates how to use the `Link` component from `next/link` to enable automatic prefetching for a route. Next.js automatically prefetches linked pages in production, making navigation feel instant. This pattern is suitable for standard navigation links.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/prefetching.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function NavLink() {
  return <Link href="/about">About</Link>
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function NavLink() {
  return <Link href="/about">About</Link>
}
```

----------------------------------------

TITLE: usePathname Hook API Reference
DESCRIPTION: Detailed API documentation for the `usePathname` hook, including its signature, parameters, and return values. This hook provides the current URL's pathname as a string.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-pathname.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
usePathname(): string\n\nParameters:\n  None\n\nReturns:\n  string - The current URL's pathname.\n\nReturn Examples:\n  URL: /                 -> Returned: '/'
  URL: /dashboard        -> Returned: '/dashboard'
  URL: /dashboard?v=2    -> Returned: '/dashboard'
  URL: /blog/hello-world -> Returned: '/blog/hello-world'
```

----------------------------------------

TITLE: Set Response Headers in Next.js API Routes
DESCRIPTION: This snippet demonstrates how to set custom HTTP headers in a Next.js API route by returning a new `Response` object with the desired headers. This is the method for sending outgoing headers to the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_9

LANGUAGE: typescript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request: Request) {
  const headersList = await headers()
  const referer = headersList.get('referer')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { referer: referer },
  })
}
```

LANGUAGE: javascript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request) {
  const headersList = await headers()
  const referer = headersList.get('referer')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { referer: referer },
  })
}
```

----------------------------------------

TITLE: Client-Side Login Form Component in Next.js
DESCRIPTION: This React component, `LoginPage`, provides a user interface for logging in. It captures email and password inputs, prevents default form submission, and sends the credentials as JSON to a `/api/auth/login` endpoint. Upon a successful response, the user is redirected to the `/profile` page using Next.js's `useRouter`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { FormEvent } from 'react'
import { useRouter } from 'next/router'

export default function LoginPage() {
  const router = useRouter()

  async function handleSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const email = formData.get('email')
    const password = formData.get('password')

    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    })

    if (response.ok) {
      router.push('/profile')
    } else {
      // Handle errors
    }
  }

  return (
    <form onSubmit={handleSubmit}>
      <input type="email" name="email" placeholder="Email" required />
      <input type="password" name="password" placeholder="Password" required />
      <button type="submit">Login</button>
    </form>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { FormEvent } from 'react'
import { useRouter } from 'next/router'

export default function LoginPage() {
  const router = useRouter()

  async function handleSubmit(event) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const email = formData.get('email')
    const password = formData.get('password')

    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password }),
    })

    if (response.ok) {
      router.push('/profile')
    } else {
      // Handle errors
    }
  }

  return (
```

----------------------------------------

TITLE: Fetching and Rendering Remote MDX with App Router (JavaScript)
DESCRIPTION: This snippet demonstrates how to fetch remote MDX content and render it using `MDXRemote` from `next-mdx-remote-client/rsc` within the Next.js App Router. It performs an asynchronous fetch request to retrieve markdown text, which is then passed to the `MDXRemote` component for rendering. This approach is suitable for dynamic content from external sources like CMS or databases.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/mdx.mdx#_snippet_37

LANGUAGE: JavaScript
CODE:
```
import { MDXRemote } from 'next-mdx-remote-client/rsc'

export default async function RemoteMdxPage() {
  // MDX text - can be from a database, CMS, fetch, anywhere...
  const res = await fetch('https://...')
  const markdown = await res.text()
  return <MDXRemote source={markdown} />
}
```

----------------------------------------

TITLE: Tag Fetch Cache Entries for Fine-Grained Revalidation
DESCRIPTION: Illustrates how to assign one or more tags to cache entries created by `fetch` requests using the `next.tags` option. These tags enable targeted cache purging later with `revalidateTag`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_21

LANGUAGE: jsx
CODE:
```
fetch(`https://...`, { next: { tags: ['a', 'b', 'c'] } })
```

----------------------------------------

TITLE: Fetching Data in a Layout Component with SWR in Next.js
DESCRIPTION: This snippet demonstrates how to fetch data client-side within a Next.js layout component using the SWR library. It uses `useSWR` to fetch navigation links from `/api/navigation`, handles loading and error states, and passes the fetched data to the `Navbar` component. Note that `getStaticProps` or `getServerSideProps` cannot be used in layout components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/01-pages-and-layouts.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
import useSWR from 'swr'
import Navbar from './navbar'
import Footer from './footer'

export default function Layout({ children }) {
  const { data, error } = useSWR('/api/navigation', fetcher)

  if (error) return <div>Failed to load</div>
  if (!data) return <div>Loading...</div>

  return (
    <>
      <Navbar links={data.links} />
      <main>{children}</main>
      <Footer />
    </>
  )
}
```

----------------------------------------

TITLE: Integrating Styled-JSX Registry into Next.js Root Layout
DESCRIPTION: This snippet demonstrates how to integrate the `StyledJsxRegistry` into the root layout of a Next.js application. By wrapping the `children` prop with `StyledJsxRegistry`, all components within the application will have their `styled-jsx` styles collected and injected correctly during server-side rendering and client-side hydration. This is a crucial step for enabling CSS-in-JS functionality across the entire application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/css-in-js.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import StyledJsxRegistry from './registry'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html>
      <body>
        <StyledJsxRegistry>{children}</StyledJsxRegistry>
      </body>
    </html>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
import StyledJsxRegistry from './registry'

export default function RootLayout({ children }) {
  return (
    <html>
      <body>
        <StyledJsxRegistry>{children}</StyledJsxRegistry>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Next.js Middleware: Negative Regex Matching in `matcher`
DESCRIPTION: Demonstrates how to use full regular expressions, specifically negative lookaheads, within the `matcher` configuration to exclude specific paths (like API routes, static files, or metadata files) from Middleware execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_21

LANGUAGE: js
CODE:
```
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico, sitemap.xml, robots.txt (metadata files)
     */
    '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*),'
  ]
}
```

----------------------------------------

TITLE: Deduplicate Data Requests with React `cache` in Next.js
DESCRIPTION: This snippet shows how to use React's `cache` function to deduplicate data requests, particularly when not using `fetch`. It wraps a database query function, ensuring that subsequent calls with the same arguments only execute the query once per render pass.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { cache } from 'react'
import { db, posts, eq } from '@/lib/db'

export const getPost = cache(async (id: string) => {
  const post = await db.query.posts.findFirst({
    where: eq(posts.id, parseInt(id)),
  })
})
```

LANGUAGE: jsx
CODE:
```
import { cache } from 'react'
import { db, posts, eq } from '@/lib/db'
import { notFound } from 'next/navigation'

export const getPost = cache(async (id) => {
  const post = await db.query.posts.findFirst({
    where: eq(posts.id, parseInt(id)),
  })
})
```

----------------------------------------

TITLE: Configure CORS Headers in Next.js Middleware
DESCRIPTION: This snippet demonstrates how to set CORS headers in Next.js Middleware to allow cross-origin requests. It handles both simple and preflighted (OPTIONS) requests, checking if the request origin is allowed and setting appropriate 'Access-Control-Allow-Origin', 'Access-Control-Allow-Methods', and 'Access-Control-Allow-Headers'.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

const allowedOrigins = ['https://acme.com', 'https://my-app.org']

const corsOptions = {
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

export function middleware(request: NextRequest) {
  // Check the origin from the request
  const origin = request.headers.get('origin') ?? ''
  const isAllowedOrigin = allowedOrigins.includes(origin)

  // Handle preflighted requests
  const isPreflight = request.method === 'OPTIONS'

  if (isPreflight) {
    const preflightHeaders = {
      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),
      ...corsOptions,
    }
    return NextResponse.json({}, { headers: preflightHeaders })
  }

  // Handle simple requests
  const response = NextResponse.next()

  if (isAllowedOrigin) {
    response.headers.set('Access-Control-Allow-Origin', origin)
  }

  Object.entries(corsOptions).forEach(([key, value]) => {
    response.headers.set(key, value)
  })

  return response
}

export const config = {
  matcher: '/api/:path*',
}
```

LANGUAGE: jsx
CODE:
```
import { NextResponse } from 'next/server'

const allowedOrigins = ['https://acme.com', 'https://my-app.org']

const corsOptions = {
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
}

export function middleware(request) {
  // Check the origin from the request
  const origin = request.headers.get('origin') ?? ''
  const isAllowedOrigin = allowedOrigins.includes(origin)

  // Handle preflighted requests
  const isPreflight = request.method === 'OPTIONS'

  if (isPreflight) {
    const preflightHeaders = {
      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),
      ...corsOptions,
    }
    return NextResponse.json({}, { headers: preflightHeaders })
  }

  // Handle simple requests
  const response = NextResponse.next()

  if (isAllowedOrigin) {
    response.headers.set('Access-Control-Allow-Origin', origin)
  }

  Object.entries(corsOptions).forEach(([key, value]) => {
    response.headers.set(key, value)
  })

  return response
}

export const config = {
  matcher: '/api/:path*',
}
```

----------------------------------------

TITLE: Server-side Form Validation with Zod in Next.js Server Actions
DESCRIPTION: Demonstrates server-side form validation using the Zod library in Next.js server actions. It defines a schema for email validation and uses `safeParse` to check form data, returning errors if validation fails.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
'use server'

import { z } from 'zod'

const schema = z.object({
  email: z.string({
    invalid_type_error: 'Invalid Email',
  }),
})

export default async function createUser(formData: FormData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })

  // Return early if the form data is invalid
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Mutate data
}
```

LANGUAGE: jsx
CODE:
```
'use server'

import { z } from 'zod'

const schema = z.object({
  email: z.string({
    invalid_type_error: 'Invalid Email',
  }),
})

export default async function createsUser(formData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })

  // Return early if the form data is invalid
  if (!validatedFields.success) {
    return {
      errors: validatedFields.error.flatten().fieldErrors,
    }
  }

  // Mutate data
}
```

----------------------------------------

TITLE: Using Module Path Aliases in TypeScript/JavaScript
DESCRIPTION: This snippet demonstrates an import using a custom module path alias, configured via the `paths` option in `tsconfig.json` or `jsconfig.json`. Aliases provide a flexible way to create short, descriptive import paths for specific directories.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import Button from "@/components/button";
```

----------------------------------------

TITLE: Configure Next.js Site Verification Metadata
DESCRIPTION: This snippet shows how to add site verification meta tags for various search engines like Google, Yandex, and Yahoo, as well as custom 'me' tags, using Next.js `metadata`. The corresponding HTML output demonstrates the generated verification meta tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_22

LANGUAGE: jsx
CODE:
```
export const metadata = {
  verification: {
    google: 'google',
    yandex: 'yandex',
    yahoo: 'yahoo',
    other: {
      me: ['my-email', 'my-link'],
    },
  },
}
```

LANGUAGE: html
CODE:
```
<meta name="google-site-verification" content="google" />
<meta name="y_key" content="yahoo" />
<meta name="yandex-verification" content="yandex" />
<meta name="me" content="my-email" />
<meta name="me" content="my-link" />
```

----------------------------------------

TITLE: Pass Server Actions Through Cached Components to Client Components in Next.js
DESCRIPTION: This example illustrates how to pass a Server Action (`performUpdate`) from a Server Component (`Page`) through a cacheable Server Component (`CachedComponent`) to a Client Component (`ClientComponent`). The Server Action is not invoked within the `CachedComponent`, preserving its cacheability, and is instead passed as a prop to be triggered by the Client Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-cache.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import ClientComponent from './ClientComponent'

export default async function Page() {
  const performUpdate = async () => {
    'use server'
    // Perform some server-side update
    await db.update(...)
  }

  return <CacheComponent performUpdate={performUpdate} />
}

async function CachedComponent({
  performUpdate,
}: {
  performUpdate: () => Promise<void>
}) {
  'use cache'
  // Do not call performUpdate here
  return <ClientComponent action={performUpdate} />
}
```

LANGUAGE: jsx
CODE:
```
import ClientComponent from './ClientComponent'

export default async function Page() {
  const performUpdate = async () => {
    'use server'
    // Perform some server-side update
    await db.update(...)
  }

  return <CacheComponent performUpdate={performUpdate} />
}

async function CachedComponent({ performUpdate }) {
  'use cache'
  // Do not call performUpdate here
  return <ClientComponent action={performUpdate} />
}
```

----------------------------------------

TITLE: Accessing Request Headers and Cookies in Next.js Server Components
DESCRIPTION: Demonstrates how to access the `cookies` API within a Next.js Server Component (e.g., a layout) to retrieve request-specific data like theme settings. Layouts cannot directly access the raw request object, so `headers` and `cookies` APIs are used instead.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Layout({ children }) {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'

export default async function Layout({ children }) {
  const cookieStore = await cookies()
  const theme = cookieStore.get('theme')
  return '...'
}
```

----------------------------------------

TITLE: Creating JSON Responses with NextResponse - JavaScript
DESCRIPTION: The `NextResponse.json` static method creates a `NextResponse` instance with a JSON body. It leverages the standard `Response.json` method and then wraps the resulting response body and initialization options within a new `NextResponse` object, ensuring compatibility with Next.js middleware features.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
    static json(body, init) {
        const response = Response.json(body, init);
        return new NextResponse(response.body, response);
    }
```

----------------------------------------

TITLE: Next.js App Router: Loading Scripts in Layouts
DESCRIPTION: This snippet demonstrates how to integrate a third-party script into a specific layout component within the Next.js App Router. The script will be fetched and executed when the layout or any nested route within it is accessed, ensuring it loads only once per layout instance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/scripts.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import Script from 'next/script'

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <>
      <section>{children}</section>
      <Script src="https://example.com/script.js" />
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Script from 'next/script'

export default function DashboardLayout({ children }) {
  return (
    <>
      <section>{children}</section>
      <Script src="https://example.com/script.js" />
    </>
  )
}
```

----------------------------------------

TITLE: Configure Next.js i18n with Locales and Domains
DESCRIPTION: This snippet demonstrates how to add the `i18n` configuration to `next.config.js`. It defines supported `locales`, the `defaultLocale`, and optional `domains` for domain-specific routing, including an `http` field for local testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/internationalization.mdx#_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  i18n: {
    // These are all the locales you want to support in
    // your application
    locales: ['en-US', 'fr', 'nl-NL'],
    // This is the default locale you want to be used when visiting
    // a non-locale prefixed path e.g. `/hello`
    defaultLocale: 'en-US',
    // This is a list of locale domains and the default locale they
    // should handle (these are only required when setting up domain routing)
    // Note: subdomains must be included in the domain value to be matched e.g. "fr.example.com".
    domains: [
      {
        domain: 'example.com',
        defaultLocale: 'en-US',
      },
      {
        domain: 'example.nl',
        defaultLocale: 'nl-NL',
      },
      {
        domain: 'example.fr',
        defaultLocale: 'fr',
        // an optional http field can also be used to test
        // locale domains locally with http instead of https
        http: true,
      },
    ],
  },
}
```

----------------------------------------

TITLE: Replace URL in History with Next.js Link Component
DESCRIPTION: Demonstrates how to use the `replace` prop on the `Link` component to prevent adding a new entry to the browser's history stack, effectively replacing the current URL. This is useful for scenarios where you don't want the user to be able to navigate back to the previous page using the browser's back button.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_23

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href="/about" replace>\n      About us\n    </Link>\n  )\n}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href="/about" replace>\n      About us\n    </Link>\n  )\n}
```

----------------------------------------

TITLE: Installing Playwright Manually (Bash)
DESCRIPTION: These commands initiate the Playwright installation process, guiding the user through setup prompts and configuring Playwright for their project, including generating a `playwright.config.ts` file. Users can choose their preferred package manager: npm, yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm init playwright
# or
yarn create playwright
# or
pnpm create playwright
```

----------------------------------------

TITLE: Perform Client-Side Data Fetching with SWR in Next.js
DESCRIPTION: This example illustrates client-side data fetching in a Next.js page using the SWR library. It leverages the `useSWR` hook to manage data fetching, caching, and revalidation. The component handles loading and error states gracefully, displaying 'Loading...' or 'Failed to load.' before rendering the fetched data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/05-client-side-rendering.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import useSWR from 'swr'

export function Page() {
  const { data, error, isLoading } = useSWR(
    'https://api.example.com/data',
    fetcher
  )

  if (error) return <p>Failed to load.</p>
  if (isLoading) return <p>Loading...</p>

  return <p>Your Data: {data}</p>
}
```

----------------------------------------

TITLE: Running Next.js Development Server with Yarn
DESCRIPTION: These commands are used to install project dependencies and start the Next.js development server locally. `yarn install` fetches all required packages, and `yarn dev` launches the application, typically accessible at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_6

LANGUAGE: Shell
CODE:
```
yarn install
```

LANGUAGE: Shell
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Define Root Layout in Next.js App Router
DESCRIPTION: Examples of a root layout component for the Next.js App Router, demonstrating how to define the main HTML structure and accept children for nested layouts or pages. This replaces `pages/_app` and `pages/_document` files.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function RootLayout({
  // Layouts must accept a children prop.
  // This will be populated with nested layouts or pages
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default function RootLayout({
  // Layouts must accept a children prop.
  // This will be populated with nested layouts or pages
  children,
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Update Next.js Server Action Signature for React useActionState
DESCRIPTION: Illustrates how the signature of a Next.js server action changes when integrated with React's `useActionState` hook. The server function now accepts an `initialState` or `prevState` parameter as its first argument.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use server'

import { z } from 'zod'

export async function createUser(initialState: any, formData: FormData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })
  // ...
}
```

LANGUAGE: jsx
CODE:
```
'use server'

import { z } from 'zod'

// ...

export async function createUser(initialState, formData) {
  const validatedFields = schema.safeParse({
    email: formData.get('email'),
  })
  // ...
}
```

----------------------------------------

TITLE: Configure Next.js to Enable Dynamic I/O for Cache Tagging
DESCRIPTION: To utilize `cacheTag` for on-demand cache invalidation, the `dynamicIO` experimental flag must be enabled in your `next.config.js` or `next.config.ts` file. This configuration allows Next.js to manage cache entries with associated tags.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cacheTag.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig
```

LANGUAGE: javascript
CODE:
```
const nextConfig = {
  experimental: {
    dynamicIO: true,
  },
}

export default nextConfig
```

----------------------------------------

TITLE: Inline Server Functions within Server Components (TypeScript/JavaScript)
DESCRIPTION: Illustrates how to define a Server Function directly within a Server Component by adding the 'use server' directive inside the asynchronous function's body. This allows for co-locating data mutation logic with the component that uses it.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default function Page() {
  // Server Action
  async function createPost(formData: FormData) {
    'use server'
    // ...
  }

  return <></>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  // Server Action
  async function createPost(formData) {
    'use server'
    // ...
  }

  return <></>
}
```

----------------------------------------

TITLE: Define Dynamic Metadata with Next.js `generateMetadata` function
DESCRIPTION: Export an `async` `generateMetadata` function to define dynamic metadata that depends on route parameters, external data, or parent metadata. This function returns a `Metadata` object and allows for fetching data to construct metadata.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import type { Metadata, ResolvingMetadata } from 'next'

type Props = {
  params: Promise<{ id: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}

export async function generateMetadata(
  { params, searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  // read route params
  const { id } = await params

  // fetch data
  const product = await fetch(`https://.../${id}`).then((res) => res.json())

  // optionally access and extend (rather than replace) parent metadata
  const previousImages = (await parent).openGraph?.images || []

  return {
    title: product.title,
    openGraph: {
      images: ['/some-specific-page-image.jpg', ...previousImages],
    },
  }
}

export default function Page({ params, searchParams }: Props) {}
```

LANGUAGE: jsx
CODE:
```
export async function generateMetadata({ params, searchParams }, parent) {
  // read route params
  const { id } = await params

  // fetch data
  const product = await fetch(`https://.../${id}`).then((res) => res.json())

  // optionally access and extend (rather than replace) parent metadata
  const previousImages = (await parent).openGraph?.images || []

  return {
    title: product.title,
    openGraph: {
      images: ['/some-specific-page-image.jpg', ...previousImages],
    },
  }
}

export default function Page({ params, searchParams }) {}
```

----------------------------------------

TITLE: Opting out of fetch caching in Next.js
DESCRIPTION: This snippet demonstrates how to prevent a 'fetch' request from being cached by Next.js. By setting 'cache: 'no-store'' in the fetch options, the response will not be stored in the Data Cache, ensuring fresh data on every request.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_3

LANGUAGE: js
CODE:
```
let data = await fetch('https://api.vercel.app/blog', { cache: 'no-store' })
```

----------------------------------------

TITLE: Next.js `generateStaticParams` for Full Static Rendering
DESCRIPTION: Demonstrates how to use `generateStaticParams` to pre-render all dynamic routes at build time by fetching all available posts and returning their slugs. This ensures all paths are cached in the Full Route Cache during the build process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_26

LANGUAGE: jsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Implement Streaming with Suspense in Next.js App Router
DESCRIPTION: This example demonstrates how to use React's `Suspense` component within the Next.js App Router to manage asynchronous UI components. It allows for displaying a fallback UI (e.g., 'Loading feed...') while data is being fetched, improving the perceived performance through streaming server rendering and selective hydration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/loading.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import { PostFeed, Weather } from './Components'

export default function Posts() {
  return (
    <section>
      <Suspense fallback={<p>Loading feed...</p>}>
        <PostFeed />
      </Suspense>
      <Suspense fallback={<p>Loading weather...</p>}>
        <Weather />
      </Suspense>
    </section>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import { PostFeed, Weather } from './Components'

export default function Posts() {
  return (
    <section>
      <Suspense fallback={<p>Loading feed...</p>}>
        <PostFeed />
      </Suspense>
      <Suspense fallback={<p>Loading weather...</p>}>
        <Weather />
      </Suspense>
    </section>
  )
}
```

----------------------------------------

TITLE: Configure Jest for Absolute Imports and Module Path Aliases
DESCRIPTION: This configuration demonstrates how to enable absolute imports and module path aliases in Jest by synchronizing `paths` in `tsconfig.json` or `jsconfig.json` with `moduleNameMapper` in `jest.config.js`. This setup allows Jest to correctly resolve module imports using aliases (e.g., `@/components/`) defined in your project's compiler options, ensuring consistency between development and testing environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "module": "esnext",
    "moduleResolution": "bundler",
    "baseUrl": "./",
    "paths": {
      "@/components/*": ["components/*"]
    }
  }
}
```

LANGUAGE: js
CODE:
```
moduleNameMapper: {
  // ...
  '^@/components/(.*)$': '<rootDir>/components/$1',
}
```

----------------------------------------

TITLE: useSearchParams Hook Return Value and Methods
DESCRIPTION: Describes the read-only `URLSearchParams` interface returned by `useSearchParams`, detailing key methods like `get()` and `has()` with examples, and listing other available read-only methods for querying URL parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-search-params.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Returns: ReadonlyURLSearchParams interface

Methods of ReadonlyURLSearchParams:
- get(name: string): string | null
  - Description: Returns the first value associated with the search parameter.
  - Examples:
    - URL: /dashboard?a=1 -> get("a") -> '1'
    - URL: /dashboard?a= -> get("a") -> ''
    - URL: /dashboard?b=3 -> get("a") -> null
    - URL: /dashboard?a=1&a=2 -> get("a") -> '1' (use getAll() for all values)

- has(name: string): boolean
  - Description: Returns a boolean value indicating if the given parameter exists.
  - Examples:
    - URL: /dashboard?a=1 -> has("a") -> true
    - URL: /dashboard?b=3 -> has("a") -> false

- Other read-only methods: getAll(), keys(), values(), entries(), forEach(), toString()
```

----------------------------------------

TITLE: Next.js API Route Request Helper Properties
DESCRIPTION: This section outlines the built-in helper properties available on the `req` object within Next.js API routes. These properties provide convenient access to parsed request data such as cookies, query parameters, and the request body.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
req.cookies: An object containing the cookies sent by the request. Defaults to {}
req.query: An object containing the query string. Defaults to {}
req.body: An object containing the body parsed by content-type, or null if no body was sent
```

----------------------------------------

TITLE: Handle Webhook for Route Revalidation in Next.js
DESCRIPTION: This Route Handler demonstrates how to receive a webhook notification from a third-party application, such as a CMS, to trigger a route revalidation. It verifies a secret token and a tag parameter before calling `revalidateTag` to update cached content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_10

LANGUAGE: typescript
CODE:
```
import { type NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  const token = request.nextUrl.searchParams.get('token')

  if (token !== process.env.REVALIDATE_SECRET_TOKEN) {
    return NextResponse.json({ success: false }, { status: 401 })
  }

  const tag = request.nextUrl.searchParams.get('tag')

  if (!tag) {
    return NextResponse.json({ success: false }, { status: 400 })
  }

  revalidateTag(tag)

  return NextResponse.json({ success: true })
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

export async function GET(request) {
  const token = request.nextUrl.searchParams.get('token')

  if (token !== process.env.REVALIDATE_SECRET_TOKEN) {
    return NextResponse.json({ success: false }, { status: 401 })
  }

  const tag = request.nextUrl.searchParams.get('tag')

  if (!tag) {
    return NextResponse.json({ success: false }, { status: 400 })
  }

  revalidateTag(tag)

  return NextResponse.json({ success: true })
}
```

----------------------------------------

TITLE: Define Next.js Page Loading State with loading.js
DESCRIPTION: This snippet demonstrates how to create a `loading.js` file in a Next.js application to display a loading UI for an entire page while its data is being fetched. The `loading.js` file automatically wraps the `page.js` and any children below in a `<Suspense>` boundary, providing an instant fallback UI during navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export default function Loading() {
  // Define the Loading UI here
  return <div>Loading...</div>
}
```

LANGUAGE: jsx
CODE:
```
export default function Loading() {
  // Define the Loading UI here
  return <div>Loading...</div>
}
```

----------------------------------------

TITLE: Create React Context Provider for User Promise
DESCRIPTION: This code defines a React Context Provider (`UserProvider`) and a custom hook (`useUser`) to make a `userPromise` accessible to any Client Component within its scope. The provider accepts a Promise as a prop and makes it available through the context, enabling deferred resolution of data.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
'use client';

import { createContext, useContext, ReactNode } from 'react';

type User = any;
type UserContextType = {
  userPromise: Promise<User | null>;
};

const UserContext = createContext<UserContextType | null>(null);

export function useUser(): UserContextType {
  let context = useContext(UserContext);
  if (context === null) {
    throw new Error('useUser must be used within a UserProvider');
  }
  return context;
}

export function UserProvider({
  children,
  userPromise
}: {
  children: ReactNode;
  userPromise: Promise<User | null>;
}) {
  return (
    <UserContext.Provider value={{ userPromise }}>
      {children}
    </UserContext.Provider>
  );
}
```

LANGUAGE: js
CODE:
```
'use client'

import { createContext, useContext, ReactNode } from 'react'

const UserContext = createContext(null)

export function useUser() {
  let context = useContext(UserContext)
  if (context === null) {
    throw new Error('useUser must be used within a UserProvider')
  }
  return context
}

export function UserProvider({ children, userPromise }) {
  return (
    <UserContext.Provider value={{ userPromise }}>
      {children}
    </UserContext.Provider>
  )
}
```

----------------------------------------

TITLE: Define Server Functions in dedicated files (TypeScript/JavaScript)
DESCRIPTION: Demonstrates how to define Server Functions in a dedicated file (e.g., app/lib/actions.ts or .js) by placing the 'use server' directive at the top of asynchronous functions. These functions can then be imported and used for data mutations like creating or deleting posts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
export async function createPost(formData: FormData) {
  'use server'
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}

export async function deletePost(formData: FormData) {
  'use server'
  const id = formData.get('id')

  // Update data
  // Revalidate cache
}
```

LANGUAGE: js
CODE:
```
export async function createPost(formData) {
  'use server'
  const title = formData.get('title')
  const content = formData.get('content')

  // Update data
  // Revalidate cache
}

export async function deletePost(formData) {
  'use server'
  const id = formData.get('id')

  // Update data
  // Revalidate cache
}
```

----------------------------------------

TITLE: Basic Client-Side Navigation with Next.js Link Component
DESCRIPTION: This snippet demonstrates how to use the `Link` component from `next/link` to perform client-side route transitions. It shows multiple `Link` components mapping to different static page paths, enabling seamless navigation within a Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/03-linking-and-navigating.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

function Home() {
  return (
    <ul>
      <li>
        <Link href="/">Home</Link>
      </li>
      <li>
        <Link href="/about">About Us</Link>
      </li>
      <li>
        <Link href="/blog/hello-world">Blog Post</Link>
      </li>
    </ul>
  )
}

export default Home
```

----------------------------------------

TITLE: Apply use cache directive at file, component, or function level
DESCRIPTION: This example shows how to use the `use cache` directive at various scopes: at the top of a file to cache all exports, within a React component, or inside a specific function. This marks the respective code as cacheable.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-cache.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
// File level
'use cache'

export default async function Page() {
  // ...
}

// Component level
export async function MyComponent() {
  'use cache'
  return <></>
}

// Function level
export async function getData() {
  'use cache'
  const data = await fetch('/api/data')
  return data
}
```

----------------------------------------

TITLE: Define Multiple Google Fonts in a Next.js Utility File
DESCRIPTION: Illustrates creating a utility file (`app/fonts.ts/js`) to export multiple initialized Google Fonts (Inter, Roboto Mono). This approach allows fonts to be preloaded only when rendered, promoting modularity and efficient loading.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_22

LANGUAGE: ts
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

export const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
})
```

LANGUAGE: js
CODE:
```
import { Inter, Roboto_Mono } from 'next/font/google'

export const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export const roboto_mono = Roboto_Mono({
  subsets: ['latin'],
  display: 'swap',
})
```

----------------------------------------

TITLE: Next.js App Router: Load Critical Scripts with `beforeInteractive`
DESCRIPTION: The `beforeInteractive` strategy injects scripts into the initial HTML, loading them before Next.js modules and executing them in order. This strategy is for critical scripts that do not block page hydration and must be placed in `app/layout.tsx` or `app/layout.js`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/script.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import Script from 'next/script'

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        {children}
        <Script
          src="https://example.com/script.js"
          strategy="beforeInteractive"
        />
      </body>
    </html>
  )
}
```

LANGUAGE: javascript
CODE:
```
import Script from 'next/script'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        {children}
        <Script
          src="https://example.com/script.js"
          strategy="beforeInteractive"
        />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Next.js App Directory: Managing Metadata with `metadata` Export (After Migration)
DESCRIPTION: Shows the new method for defining page metadata in the Next.js `app` directory using a `metadata` export, replacing the `next/head` component for improved SEO capabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'My Page Title',
}

export default function Page() {
  return '...'
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'My Page Title',
}

export default function Page() {
  return '...'
}
```

----------------------------------------

TITLE: Configure Permissions-Policy Header in Next.js
DESCRIPTION: This header allows you to control which browser features and APIs (e.g., camera, microphone, geolocation) can be used by the site. It was previously named `Feature-Policy` and helps enhance user privacy and security.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_16

LANGUAGE: js
CODE:
```
{
  key: 'Permissions-Policy',
  value: 'camera=(), microphone=(), geolocation=(), browsing-topics=()'
}
```

----------------------------------------

TITLE: Next.js Data Caching Strategies
DESCRIPTION: Guidelines for verifying and opting into data caching for requests in both App Router (using `fetch` and `unstable_cache`) and Pages Router (using `getStaticProps`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_10

LANGUAGE: APIDOC
CODE:
```
Concept: Data Caching
App Router:
  - Verify and opt into caching for data requests.
  - Ensure non-fetch requests are cached using unstable_cache.
Pages Router:
  - Verify and opt into caching for data requests.
  - Ensure non-getStaticProps requests are cached.
```

----------------------------------------

TITLE: Create RSS Feed Route Handler in Next.js
DESCRIPTION: This code demonstrates how to create a custom Route Handler in Next.js to serve an RSS XML feed. It fetches data from an external endpoint, constructs an RSS XML string using template literals, and sets the 'Content-Type' header to 'application/xml' before returning the response. It's crucial to sanitize any input used to generate markup to prevent vulnerabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
export async function GET(request: Request) {
  const rssResponse = await fetch(/* rss endpoint */)
  const rssData = await rssResponse.json()

  const rssFeed = `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
 <title>${rssData.title}</title>
 <description>${rssData.description}</description>
 <link>${rssData.link}</link>
 <copyright>${rssData.copyright}</copyright>
 ${rssData.items.map((item) => {
   return `<item>
    <title>${item.title}</title>
    <description>${item.description}</description>
    <link>${item.link}</link>
    <pubDate>${item.publishDate}</pubDate>
    <guid isPermaLink="false">${item.guid}</guid>
 </item>`
 })}
</channel>
</rss>`

  const headers = new Headers({ 'content-type': 'application/xml' })

  return new Response(rssFeed, { headers })
}
```

LANGUAGE: JavaScript
CODE:
```
export async function GET(request) {
  const rssResponse = await fetch(/* rss endpoint */)
  const rssData = await rssResponse.json()

  const rssFeed = `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
 <title>${rssData.title}</title>
 <description>${rssData.description}</description>
 <link>${rssData.link}</link>
 <copyright>${rssData.copyright}</copyright>
 ${rssData.items.map((item) => {
   return `<item>
    <title>${item.title}</title>
    <description>${item.description}</description>
    <link>${item.link}</link>
    <pubDate>${item.publishDate}</pubDate>
    <guid isPermaLink="false">${item.guid}</guid>
 </item>`
 })}
</channel>
</rss>`

  const headers = new Headers({ 'content-type': 'application/xml' })

  return new Response(rssFeed, { headers })
}
```

----------------------------------------

TITLE: NextRequest API Reference
DESCRIPTION: Detailed API reference for the `NextRequest` class, extending the Web Request API with convenience methods, specifically for cookie manipulation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-request.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
NextRequest:
  extends: Web Request API
  properties:
    cookies: NextRequestCookies
      description: Read or mutate the Set-Cookie header of the request.
      methods:
        set(name: string, value: string): void
          description: Set a cookie with the given name and value.
          parameters:
            name: The name of the cookie.
            value: The value to set for the cookie.
        get(name: string): { name: string, value: string, Path: string } | undefined
          description: Get the value of a cookie by name.
          parameters:
            name: The name of the cookie.
          returns: Cookie object or undefined.
        getAll(name?: string): Array<{ name: string, value: string, Path: string }>
          description: Get all cookies or all values for a specific cookie name.
          parameters:
            name: Optional. The name of the cookie to filter by.
          returns: An array of cookie objects.
        delete(name: string): boolean
          description: Delete a cookie by name.
          parameters:
            name: The name of the cookie to delete.
          returns: True if deleted, false otherwise.
        has(name: string): boolean
          description: Check if a cookie exists by name.
          parameters:
            name: The name of the cookie to check.
          returns: True if exists, false otherwise.
        clear(): void
          description: Remove the Set-Cookie header from the request.
```

----------------------------------------

TITLE: Using next/image component for optimized images
DESCRIPTION: Demonstrates the basic usage of the `next/image` component to display an image, leveraging Next.js's automatic image optimization for improved performance. This is the recommended approach to fix the `no-img-element` error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-img-element.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

function Home() {
  return (
    <Image
      src="https://example.com/hero.jpg"
      alt="Landscape picture"
      width={800}
      height={500}
    />
  )
}

export default Home
```

----------------------------------------

TITLE: Registering Observability Tools with Next.js `register` Function
DESCRIPTION: The `register` function is an optional export from `instrumentation.js|ts` that is invoked once when a new Next.js server instance starts. It can be asynchronous and is primarily used to initialize and integrate observability tools like OpenTelemetry into the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/instrumentation.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel('next-app')
}
```

LANGUAGE: js
CODE:
```
import { registerOTel } from '@vercel/otel'

export function register() {
  registerOTel('next-app')
}
```

----------------------------------------

TITLE: Forwarding Authorization Header in Next.js Server Component
DESCRIPTION: This example demonstrates how to retrieve the 'authorization' header using the `headers` function and then forward it in a `fetch` request within a Next.js Server Component. It illustrates a common pattern for authenticating API calls.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/headers.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import { headers } from 'next/headers'

export default async function Page() {
  const authorization = (await headers()).get('authorization')
  const res = await fetch('...', {
    headers: { authorization }, // Forward the authorization header
  })
  const user = await res.json()

  return <h1>{user.name}</h1>
}
```

----------------------------------------

TITLE: Creating Next.js App with npx
DESCRIPTION: This command uses `npx` to bootstrap a new Next.js application named `basic-css-app` based on the `basic-css` example. It's a common way to quickly set up Next.js projects using npm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/basic-css/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example basic-css basic-css-app
```

----------------------------------------

TITLE: Using Tailwind CSS Classes in a Page Component (App Router - JavaScript)
DESCRIPTION: After installing and configuring Tailwind CSS, you can directly use its utility classes within your JSX components. This example demonstrates applying `text-3xl`, `font-bold`, and `underline` classes to an `<h1>` element in an App Router page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Nesting Functional Components with Next.js Link and React.forwardRef
DESCRIPTION: When a functional component is used as a child of the Next.js `Link` component, it's essential to use `passHref` and `legacyBehavior` props on `Link`. Additionally, the child component must be wrapped with `React.forwardRef` to correctly pass the `href`, `onClick`, and `ref` props down to the underlying DOM element, ensuring proper navigation and event handling. This pattern applies to both App Router and Pages Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_21

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'
import React from 'react'

// Define the props type for MyButton
interface MyButtonProps {
  onClick?: React.MouseEventHandler<HTMLAnchorElement>
  href?: string
}

// Use React.ForwardRefRenderFunction to properly type the forwarded ref
const MyButton: React.ForwardRefRenderFunction<
  HTMLAnchorElement,
  MyButtonProps
> = ({ onClick, href }, ref) => {
  return (
    <a href={href} onClick={onClick} ref={ref}>
      Click Me
    </a>
  )
}

// Use React.forwardRef to wrap the component
const ForwardedMyButton = React.forwardRef(MyButton)

export default function Page() {
  return (
    <Link href="/about" passHref legacyBehavior>
      <ForwardedMyButton />
    </Link>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'
import React from 'react'

// `onClick`, `href`, and `ref` need to be passed to the DOM element
// for proper handling
const MyButton = React.forwardRef(({ onClick, href }, ref) => {
  return (
    <a href={href} onClick={onClick} ref={ref}>
      Click Me
    </a>
  )
})

// Add a display name for the component (useful for debugging)
MyButton.displayName = 'MyButton'

export default function Page() {
  return (
    <Link href="/about" passHref legacyBehavior>
      <MyButton />
    </Link>
  )
}
```

----------------------------------------

TITLE: Link to Dynamic Route Segments in Next.js App Router
DESCRIPTION: Demonstrates how to construct links to dynamic route segments (e.g., `app/blog/[slug]/page.js`) within the Next.js App Router. This involves using JavaScript template literals to embed dynamic values into the `href` prop of the `Link` component, enabling programmatic link generation for lists of items.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Page({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Fetching Data with SWR in React
DESCRIPTION: This snippet illustrates client-side data fetching using the SWR React Hook library. It defines a `fetcher` function and uses `useSWR` to fetch data from `/api/profile-data`, leveraging SWR's built-in caching and revalidation. It handles error and loading states gracefully.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/05-client-side.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import useSWR from 'swr'

const fetcher = (...args) => fetch(...args).then((res) => res.json())

function Profile() {
  const { data, error } = useSWR('/api/profile-data', fetcher)

  if (error) return <div>Failed to load</div>
  if (!data) return <div>Loading...</div>

  return (
    <div>
      <h1>{data.name}</h1>
      <p>{data.bio}</p>
    </div>
  )
}
```

----------------------------------------

TITLE: Next.js Route Groups and Private Folder Conventions
DESCRIPTION: Specifies the conventions for organizing routes into groups without affecting the URL path and for creating private folders that are excluded from routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
`(folder)`: Group routes without affecting routing
`_folder`: Opt folder and all child segments out of routing
```

----------------------------------------

TITLE: Consume JSON Request Payload in Next.js Route Handler
DESCRIPTION: This snippet demonstrates how to parse an incoming JSON request body using request.json() in a Next.js Route Handler. It shows a basic POST endpoint that echoes the received JSON data back as a response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
export async function POST(request: Request) {
  const res = await request.json()
  return Response.json({ res })
}
```

LANGUAGE: js
CODE:
```
export async function POST(request) {
  const res = await request.json()
  return Response.json({ res })
}
```

----------------------------------------

TITLE: Apply Shared Open Graph Image to Next.js Home Page
DESCRIPTION: Imports and spreads the `openGraphImage` constant into the metadata of `app/page.js`. This allows the home page to use the shared image while defining its own unique title.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_50

LANGUAGE: jsx
CODE:
```
import { openGraphImage } from './shared-metadata'

export const metadata = {
  openGraph: {
    ...openGraphImage,
    title: 'Home',
  },
}
```

----------------------------------------

TITLE: Read Current Pathname with usePathname Hook
DESCRIPTION: Demonstrates how to use the `usePathname` hook in a Client Component to retrieve and display the current URL's pathname. This hook is essential for client-side routing awareness.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-pathname.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const pathname = usePathname()\n  return <p>Current pathname: {pathname}</p>\n}
```

LANGUAGE: jsx
CODE:
```
'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const pathname = usePathname()\n  return <p>Current pathname: {pathname}</p>\n}
```

----------------------------------------

TITLE: Encrypt and Decrypt User Sessions with Jose in Next.js
DESCRIPTION: This code snippet provides functions for encrypting and decrypting session payloads using the Jose library. The `encrypt` function signs a JWT with a given payload, setting an expiration time of 7 days. The `decrypt` function verifies the session JWT and extracts the payload. Both functions are marked with `server-only` to ensure they execute exclusively on the server, enhancing security. It requires `jose` and `server-only` packages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_14

LANGUAGE: TypeScript
CODE:
```
import 'server-only'
import { SignJWT, jwtVerify } from 'jose'
import { SessionPayload } from '@/app/lib/definitions'

const secretKey = process.env.SESSION_SECRET
const encodedKey = new TextEncoder().encode(secretKey)

export async function encrypt(payload: SessionPayload) {
  return new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(encodedKey)
}

export async function decrypt(session: string | undefined = '') {
  try {
    const { payload } = await jwtVerify(session, encodedKey, {
      algorithms: ['HS256'],
    })
    return payload
  } catch (error) {
    console.log('Failed to verify session')
  }
}
```

LANGUAGE: JavaScript
CODE:
```
import 'server-only'
import { SignJWT, jwtVerify } from 'jose'

const secretKey = process.env.SESSION_SECRET
const encodedKey = new TextEncoder().encode(secretKey)

export async function encrypt(payload) {
  return new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(encodedKey)
}

export async function decrypt(session) {
  try {
    const { payload } = await jwtVerify(session, encodedKey, {
      algorithms: ['HS256'],
    })
    return payload
  } catch (error) {
    console.log('Failed to verify session')
  }
}
```

----------------------------------------

TITLE: Next.js: Generate Static Params for Multiple Dynamic Segments
DESCRIPTION: This example demonstrates how to generate static parameters for routes containing multiple dynamic segments, such as `[category]/[product]`. The `generateStaticParams` function fetches data and constructs an array of objects, each providing values for both dynamic segments, ensuring proper static generation from the lowest-level page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-static-params.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
// Generate segments for both [category] and [product]
export async function generateStaticParams() {
  const products = await fetch('https://.../products').then((res) => res.json())

  return products.map((product) => ({
    category: product.category.slug,
    product: product.id,
  }))
}

export default function Page({
  params,
}: {
  params: Promise<{ category: string; product: string }>
}) {
  // ...
}
```

LANGUAGE: jsx
CODE:
```
// Generate segments for both [category] and [product]
export async function generateStaticParams() {
  const products = await fetch('https://.../products').then((res) => res.json())

  return products.map((product) => ({
    category: product.category.slug,
    product: product.id,
  }))
}

export default function Page({ params }) {
  // ...
}
```

----------------------------------------

TITLE: Revalidating Cache Tag in Next.js Route Handler
DESCRIPTION: Illustrates how to implement `revalidateTag` within a Next.js Route Handler (API route) to programmatically revalidate cached data based on a query parameter. This is useful for triggering cache invalidation from external systems or client-side requests, ensuring that the cache is updated when specific data changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidateTag.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import type { NextRequest } from 'next/server'
import { revalidateTag } from 'next/cache'

export async function GET(request: NextRequest) {
  const tag = request.nextUrl.searchParams.get('tag')
  revalidateTag(tag)
  return Response.json({ revalidated: true, now: Date.now() })
}
```

LANGUAGE: js
CODE:
```
import { revalidateTag } from 'next/cache'

export async function GET(request) {
  const tag = request.nextUrl.searchParams.get('tag')
  revalidateTag(tag)
  return Response.json({ revalidated: true, now: Date.now() })
}
```

----------------------------------------

TITLE: Cache a GET Route Handler in Next.js
DESCRIPTION: Illustrates how to enable static caching for a GET Route Handler in Next.js by setting `export const dynamic = 'force-static'`. The example fetches data from an external API and returns it as JSON, demonstrating a common use case for cached GET requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

LANGUAGE: js
CODE:
```
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

----------------------------------------

TITLE: Configure Route Segment Options in Next.js Route Handler
DESCRIPTION: Provides an example of setting various route segment configuration options (`dynamic`, `dynamicParams`, `revalidate`, `fetchCache`, `runtime`, `preferredRegion`) directly within a Next.js Route Handler file. These options control caching behavior, data fetching, and runtime environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_22

LANGUAGE: ts
CODE:
```
export const dynamic = 'auto'
export const dynamicParams = true
export const revalidate = false
export const fetchCache = 'auto'
export const runtime = 'nodejs'
export const preferredRegion = 'auto'
```

LANGUAGE: js
CODE:
```
export const dynamic = 'auto'
export const dynamicParams = true
export const revalidate = false
export const fetchCache = 'auto'
export const runtime = 'nodejs'
export const preferredRegion = 'auto'
```

----------------------------------------

TITLE: Define Next.js Middleware for Redirecting Requests
DESCRIPTION: This example demonstrates how to define a basic Next.js Middleware function that redirects incoming requests to a specified URL. It also shows how to configure a matcher to apply the middleware to specific paths.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import { NextResponse, NextRequest } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request: NextRequest) {
  return NextResponse.redirect(new URL('/home', request.url))
}

export const config = {
  matcher: '/about/:path*'
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

// This function can be marked `async` if using `await` inside
export function middleware(request) {
  return NextResponse.redirect(new URL('/home', request.url))
}

export const config = {
  matcher: '/about/:path*'
}
```

----------------------------------------

TITLE: Scroll to ID with Next.js Link Component
DESCRIPTION: Explains how to use the `Link` component to navigate to a specific `id` on a page. By appending a hash (`#`) followed by the ID to the `href` prop, the browser will scroll to the corresponding element, leveraging the underlying `<a>` tag behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_17

LANGUAGE: jsx
CODE:
```
<Link href="/dashboard#settings">Settings</Link>

// Output
<a href="/dashboard#settings">Settings</a>
```

----------------------------------------

TITLE: Install eslint-config-prettier
DESCRIPTION: This snippet provides commands to install `eslint-config-prettier` using various package managers (npm, yarn, pnpm, bun). This package helps resolve conflicts between ESLint's formatting rules and Prettier's formatting.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/03-eslint.mdx#_snippet_6

LANGUAGE: Bash
CODE:
```
npm install --save-dev eslint-config-prettier
```

LANGUAGE: Bash
CODE:
```
yarn add --dev eslint-config-prettier
```

LANGUAGE: Bash
CODE:
```
pnpm add --save-dev eslint-config-prettier
```

LANGUAGE: Bash
CODE:
```
bun add --dev eslint-config-prettier
```

----------------------------------------

TITLE: Running Next.js Development Server with npm
DESCRIPTION: These commands first install project dependencies using `npm install` and then start the Next.js development server with `npm run dev`. This allows local development and testing of the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Running Next.js Development Server with NPM or Yarn
DESCRIPTION: This snippet provides commands to install project dependencies and then start the Next.js development server. It shows options for both npm and Yarn, allowing developers to run the application locally and view the integrated ButterCMS content.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#_snippet_5

LANGUAGE: Bash
CODE:
```
npm install
npm run dev

# or

yarn install
yarn dev
```

----------------------------------------

TITLE: Installing Dependencies and Running Next.js Development Server
DESCRIPTION: These commands are executed within the Next.js application directory. `npm install` fetches all necessary project dependencies, and `npm run dev` starts the Next.js development server, making the application accessible locally for development and testing purposes.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Define Environment Variables in .env File
DESCRIPTION: This snippet shows how to define environment variables in a `.env` file, which Next.js automatically loads into `process.env` for server-side access.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_0

LANGUAGE: txt
CODE:
```
DB_HOST=localhost
DB_USER=myuser
DB_PASS=mypassword
```

----------------------------------------

TITLE: Memoizing Fetch Requests for Data Fetching
DESCRIPTION: This snippet demonstrates how Next.js automatically memoizes `fetch` calls. When `getItem()` is called multiple times with the same URL and options within a single React render pass, the network request is only made once, and subsequent calls retrieve the data from an in-memory cache.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
async function getItem() {
  // The `fetch` function is automatically memoized and the result
  // is cached
  const res = await fetch('https://.../item/1')
  return res.json()
}

// This function is called twice, but only executed the first time
const item = await getItem() // cache MISS

// The second call could be anywhere in your route
const item = await getItem() // cache HIT
```

LANGUAGE: jsx
CODE:
```
async function getItem() {
  // The `fetch` function is automatically memoized and the result
  // is cached
  const res = await fetch('https://.../item/1')
  return res.json()
}

// This function is called twice, but only executed the first time
const item = await getItem() // cache MISS

// The second call could be anywhere in your route
const item = await getItem() // cache HIT
```

----------------------------------------

TITLE: Guard Server-Side Time Evaluation with `connection()` in Next.js
DESCRIPTION: When server-side rendering decisions must be based on the current time at request time, this pattern shows how to use `await connection()` from `next/server`. This explicitly tells Next.js that the component's rendering is dynamic and depends on request-time data, preventing static pre-rendering. A `Suspense` boundary is required above the component to provide a fallback UI during the initial static HTML generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-current-time.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const currentTime = Date.now()
  if (currentTime > someTriggerDate) {
    return <SpecialBanner />
  } else {
    return <NormalBanner />
  }
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import { connection } from 'next/server'

async function BannerSkeleton() {
  ...
}

export default async function Page() {
  return <Suspense fallback={<BannerSkeleton />}>
    <DynamicBanner />
  </Suspense>
}

async function DynamicBanner() {
  await connection();
  const currentTime = Date.now();
  if (currentTime > someTriggerDate) {
    return <SpecialBanner />
  } else {
    return <NormalBanner />
  }
}
```

----------------------------------------

TITLE: Configure Root Layout with Navigation Blocker Provider
DESCRIPTION: This snippet demonstrates how to set up the root layout of a Next.js application to include the `NavigationBlockerProvider`. Wrapping the application's children with this provider enables the functionality to prompt users before navigating away when there are unsaved changes, enhancing user experience for forms or other interactive elements.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_35

LANGUAGE: jsx
CODE:
```
import { NavigationBlockerProvider } from './contexts/navigation-blocker'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <NavigationBlockerProvider>{children}</NavigationBlockerProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Render Blog Navigation in Next.js Layout
DESCRIPTION: Shows how a Next.js layout can render a list of navigation links for blog posts. It asynchronously fetches post data using `getPosts` and then maps over the results to create `NavLink` components, demonstrating how layouts can structure content and integrate child components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
import { NavLink } from './nav-link'
import getPosts from './get-posts'

export default async function Layout({
  children,
}: {
  children: React.ReactNode
}) {
  const featuredPosts = await getPosts()
  return (
    <div>
      {featuredPosts.map((post) => (
        <div key={post.id}>
          <NavLink slug={post.slug}>{post.title}</NavLink>
        </div>
      ))}
      <div>{children}</div>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { NavLink } from './nav-link'
import getPosts from './get-posts'

export default async function Layout({ children }) {
  const featuredPosts = await getPosts()
  return (
    <div>
      {featuredPosts.map((post) => (
        <div key={post.id}>
          <NavLink slug={post.slug}>{post.title}</NavLink>
        </div>
      ))}
      <div>{children}</div>
    </div>
  )
}
```

----------------------------------------

TITLE: Next.js Conditional Rewrites with Header, Cookie, Query, and Host Matching
DESCRIPTION: Example configurations for `next.config.js` demonstrating how to apply rewrites conditionally based on the presence or absence of specific headers, cookies, query parameters, or hostnames. It includes examples for exact value matching and using named capture groups in values.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/rewrites.mdx#_snippet_12

LANGUAGE: js
CODE:
```
module.exports = {
  async rewrites() {
    return [
      // if the header `x-rewrite-me` is present,
      // this rewrite will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-rewrite-me',
          },
        ],
        destination: '/another-page',
      },
      // if the header `x-rewrite-me` is not present,
      // this rewrite will be applied
      {
        source: '/:path*',
        missing: [
          {
            type: 'header',
            key: 'x-rewrite-me',
          },
        ],
        destination: '/another-page',
      },
      // if the source, query, and cookie are matched,
      // this rewrite will be applied
      {
        source: '/specific/:path*',
        has: [
          {
            type: 'query',
            key: 'page',
            // the page value will not be available in the
            // destination since value is provided and doesn't
            // use a named capture group e.g. (?<page>home)
            value: 'home',
          },
          {
            type: 'cookie',
            key: 'authorized',
            value: 'true',
          },
        ],
        destination: '/:path*/home',
      },
      // if the header `x-authorized` is present and
      // contains a matching value, this rewrite will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'header',
            key: 'x-authorized',
            value: '(?<authorized>yes|true)',
          },
        ],
        destination: '/home?authorized=:authorized',
      },
      // if the host is `example.com`,
      // this rewrite will be applied
      {
        source: '/:path*',
        has: [
          {
            type: 'host',
            value: 'example.com',
          },
        ],
        destination: '/another-page',
      },
    ]
  },
}
```

----------------------------------------

TITLE: NextResponse.json() Method API
DESCRIPTION: Static method to create a `NextResponse` instance with a JSON body. Allows specifying a custom HTTP status code.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_10

LANGUAGE: APIDOC
CODE:
```
`static json(body: any, init?: ResponseInit)`
  Parameters:
    `body`: The JavaScript object to be serialized as JSON.
    `init` (optional): An object containing response options like `status` and `headers`.
  Returns: `NextResponse`
  Description: Produce a response with the given JSON body.
```

----------------------------------------

TITLE: Memoize Data Fetching with React Cache
DESCRIPTION: Demonstrates how to use React's `cache` function to memoize data requests, ensuring that the `getPost` function executes only once even when called multiple times (e.g., for metadata and page content). This prevents duplicate database queries and improves performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/14-metadata-and-og-images.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { cache } from 'react'
import { db } from '@/app/lib/db'

// getPost will be used twice, but execute only once
export const getPost = cache(async (slug: string) => {
  const res = await db.query.posts.findFirst({ where: eq(posts.slug, slug) })
  return res
})
```

LANGUAGE: jsx
CODE:
```
import { cache } from 'react'
import { db } from '@/app/lib/db'

// getPost will be used twice, but execute only once
export const getPost = cache(async (slug) => {
  const res = await db.query.posts.findFirst({ where: eq(posts.slug, slug) })
  return res
})
```

----------------------------------------

TITLE: Define a cached component with non-serializable children prop
DESCRIPTION: This snippet illustrates how to define a cached React component that accepts a non-serializable `children` prop. The `use cache` directive ensures the component's return value is cached, while allowing uncached content to be nested within via the `children` prop, which is filled at request time.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/01-directives/use-cache.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
function CachedComponent({ children }: { children: ReactNode }) {
  'use cache'
  return <div>{children}</div>
}
```

LANGUAGE: jsx
CODE:
```
function CachedComponent({ children }) {
  'use cache'
  return <div>{children}</div>
}
```

----------------------------------------

TITLE: Define Multiline Environment Variables in .env
DESCRIPTION: This snippet illustrates how to define multiline environment variables in a `.env` file, either by using actual line breaks or by escaping newlines with `\n` within double quotes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/environment-variables.mdx#_snippet_3

LANGUAGE: txt
CODE:
```
# .env

# you can write with line breaks
PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----
...
Kh9NV...
...
-----END DSA PRIVATE KEY-----"

# or with `\n` inside double quotes
PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY----- \nKh9NV...\n-----END DSA PRIVATE KEY-----\n"
```

----------------------------------------

TITLE: Configure next/image remotePatterns with URL for Next.js 15.3.0+
DESCRIPTION: This snippet shows how to configure `next/image` to allow images from specific remote hosts using `remotePatterns` with `URL` objects in `next.config.js` for Next.js versions 15.3.0 and newer. This is the recommended approach for current Next.js versions when using external image sources.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-image-unconfigured-host.mdx#_snippet_0

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    remotePatterns: [new URL('https://assets.example.com/account123/**')],
  },
}
```

----------------------------------------

TITLE: Rewriting URL with Next.js Middleware using NextURL.clone() - TypeScript
DESCRIPTION: This snippet demonstrates the recommended way to fix the relative URL error in Next.js Middleware. It clones the `request.nextUrl` object, mutates its `pathname` to the desired destination, and then uses `NextResponse.rewrite()` with the resulting absolute URL. This method correctly handles Next.js configurations like `basePath` or `locale`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-relative-urls.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { NextRequest } from 'next/server'
import { NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl.clone()
  url.pathname = '/dest'
  return NextResponse.rewrite(url)
}
```

----------------------------------------

TITLE: Configure Authentication Context Provider in Next.js Root Layout
DESCRIPTION: This snippet demonstrates how to wrap a Next.js `RootLayout` with a `ContextProvider` from an authentication library. While effective for Client Components, it's important to note that child Server Components rendered on the server will not have access to the session data provided by this context.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_32

LANGUAGE: typescript
CODE:
```
import { ContextProvider } from 'auth-lib'

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <ContextProvider>{children}</ContextProvider>
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Next.js App Router Routing File Conventions
DESCRIPTION: Details the specific file conventions used within the Next.js App Router for defining layouts, pages, loading states, error boundaries, API routes, and parallel routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
layout: .js .jsx .tsx | Layout
page: .js .jsx .tsx | Page
loading: .js .jsx .tsx | Loading UI
not-found: .js .jsx .tsx | Not found UI
error: .js .jsx .tsx | Error UI
global-error: .js .jsx .tsx | Global error UI
route: .js .ts | API endpoint
template: .js .jsx .tsx | Re-rendered layout
default: .js .jsx .tsx | Parallel route fallback page
```

----------------------------------------

TITLE: Generating Next.js Production Build
DESCRIPTION: The `next build` command creates an optimized production build of a Next.js application. This step is essential before running `next export` or deploying to a production environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-export-no-build-id.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
next build
```

----------------------------------------

TITLE: Updating URL Query Parameters in Next.js Client Components
DESCRIPTION: This code snippet demonstrates how to dynamically update URL query parameters (`searchParams`) within a Next.js client component. It utilizes the `useRouter` hook for programmatic navigation and the `Link` component for declarative navigation, both leveraging a `createQueryString` utility function to merge new parameters with existing ones. The updated `searchParams` are then reflected in the `page.js` prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-search-params.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter, usePathname, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { useCallback } from 'react'

export default function ExampleClientComponent() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  // Get a new searchParams string by merging the current
  // searchParams with a provided key/value pair
  const createQueryString = useCallback(
    (name: string, value: string) => {
      const params = new URLSearchParams(searchParams.toString())
      params.set(name, value)

      return params.toString()
    },
    [searchParams]
  )

  return (
    <>
      <p>Sort By</p>

      {/* using useRouter */}
      <button
        onClick={() => {
          // <pathname>?sort=asc
          router.push(pathname + '?' + createQueryString('sort', 'asc'))
        }}
      >
        ASC
      </button>

      {/* using <Link> */}
      <Link
        href={
          // <pathname>?sort=desc
          pathname + '?' + createQueryString('sort', 'desc')
        }
      >
        DESC
      </Link>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useRouter, usePathname, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { useCallback } from 'react'

export default function ExampleClientComponent() {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()

  // Get a new searchParams string by merging the current
  // searchParams with a provided key/value pair
  const createQueryString = useCallback(
    (name, value) => {
      const params = new URLSearchParams(searchParams)
      params.set(name, value)

      return params.toString()
    },
    [searchParams]
  )

  return (
    <>
      <p>Sort By</p>

      {/* using useRouter */}
      <button
        onClick={() => {
          // <pathname>?sort=asc
          router.push(pathname + '?' + createQueryString('sort', 'asc'))
        }}
      >
        ASC
      </button>

      {/* using <Link> */}
      <Link
        href={
          // <pathname>?sort=desc
          pathname + '?' + createQueryString('sort', 'desc')
        }
      >
        DESC
      </Link>
    </>
  )
}
```

----------------------------------------

TITLE: Fixing Dynamic API Access in Synchronous Client Components
DESCRIPTION: Shows how to correctly unwrap the Promise returned by dynamic APIs, like `params`, within a synchronous Client Component using `React.use()`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
'use client'
import * as React from 'react'

function Page({ params }) {
  // asynchronous access of `params.id`.
  const { id } = React.use(params)
  return <p>ID: {id}</p>
}
```

----------------------------------------

TITLE: Deprecated Middleware Response Patterns in Next.js v12.2+
DESCRIPTION: Illustrates various ways Middleware previously returned a response body (e.g., text, stream, JSON, NextResponse.json()) which are no longer supported as of Next.js v12.2+. These patterns will now cause an error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/returning-response-body-in-middleware.mdx#_snippet_0

LANGUAGE: js
CODE:
```
new Response('a text value')
new Response(streamOrBuffer)
new Response(JSON.stringify(obj), { headers: 'application/json' })
NextResponse.json()
```

----------------------------------------

TITLE: Configuring Edge Runtime for Next.js API Routes (JavaScript)
DESCRIPTION: Exports the `runtime` constant set to 'edge', configuring the Next.js API route to run on the Edge Runtime. This optimizes the route for global distribution and low-latency execution, leveraging serverless edge capabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
export const runtime = "edge";
```

----------------------------------------

TITLE: Incorrect Client-Side Usage of Node.js Module in React
DESCRIPTION: This snippet demonstrates an incorrect attempt to use a Node.js-specific module (ioredis) directly within a React component's `useEffect` hook. This will result in a 'Module Not Found' error when the code runs in the browser, as Node.js modules are not available client-side.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
// Redis is a Node.js specific library that can't run in the browser
// Trying to use it in code that runs on both Node.js and the browser will result in a module not found error for modules that ioredis relies on
// If you run into such an error it's recommended to move the code to `getStaticProps` or `getServerSideProps` as those methods guarantee that the code is only run in Node.js.
import redis from '../lib/redis'
import { useEffect, useState } from 'react'

export default function Home() {
  const [message, setMessage] = useState()
  useEffect(() => {
    redis.get('message').then((result) => {
      setMessage(result)
    })
  }, [])
  return <h1>{message}</h1>
}
```

----------------------------------------

TITLE: Prevent modal rendering when inactive in Next.js Parallel Route
DESCRIPTION: Creates a `default.js` (or `default.tsx`) file within the `@auth` Parallel Route slot. Returning `null` ensures that the modal content is not rendered by default when the parallel route is inactive, allowing the main page content to be displayed.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export default function Default() {
  return null
}
```

LANGUAGE: jsx
CODE:
```
export default function Default() {
  return null
}
```

----------------------------------------

TITLE: Incorrect `<a>` Usage for Next.js Internal Navigation
DESCRIPTION: This snippet illustrates the incorrect practice of using a standard `<a>` HTML element to navigate to an internal Next.js page. This approach causes a full-page refresh, hindering the single-page application experience that Next.js aims to provide.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-html-link-for-pages.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
function Home() {
  return (
    <div>
      <a href="/about">About Us</a>
    </div>
  )
}
```

----------------------------------------

TITLE: Load Localization Dictionary Function
DESCRIPTION: Provides a server-only asynchronous function to load the appropriate localization dictionary (English or Dutch) based on the requested locale. This function ensures that translation files are only processed on the server, minimizing client-side bundle size.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_snippet_5

LANGUAGE: ts
CODE:
```
import 'server-only'

const dictionaries = {
  en: () => import('./dictionaries/en.json').then((module) => module.default),
  nl: () => import('./dictionaries/nl.json').then((module) => module.default),
}

export const getDictionary = async (locale: 'en' | 'nl') =>
  dictionaries[locale]()
```

LANGUAGE: js
CODE:
```
import 'server-only'

const dictionaries = {
  en: () => import('./dictionaries/en.json').then((module) => module.default),
  nl: () => import('./dictionaries/nl.json').then((module) => module.default),
}

export const getDictionary = async (locale) => dictionaries[locale]()
```

----------------------------------------

TITLE: Configure Path Parameter Matching in Next.js Redirects
DESCRIPTION: This snippet shows how to use path parameters (e.g., `:slug`) in the `source` path to match specific segments of an incoming URL. The matched parameter's value can then be reused in the `destination` path, enabling dynamic redirects based on URL segments. This example redirects '/old-blog/:slug' to '/news/:slug' permanently.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/redirects.mdx#_snippet_2

LANGUAGE: js
CODE:
```
module.exports = {
  async redirects() {
    return [
      {
        source: '/old-blog/:slug',
        destination: '/news/:slug', // Matched parameters can be used in the destination
        permanent: true,
      },
    ]
  },
}
```

----------------------------------------

TITLE: Configure CORS Headers in Next.js for API Endpoints
DESCRIPTION: Shows how to set Cross-Origin Resource Sharing (CORS) headers in Next.js, specifically `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers`, to control which origins can access API endpoints.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_12

LANGUAGE: JavaScript
CODE:
```
async headers() {
    return [
      {
        source: "/api/:path*",
        headers: [
          {
            key: "Access-Control-Allow-Origin",
            value: "*", // Set your origin
          },
          {
            key: "Access-Control-Allow-Methods",
            value: "GET, POST, PUT, DELETE, OPTIONS",
          },
          {
            key: "Access-Control-Allow-Headers",
            value: "Content-Type, Authorization",
          },
        ],
      },
    ];
  },
```

----------------------------------------

TITLE: Configuring Alt Text for Open Graph and Twitter Images
DESCRIPTION: Exporting an `alt` constant from your image route sets the alternative text for the generated image. This text is then included in the `<meta property="og:image:alt">` tag in the HTML head, improving accessibility and SEO.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/01-metadata/opengraph-image.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
export const alt = 'My images alt text'

export default function Image() {}
```

LANGUAGE: jsx
CODE:
```
export const alt = 'My images alt text'

export default function Image() {}
```

LANGUAGE: html
CODE:
```
<meta property="og:image:alt" content="My images alt text" />
```

----------------------------------------

TITLE: Integrate Google Variable Font in Next.js App Router
DESCRIPTION: Demonstrates how to import and use a Google variable font, such as Inter, in `app/layout.tsx` or `app/layout.js` for the Next.js App Router. The font is loaded without specifying weight, and its `className` is applied to the `<html>` tag for global application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/font.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Inter } from 'next/font/google'

// If loading a variable font, you don't need to specify the font weight
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
})

export default function RootLayout({ children }) {
  return (
    <html lang="en" className={inter.className}>
      <body>{children}</body>
    </html>
  )
}
```

----------------------------------------

TITLE: Manage Cookies in Next.js Middleware
DESCRIPTION: This snippet demonstrates how to interact with cookies in Next.js middleware. It shows how to retrieve cookies from an incoming `NextRequest` using `get`, `getAll`, `has`, and `delete`, and how to set cookies on an outgoing `NextResponse` using `set`. The `RequestCookies` and `ResponseCookies` APIs are utilized for these operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_17

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Assume a "Cookie:nextjs=fast" header to be present on the incoming request
  // Getting cookies from the request using the `RequestCookies` API
  let cookie = request.cookies.get('nextjs')
  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }
  const allCookies = request.cookies.getAll()
  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]

  request.cookies.has('nextjs') // => true
  request.cookies.delete('nextjs')
  request.cookies.has('nextjs') // => false

  // Setting cookies on the response using the `ResponseCookies` API
  const response = NextResponse.next()
  response.cookies.set('vercel', 'fast')
  response.cookies.set({
    name: 'vercel',
    value: 'fast',
    path: '/',
  })
  cookie = response.cookies.get('vercel')
  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }
  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.

  return response
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

export function middleware(request) {
  // Assume a "Cookie:nextjs=fast" header to be present on the incoming request
  // Getting cookies from the request using the `RequestCookies` API
  let cookie = request.cookies.get('nextjs')
  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }
  const allCookies = request.cookies.getAll()
  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]

  request.cookies.has('nextjs') // => true
  request.cookies.delete('nextjs')
  request.cookies.has('nextjs') // => false

  // Setting cookies on the response using the `ResponseCookies` API
  const response = NextResponse.next()
  response.cookies.set('vercel', 'fast')
  response.cookies.set({
    name: 'vercel',
    value: 'fast',
    path: '/',
  })
  cookie = response.cookies.get('vercel')
  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }
  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/test` header.

  return response
}
```

----------------------------------------

TITLE: Access URL Search Parameters (searchParams) in Next.js Page
DESCRIPTION: The `searchParams` prop is a promise that resolves to an object containing the search parameters of the current URL. It's a dynamic API, meaning its values are not known ahead of time, and its usage opts the page into dynamic rendering. Access requires `async/await` or React's `use` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
export default async function Page({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}) {
  const filters = (await searchParams).filters
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page({ searchParams }) {
  const filters = (await searchParams).filters
}
```

----------------------------------------

TITLE: Type Safety for `generateMetadata` with Parent Metadata
DESCRIPTION: This example demonstrates how to type the `parent` argument in the `generateMetadata` function using `ResolvingMetadata`. This allows you to access and merge metadata from parent layouts while maintaining full type safety, which is crucial for complex metadata hierarchies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_37

LANGUAGE: TSX
CODE:
```
import type { Metadata, ResolvingMetadata } from 'next'

export async function generateMetadata(
  { params, searchParams }: Props,
  parent: ResolvingMetadata
): Promise<Metadata> {
  return {
    title: 'Next.js',
  }
}
```

----------------------------------------

TITLE: Performing HTTP Redirects with NextResponse (JavaScript)
DESCRIPTION: The static `redirect` method creates a `NextResponse` that performs an HTTP redirect. It accepts a URL and an optional `init` object or status code. The method validates the provided status code against a predefined set of valid redirect codes (301, 302, 303, 307, 308) and sets the `Location` header to the validated URL. This is essential for server-side redirects in Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_29

LANGUAGE: JavaScript
CODE:
```
    static redirect(url, init) {
        const status = typeof init === 'number' ? init : (init == null ? void 0 : init.status) ?? 307;
        if (!REDIRECTS.has(status)) {
            throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        const initObj = typeof init === 'object' ? init : {};
        const headers = new Headers(initObj == null ? void 0 : initObj.headers);
        headers.set('Location', validateURL(url));
        return new NextResponse(null, {
            ...initObj,
            headers,
            status
        });
    }
```

----------------------------------------

TITLE: Copying Environment Variables File (Bash)
DESCRIPTION: This command copies the example environment variables file `.env.local.example` to `.env.local`. The `.env.local` file is used to store sensitive configuration like API URLs and is typically ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Running Development Server for Next.js (Bash)
DESCRIPTION: This snippet provides common commands to start the development server for a Next.js application. Developers can choose their preferred package manager (npm, yarn, pnpm, or bun) to run the application locally and enable hot-reloading for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Create Next.js App Router home page
DESCRIPTION: Set up the initial home page component for the Next.js App Router, which will be rendered at the root path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

LANGUAGE: jsx
CODE:
```
export default function Page() {
  return <h1>Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Pass Arguments to Server Actions using Function.bind in Client Components
DESCRIPTION: This example shows how to pass extra arguments, such as a `userId`, to a server action from a Client Component. The `Function.prototype.bind` method is used to pre-fill the first argument of the `updateUser` server function, allowing the form's `action` to invoke it with the bound argument.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/forms.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
'use client'

import { updateUser } from './actions'

export function UserProfile({ userId }: { userId: string }) {
  const updateUserWithId = updateUser.bind(null, userId)

  return (
    <form action={updateUserWithId}>
      <input type="text" name="name" />
      <button type="submit">Update User Name</button>
    </form>
  )
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { updateUser } from './actions'

export function UserProfile({ userId }) {
  const updateUserWithId = updateUser.bind(null, userId)

  return (
    <form action={updateUserWithId}>
      <input type="text" name="name" />
      <button type="submit">Update User Name</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Accessing IP Address with `@vercel/functions` in Middleware (TS)
DESCRIPTION: This snippet demonstrates how to obtain the client's IP address from a `NextRequest` within a Next.js middleware using the `ipAddress` function from the `@vercel/functions` package. This replaces the removed `ip` property on `NextRequest`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_27

LANGUAGE: ts
CODE:
```
import { ipAddress } from '@vercel/functions'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  const ip = ipAddress(request)

  // ...
}
```

----------------------------------------

TITLE: Access Dynamic Route Parameters in Async Layouts
DESCRIPTION: This snippet illustrates how to access dynamic route parameters (`params`) within an asynchronous Next.js layout component. The `params` prop is a promise that resolves to an object containing the route segments. The example shows destructuring the `team` parameter and using it to display dynamic content in the header.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
export default async function DashboardLayout({
  children,
  params,
}: {
  children: React.ReactNode
  params: Promise<{ team: string }>
}) {
  const { team } = await params

  return (
    <section>
      <header>
        <h1>Welcome to {team}'s Dashboard</h1>
      </header>
      <main>{children}</main>
    </section>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function DashboardLayout({ children, params }) {
  const { team } = await params

  return (
    <section>
      <header>
        <h1>Welcome to {team}'s Dashboard</h1>
      </header>
      <main>{children}</main>
    </section>
  )
}
```

----------------------------------------

TITLE: Dynamically Load External Library (fuse.js) in Next.js App Router
DESCRIPTION: Illustrates how to dynamically load an external JavaScript library like `fuse.js` on demand within a Next.js App Router component. The library is imported only when needed (e.g., on user input), reducing the initial bundle size. The component uses the `'use client'` directive.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/lazy-loading.mdx#_snippet_3

LANGUAGE: JSX
CODE:
```
'use client'

import { useState } from 'react'

const names = ['Tim', 'Joe', 'Bel', 'Lee']

export default function Page() {
  const [results, setResults] = useState()

  return (
    <div>
      <input
        type="text"
        placeholder="Search"
        onChange={async (e) => {
          const { value } = e.currentTarget
          // Dynamically load fuse.js
          const Fuse = (await import('fuse.js')).default
          const fuse = new Fuse(names)

          setResults(fuse.search(value))
        }}
      />
      <pre>Results: {JSON.stringify(results, null, 2)}</pre>
    </div>
  )
}
```

----------------------------------------

TITLE: Next.js useRouter refresh Hook for Cache Clearing
DESCRIPTION: Explains the `refresh` option of the `useRouter` hook, which is used to manually refresh a route. This action completely clears the Router Cache and initiates a new server request for the current route, while preserving React and browser state. It does not impact the Data or Full Route Cache.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_17

LANGUAGE: APIDOC
CODE:
```
router.refresh:
  - Purpose: Manually refresh a route.
  - Effect: Completely clears the Router Cache and makes a new request to the server for the current route.
  - Does NOT affect: Data Cache or Full Route Cache.
  - Reconciliation: Rendered result reconciled on the client while preserving React state and browser state.
  - Reference: useRouter hook API reference (/docs/app/api-reference/functions/use-router)
```

----------------------------------------

TITLE: Display User Data in Next.js Dashboard Layout
DESCRIPTION: Demonstrates how to fetch and display user data within a Next.js layout component. It imports the `getUser` function to retrieve user information and passes the user's name to a `UserName` component, showcasing data fetching directly within layouts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import { getUser } from '@/app/lib/data'
import { UserName } from '@/app/ui/user-name'

export default async function Layout({ children }) {
  const user = await getUser('1')

  return (
    <>
      <nav>
        {/* ... */}
        <UserName user={user.name} />
      </nav>
      {children}
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { getUser } from '@/app/lib/data'
import { UserName } from '@/app/ui/user-name'

export default async function Layout({ children }) {
  const user = await getUser('1')

  return (
    <>
      <nav>
        {/* ... */}
        <UserName user={user.name} />
      </nav>
      {children}
    </>
  )
}
```

----------------------------------------

TITLE: Create Client-Side React Context Provider (ThemeProvider)
DESCRIPTION: This code defines a `ThemeProvider` as a Client Component, which is necessary for using React Context in Next.js applications since Server Components do not directly support it. It creates a context and provides a value, allowing global state like a theme to be shared with descendant Client Components.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({
  children,
}: {
  children: React.ReactNode
}) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { createContext } from 'react'

export const ThemeContext = createContext({})

export default function ThemeProvider({ children }) {
  return <ThemeContext.Provider value="dark">{children}</ThemeContext.Provider>
}
```

----------------------------------------

TITLE: Revalidate Next.js Cache in Server Function
DESCRIPTION: This example demonstrates how to revalidate the Next.js cache from within a Server Function after data modifications. By calling "revalidatePath" or "revalidateTag", you ensure that updated data is reflected on the client, maintaining data consistency across the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_8

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'

export async function createPost(formData: FormData) {
  'use server'
  // Update data
  // ...

  revalidatePath('/posts')
}
```

LANGUAGE: js
CODE:
```
import { revalidatePath } from 'next/cache'

export async function createPost(formData) {
  'use server'
  // Update data
  // ...
  revalidatePath('/posts')
}
```

----------------------------------------

TITLE: Migrating from `@next/font` to `next/font` (JS)
DESCRIPTION: This snippet illustrates the migration from the deprecated `@next/font` package to the built-in `next/font` module. The change involves updating the import path for font modules, simplifying font usage within Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_23

LANGUAGE: js
CODE:
```
// Before
import { Inter } from '@next/font/google'
```

LANGUAGE: js
CODE:
```
// After
import { Inter } from 'next/font/google'
```

----------------------------------------

TITLE: Next.js Link Component `href` Prop Details
DESCRIPTION: Detailed explanation of the required `href` prop for the Next.js `<Link>` component, specifying it as the path or URL for navigation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Prop: href
  Description: The path or URL to navigate to.
  Type: String or Object
  Required: Yes
```

----------------------------------------

TITLE: Data Fetching with Default Caching in Next.js App Directory
DESCRIPTION: Demonstrates data fetching in the `app` directory using `fetch()`, which defaults to `cache: 'force-cache'`, providing similar static generation behavior to `getStaticProps`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_21

LANGUAGE: javascript
CODE:
```
// `app` directory

// This function can be named anything
async function getProjects() {
  const res = await fetch(`https://...`)
  const projects = await res.json()

  return projects
}

export default async function Index() {
  const projects = await getProjects()

  return projects.map((project) => <div>{project.name}</div>)
}
```

----------------------------------------

TITLE: Render Client Component Only in Browser with next/dynamic
DESCRIPTION: This snippet shows how to use `next/dynamic` with the `ssr: false` option to ensure a Client Component is only loaded and rendered in the browser environment. This is particularly useful for components that rely on browser-specific APIs like `window` or `document`, preventing errors during server-side prerendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
import dynamic from 'next/dynamic'

const ClientOnlyComponent = dynamic(() => import('./component'), {
  ssr: false,
})
```

----------------------------------------

TITLE: Handle Core Web Vitals in Next.js App Router Components
DESCRIPTION: Illustrates how to implement Web Vitals reporting in Next.js App Router components using `useReportWebVitals`. It provides examples for both TypeScript (TSX) and JavaScript (JSX) to capture and process metrics like FCP and LCP.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

type ReportWebVitalsCallback = Parameters<typeof useReportWebVitals>[0]

const handleWebVitals: ReportWebVitalsCallback = (metric) => {
  switch (metric.name) {
    case 'FCP': {
      // handle FCP results
    }
    case 'LCP': {
      // handle LCP results
    }
    // ...
  }
}

export function WebVitals() {
  useReportWebVitals(handleWebVitals)
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

const handleWebVitals = (metric) => {
  switch (metric.name) {
    case 'FCP': {
      // handle FCP results
    }
    case 'LCP': {
      // handle LCP results
    }
    // ...
  }
}

export function WebVitals() {
  useReportWebVitals(handleWebVitals)
}
```

----------------------------------------

TITLE: Starting Next.js Development Server with npm, yarn, pnpm, or bun
DESCRIPTION: This snippet provides various commands to start the Next.js development server. It allows developers to choose their preferred package manager (npm, yarn, pnpm, or bun) to run the `dev` script, which typically launches the application on `http://localhost:3000`. This is the first step to begin local development and see the application in action.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Render Third-Party Client Components within an Existing Next.js Client Component
DESCRIPTION: This example demonstrates how to successfully integrate a third-party component, such as <Carousel />, which relies on client-only features like useState, by using it inside an existing Next.js Client Component. This approach ensures the component functions correctly and avoids errors that would occur if directly used within a Server Component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/05-server-and-client-components.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
'use client'

import { useState } from 'react'
import { Carousel } from 'acme-carousel'

export default function Gallery() {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <div>
      <button onClick={() => setIsOpen(true)}>View pictures</button>
      {/* Works, since Carousel is used within a Client Component */}
      {isOpen && <Carousel />}
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useState } from 'react'
import { Carousel } from 'acme-carousel'

export default function Gallery() {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <div>
      <button onClick={() => setIsOpen(true)}>View pictures</button>
      {/*  Works, since Carousel is used within a Client Component */}
      {isOpen && <Carousel />}
    </div>
  )
}
```

----------------------------------------

TITLE: Next.js Client and Server Components Composition (App Router)
DESCRIPTION: Recommendations for composing Server and Client Components, emphasizing the strategic placement of "use client" boundaries to optimize client-side JavaScript bundle size.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Concepts:
  - Server Components
  - Client Components
Directive: "use client"
Recommendation: Follow composition patterns, optimize "use client" boundary placement to reduce client-side JS bundle.
```

----------------------------------------

TITLE: Wrapping Dynamic Data Fetching with React Suspense in Next.js
DESCRIPTION: Illustrates how to wrap components that fetch asynchronous data (expected on every user request) with React's `Suspense` boundary. This provides a fallback UI while the data loads, addressing the error when data is not cached. The `Suspense` boundary can be placed immediately above the component or in a Root Layout.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-missing-suspense.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
async function getLatestTransactions() {
  return db.query(...)
}

export default async function Page() {
  const transactions = await getLatestTransactions(token);
  return <TransactionList transactions={transactions}>
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'

async function TransactionList() {
  const transactions = await db.query(...)
  return ...
}

function TransactionSkeleton() {
  return <ul>...</ul>
}

export default async function Page() {
  return (
    <Suspense fallback={<TransactionSkeleton />}>
      <TransactionList/>
    </Suspense>
  )
}
```

----------------------------------------

TITLE: Redirecting to Localized Paths using Next.js Middleware
DESCRIPTION: This Next.js middleware function handles internationalized routing by redirecting users to a locale-prefixed path if one is not already present. It checks if the incoming request's pathname contains a supported locale and, if not, prepends the determined preferred locale to the URL before redirecting, ensuring all requests are locale-aware.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/internationalization.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { NextResponse } from "next/server";

let locales = ['en-US', 'nl-NL', 'nl']

// Get the preferred locale, similar to the above or using a library
function getLocale(request) { ... }

export function middleware(request) {
  // Check if there is any supported locale in the pathname
  const { pathname } = request.nextUrl
  const pathnameHasLocale = locales.some(
    (locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`
  )

  if (pathnameHasLocale) return

  // Redirect if there is no locale
  const locale = getLocale(request)
  request.nextUrl.pathname = `/${locale}${pathname}`
  // e.g. incoming request is /products
  // The new URL is now /en-US/products
  return NextResponse.redirect(request.nextUrl)
}

export const config = {
  matcher: [
    // Skip all internal paths (_next)
    '/((?!_next).* )',
    // Optional: only run on root (/) URL
    // '/'
  ]
}
```

----------------------------------------

TITLE: Rendering Product JSON-LD in Next.js Page (JavaScript)
DESCRIPTION: This snippet illustrates rendering product-specific JSON-LD structured data within a Next.js `page.js` component. It retrieves product information, creates a Schema.org `Product` object, and embeds it using a `<script type="application/ld+json">` tag, including XSS prevention for `<` characters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/json-ld.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export default async function Page({ params }) {
  const { id } = await params
  const product = await getProduct(id)

  const jsonLd = {
    '@context': 'https://schema.org',
    '@type': 'Product',
    name: product.name,
    image: product.image,
    description: product.description,
  }

  return (
    <section>
      {/* Add JSON-LD to your page */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(jsonLd).replace(/</g, '\\u003c'),
        }}
      />
      {/* ... */}
    </section>
  )
}
```

----------------------------------------

TITLE: Create a client component for Web Vitals in App Router
DESCRIPTION: This code defines a client-side component, `WebVitals`, for the Next.js App Router. It uses the `useReportWebVitals` hook to capture and log web vital metrics, ensuring the client boundary is confined to this specific component for performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
'use client'

import { useReportWebVitals } from 'next/web-vitals'

const logWebVitals = (metric) => {
  console.log(metric)
}

export function WebVitals() {
  useReportWebVitals(logWebVitals)

  return null
}
```

----------------------------------------

TITLE: Set User Session Cookie in Next.js
DESCRIPTION: Demonstrates how to create a new user session and store it in an HttpOnly, Secure, SameSite=lax cookie with an expiration date using the Next.js `cookies` API. This function should be called on the server to prevent client-side tampering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_15

LANGUAGE: ts
CODE:
```
import 'server-only'
import { cookies } from 'next/headers'

export async function createSession(userId: string) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
  const session = await encrypt({ userId, expiresAt })
  const cookieStore = await cookies()

  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: 'lax',
    path: '/',
  })
}
```

LANGUAGE: js
CODE:
```
import 'server-only'
import { cookies } from 'next/headers'

export async function createSession(userId) {
  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
  const session = await encrypt({ userId, expiresAt })
  const cookieStore = await cookies()

  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expiresAt,
    sameSite: 'lax',
    path: '/',
  })
}
```

----------------------------------------

TITLE: Defining Dynamic Paths for SSG with getStaticPaths (JavaScript)
DESCRIPTION: This snippet illustrates the use of `getStaticPaths` in Next.js for dynamic routes. It fetches a list of items (e.g., posts) from an external API and generates an array of `paths` to be pre-rendered at build time. The `fallback: false` option ensures that any path not returned by `getStaticPaths` will result in a 404 page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/02-static-site-generation.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// This function gets called at build time
export async function getStaticPaths() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // Get the paths we want to pre-render based on posts
  const paths = posts.map((post) => ({
    params: { id: post.id },
  }))

  // We'll pre-render only these paths at build time.
  // { fallback: false } means other routes should 404.
  return { paths, fallback: false }
}
```

----------------------------------------

TITLE: Apply Cache Tags to Data Fetching Functions in Next.js
DESCRIPTION: Demonstrates how to use `unstable_cacheTag` within an asynchronous data fetching function. By calling `cacheTag` with a string tag (e.g., 'my-data'), the fetched data is associated with this tag, enabling targeted revalidation later.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cacheTag.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { unstable_cacheTag as cacheTag } from 'next/cache'

export async function getData() {
  'use cache'
  cacheTag('my-data')
  const data = await fetch('/api/data')
  return data
}
```

LANGUAGE: jsx
CODE:
```
import { unstable_cacheTag as cacheTag } from 'next/cache'

export async function getData() {
  'use cache'
  cacheTag('my-data')
  const data = await fetch('/api/data')
  return data
}
```

----------------------------------------

TITLE: Revalidating All Data with revalidatePath
DESCRIPTION: This example demonstrates how to purge the Client-side Router Cache and revalidate the Data Cache for all paths on the next page visit.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'

revalidatePath('/', 'layout')
```

----------------------------------------

TITLE: Receive Webhooks in Next.js Route Handler
DESCRIPTION: Shows how to create a Next.js Route Handler to receive and process webhook payloads from third-party services. It demonstrates reading the request body as text using `request.text()` and includes basic error handling. Emphasizes that `bodyParser` is not required unlike older API Routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_20

LANGUAGE: ts
CODE:
```
export async function POST(request: Request) {
  try {
    const text = await request.text()
    // Process the webhook payload
  } catch (error) {
    return new Response(`Webhook error: ${error.message}`, {
      status: 400,
    })
  }

  return new Response('Success!', {
    status: 200,
  })
}
```

LANGUAGE: js
CODE:
```
export async function POST(request) {
  try {
    const text = await request.text()
    // Process the webhook payload
  } catch (error) {
    return new Response(`Webhook error: ${error.message}`, {
      status: 400,
    })
  }

  return new Response('Success!', {
    status: 200,
  })
}
```

----------------------------------------

TITLE: Displaying Static Images with Next.js Image Component
DESCRIPTION: This JSX code demonstrates how to use the `next/image` component to display static images located in the `public` folder. It shows how to reference images using a base URL path and defines reusable `Avatar` and `AvatarOfMe` components for displaying user avatars.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/public-folder.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Image from 'next/image'

export function Avatar({ id, alt }) {
  return <Image src={`/avatars/${id}.png`} alt={alt} width="64" height="64" />
}

export function AvatarOfMe() {
  return <Avatar id="me" alt="A portrait of me" />
}
```

----------------------------------------

TITLE: Signaling Dynamic Rendering with DynamicMarker (After)
DESCRIPTION: This snippet shows the recommended approach to handle dynamic metadata. It introduces a `DynamicMarker` component that uses `await connection()` to explicitly signal Next.js that the page requires dynamic rendering, while allowing the main `Page` component's static content to be prerendered. The `generateMetadata` still accesses cookies but the dynamic signal is separated.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-dynamic-metadata.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { Suspense } from 'react'
import { cookies } from 'next/headers'
import { connection } from 'next/server'

export async function generateMetadata() {
  const token = (await cookies()).get('token')
  const response = await fetch(..., { headers: { Authorization: token } })
  return {
    title: getTitle(response),
  }
}

async function DynamicMarker() {
  // This component renders nothing, but it will always
  // be dynamic because it waits for an actual connection.
  const Connection = async () => {
    await connection()
    return null
  }
  return (
    <Suspense>
      <Connection />
    </Suspense>
  )
}

export default function Page() {
  return (
    <>
      <article>This article is completely static</article>
      {/* Rendering this DynamicMarker component tells Next.js that
          this Page has some dynamic content. */}
      <DynamicMarker />
    </>
  )
}
```

----------------------------------------

TITLE: Implementing Caching with getServerSideProps in Next.js
DESCRIPTION: This snippet shows how to configure HTTP caching headers, specifically `Cache-Control` with `s-maxage` and `stale-while-revalidate`, within `getServerSideProps` in Next.js. By setting these headers on the `res` object, the server can instruct browsers and CDNs on how to cache the dynamic responses, improving performance for repeated requests while ensuring data freshness in the background.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-get-server-side-props.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
// This value is considered fresh for ten seconds (s-maxage=10).
// If a request is repeated within the next 10 seconds, the previously
// cached value will still be fresh. If the request is repeated before 59 seconds,
// the cached value will be stale but still render (stale-while-revalidate=59).
//
// In the background, a revalidation request will be made to populate the cache
// with a fresh value. If you refresh the page, you will see the new value.
export async function getServerSideProps({ req, res }) {
  res.setHeader(
    'Cache-Control',
    'public, s-maxage=10, stale-while-revalidate=59'
  )

  return {
    props: {},
  }
}
```

----------------------------------------

TITLE: Next.js Link Component Basic Usage in App Router (TSX)
DESCRIPTION: Illustrates a minimum working example of the Next.js `<Link>` component, including the necessary import statement, for use within the App Router. This code is runnable without additional configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href="/about">About</Link>
}
```

----------------------------------------

TITLE: Migrating Next.js Cookies API to Async (TypeScript)
DESCRIPTION: This snippet demonstrates the recommended asynchronous usage of the `cookies` API in Next.js 15. The `cookies()` function now returns a Promise, requiring `await` to access the cookie store.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import { cookies } from 'next/headers'

// Before
const cookieStore = cookies()
const token = cookieStore.get('token')

// After
const cookieStore = await cookies()
const token = cookieStore.get('token')
```

----------------------------------------

TITLE: Responding to TypeScript Prompt (Interactive Setup)
DESCRIPTION: This snippet illustrates the interactive prompt for enabling TypeScript when using `create-next-app`. Users can select 'Yes' to automatically install necessary TypeScript dependencies and configure the project for TypeScript development, or 'No' for a JavaScript project.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
✔ Would you like to use TypeScript? … No / Yes
```

----------------------------------------

TITLE: Configure Next.js scripts in package.json
DESCRIPTION: Add essential development, build, start, and lint scripts to your `package.json` file for Next.js application management.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/01-installation.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  }
}
```

----------------------------------------

TITLE: Next.js `metadataBase` URL Resolution Examples
DESCRIPTION: This section illustrates how `metadataBase` resolves various relative and absolute paths in metadata fields. It includes code examples for setting `metadataBase` in both TypeScript (TSX) and JavaScript (JSX) and a table detailing how different input paths are composed with the base URL to form the final resolved URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import type { Metadata } from 'next'

export const metadata: Metadata = {
  metadataBase: new URL('https://acme.com'),
}
```

LANGUAGE: jsx
CODE:
```
export const metadata = {
  metadataBase: new URL('https://acme.com'),
}
```

LANGUAGE: APIDOC
CODE:
```
metadata field                 | Resolved URL
-------------------------------- | --------------------------------
/                              | https://acme.com
./                             | https://acme.com
payments                       | https://acme.com/payments
/payments                      | https://acme.com/payments
./payments                     | https://acme.com/payments
../payments                    | https://acme.com/payments
https://beta.acme.com/payments | https://beta.acme.com/payments
```

----------------------------------------

TITLE: Using next/script with src attribute in JSX
DESCRIPTION: This snippet demonstrates the correct usage of the `next/script` component by providing a `src` attribute, which points to an external JavaScript file. This is the standard and recommended way to load external scripts.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-script.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
<Script src="https://example.com/analytics.js" />
```

----------------------------------------

TITLE: Correct `next/server` usage in Next.js middleware.ts
DESCRIPTION: This TypeScript code snippet illustrates the correct implementation of a Next.js middleware function. It imports `NextFetchEvent` and `NextRequest` from `next/server` and defines an `export function middleware` that returns a simple `Response`. This example adheres to the best practice of only using `next/server` within `middleware.{js,ts}` files.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/no-server-import-in-page.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { NextFetchEvent, NextRequest } from 'next/server'

export function middleware(req: NextRequest, ev: NextFetchEvent) {
  return new Response('Hello, world!')
}
```

----------------------------------------

TITLE: Revalidating A Layout Path with revalidatePath
DESCRIPTION: This example illustrates how to revalidate any URL that matches a provided layout file. This action will also cause pages beneath with the same layout to revalidate on their next visit.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx#_snippet_3

LANGUAGE: ts
CODE:
```
import { revalidatePath } from 'next/cache'
revalidatePath('/blog/[slug]', 'layout')
// or with route groups
revalidatePath('/(main)/post/[slug]', 'layout')
```

----------------------------------------

TITLE: Revalidate Cache Entries by Tag
DESCRIPTION: Shows how to use `revalidateTag` to purge cache entries associated with a specific tag. This function can be employed in Route Handlers for third-party events or Server Actions for user interactions to invalidate the cache.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/caching.mdx#_snippet_22

LANGUAGE: jsx
CODE:
```
revalidateTag('a')
```

----------------------------------------

TITLE: Force Static Rendering in Next.js App Router
DESCRIPTION: Configures a Next.js page or layout in the `app/` directory to always be statically generated at build time, preventing dynamic server values from forcing a dynamic render. This ensures consistency in the rendering mode of your page.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/app-static-to-dynamic-error.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export const dynamic = 'force-static';
```

----------------------------------------

TITLE: Configure Next.js for Remote Image Optimization
DESCRIPTION: This configuration snippet shows how to define allowed remote image patterns in `next.config.js`. This is crucial for security, preventing malicious usage by restricting image optimization to specific hostnames and paths, such as a particular AWS S3 bucket.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_44

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 's3.amazonaws.com',
        port: '',
        pathname: '/my-bucket/**',
        search: '',
      },
    ],
  },
}
```

----------------------------------------

TITLE: Integrating Client Component for Query Params into Next.js Layout
DESCRIPTION: Shows how a Client Component (like the `Search` component accessing `useSearchParams`) can be rendered within a Next.js Layout. This pattern allows layouts to display dynamic data derived from query parameters, even though the layout itself doesn't rerender.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/layout.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import Search from '@/app/ui/search'

export default function Layout({ children }) {
  return (
    <>
      <Search />
      {children}
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import Search from '@/app/ui/search'

export default function Layout({ children }) {
  return (
    <>
      <Search />
      {children}
    </>
  )
}
```

----------------------------------------

TITLE: Integrate Session Creation into Next.js Server Action
DESCRIPTION: Illustrates how to invoke the `createSession` function within a Next.js Server Action, such as a `signup` handler, to establish a user session and then redirect the user to a profile page using the `redirect()` API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_16

LANGUAGE: ts
CODE:
```
import { createSession } from '@/app/lib/session'

export async function signup(state: FormState, formData: FormData) {
  // Previous steps:
  // 1. Validate form fields
  // 2. Prepare data for insertion into database
  // 3. Insert the user into the database or call an Library API

  // Current steps:
  // 4. Create user session
  await createSession(user.id)
  // 5. Redirect user
  redirect('/profile')
}
```

LANGUAGE: js
CODE:
```
import { createSession } from '@/app/lib/session'

export async function signup(state, formData) {
  // Previous steps:
  // 1. Validate form fields
  // 2. Prepare data for insertion into database
  // 3. Insert the user into the database or call an Library API

  // Current steps:
  // 4. Create user session
  await createSession(user.id)
  // 5. Redirect user
  redirect('/profile')
}
```

----------------------------------------

TITLE: Implement Basic Path Matching for Headers in Next.js
DESCRIPTION: Shows how to use path parameters like `:slug` in `source` to match specific routes. Matched parameters can also be dynamically used within header `key` and `value` properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_3

LANGUAGE: js
CODE:
```
module.exports = {
  async headers() {
    return [
      {
        source: '/blog/:slug',
        headers: [
          {
            key: 'x-slug',
            value: ':slug', // Matched parameters can be used in the value
          },
          {
            key: 'x-slug-:slug', // Matched parameters can be used in the key
            value: 'my other custom header value',
          },
        ],
      },
    ]
  },
}
```

----------------------------------------

TITLE: Import Jest Custom Matchers in Setup File
DESCRIPTION: Demonstrates how to import `@testing-library/jest-dom` into the Jest setup file (`jest.setup.ts` or `jest.setup.js`) to make custom matchers available globally for all tests. This is a crucial step after configuring Jest.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/jest.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
import '@testing-library/jest-dom'
```

LANGUAGE: JavaScript
CODE:
```
import '@testing-library/jest-dom'
```

----------------------------------------

TITLE: Performing Rewrites with NextResponse - JavaScript
DESCRIPTION: The `NextResponse.rewrite` static method creates a `NextResponse` instance for URL rewriting in Next.js middleware. It sets the 'x-middleware-rewrite' header to the validated destination URL and applies any additional middleware-specific headers using `handleMiddlewareField`. This allows the middleware to internally change the request's destination without a client-side redirect.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/next-response/output.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
    static rewrite(destination, init) {
        const headers = new Headers(init == null ? void 0 : init.headers);
        headers.set('x-middleware-rewrite', validateURL(destination));
        handleMiddlewareField(init, headers);
        return new NextResponse(null, {
            ...init,
            headers
        });
    }
```

----------------------------------------

TITLE: Typing JSON-LD with schema-dts in TypeScript
DESCRIPTION: This snippet demonstrates how to use the `schema-dts` package to add TypeScript type safety to JSON-LD objects. It imports `Product` and `WithContext` types to ensure the structured data conforms to the Schema.org `Product` specification, improving development reliability.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/json-ld.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Product, WithContext } from 'schema-dts'

const jsonLd: WithContext<Product> = {
  '@context': 'https://schema.org',
  '@type': 'Product',
  name: 'Next.js Sticker',
  image: 'https://nextjs.org/imgs/sticker.png',
  description: 'Dynamic at the speed of static.',
}
```

----------------------------------------

TITLE: Set Document Title as a Simple String in Next.js
DESCRIPTION: This snippet demonstrates how to set the document title using a simple string within the `metadata` object in Next.js. It shows the configuration in `layout.js` or `page.js` and the resulting HTML output in the `<head>` section.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
export const metadata = {
  title: 'Next.js',
}
```

LANGUAGE: html
CODE:
```
<title>Next.js</title>
```

----------------------------------------

TITLE: Update and Refresh Next.js User Session Cookie
DESCRIPTION: Shows how to extend an existing user session's expiration time by re-setting the session cookie. This is useful for keeping users logged in and refreshing their session upon subsequent application access, often after they access the application again.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_17

LANGUAGE: ts
CODE:
```
import 'server-only'
import { cookies } from 'next/headers'
import { decrypt } from '@/app/lib/session'

export async function updateSession() {
  const session = (await cookies()).get('session')?.value
  const payload = await decrypt(session)

  if (!session || !payload) {
    return null
  }

  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)

  const cookieStore = await cookies()
  cookieStore.set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expires,
    sameSite: 'lax',
    path: '/',
  })
}
```

LANGUAGE: js
CODE:
```
import 'server-only'
import { cookies } from 'next/headers'
import { decrypt } from '@/app/lib/session'

export async function updateSession() {
  const session = (await cookies()).get('session')?.value
  const payload = await decrypt(session)

  if (!session || !payload) {
    return null
  }

  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)(
    await cookies()
  ).set('session', session, {
    httpOnly: true,
    secure: true,
    expires: expires,
    sameSite: 'lax',
    path: '/',
  })
}
```

----------------------------------------

TITLE: Parsing User Agent with userAgent in Next.js Middleware
DESCRIPTION: This snippet provides the corrected approach for parsing the user agent in Next.js middleware. It imports the `userAgent` function from `next/server`, passes the `NextRequest` object to it, and then safely accesses device information to determine the viewport, resolving the `req.ua` deprecation error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-user-agent.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { NextRequest, NextResponse, userAgent } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl
  const { device } = userAgent(request)
  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'
  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}
```

----------------------------------------

TITLE: Sequential Data Fetching in Next.js Page Component
DESCRIPTION: This example demonstrates how `async`/`await` calls within a Next.js page component can lead to sequential data fetching. The `getAlbums` call will not start until `getArtist` has completed, potentially delaying the page render and overall data retrieval.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
import { getArtist, getAlbums } from '@/app/lib/data'

export default async function Page({ params }) {
  // These requests will be sequential
  const { username } = await params
  const artist = await getArtist(username)
  const albums = await getAlbums(username)
  return <div>{artist.name}</div>
}
```

----------------------------------------

TITLE: Intercept login route for modal display in Next.js
DESCRIPTION: Intercepts the `/login` route within the `@auth` Parallel Route slot using the `(.)` convention. This file renders the `<Login />` component wrapped inside a `<Modal />`, enabling the login form to appear as a modal when navigated to via client-side routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/parallel-routes.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { Modal } from '@/app/ui/modal'
import { Login } from '@/app/ui/login'

export default function Page() {
  return (
    <Modal>
      <Login />
    </Modal>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Modal } from '@/app/ui/modal'
import { Login } from '@/app/ui/login'

export default function Page() {
  return (
    <Modal>
      <Login />
    </Modal>
  )
}
```

----------------------------------------

TITLE: Accessing pathname and searchParams with nextUrl
DESCRIPTION: Demonstrates how to access the `pathname` and `searchParams` properties from the `request.nextUrl` object in a Next.js application. `pathname` returns the path of the URL, and `searchParams` returns the query parameters as an object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-request.mdx#_snippet_7

LANGUAGE: ts
CODE:
```
// Given a request to /home, pathname is /home
request.nextUrl.pathname
// Given a request to /home?name=lee, searchParams is { 'name': 'lee' }
request.nextUrl.searchParams
```

----------------------------------------

TITLE: Implement Streaming Responses using Web APIs in Next.js Route Handlers
DESCRIPTION: Demonstrates how to create a streaming response using native Web APIs like `ReadableStream` and `TextEncoder`. This example shows how to convert an async iterator into a stream for chunked responses, providing fine-grained control over the streaming process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_16

LANGUAGE: TypeScript
CODE:
```
// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream
function iteratorToStream(iterator: any) {
  return new ReadableStream({
    async pull(controller) {
      const { value, done } = await iterator.next()

      if (done) {
        controller.close()
      } else {
        controller.enqueue(value)
      }
    }
  })
}

function sleep(time: number) {
  return new Promise((resolve) => {
    setTimeout(resolve, time)
  })
}

const encoder = new TextEncoder()

async function* makeIterator() {
  yield encoder.encode('<p>One</p>')
  await sleep(200)
  yield encoder.encode('<p>Two</p>')
  await sleep(200)
  yield encoder.encode('<p>Three</p>')
}

export async function GET() {
  const iterator = makeIterator()
  const stream = iteratorToStream(iterator)

  return new Response(stream)
}
```

LANGUAGE: JavaScript
CODE:
```
// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream
function iteratorToStream(iterator) {
  return new ReadableStream({
    async pull(controller) {
      const { value, done } = await iterator.next()

      if (done) {
        controller.close()
      } else {
        controller.enqueue(value)
      }
    }
  })
}

function sleep(time) {
  return new Promise((resolve) => {
    setTimeout(resolve, time)
  })
}

const encoder = new TextEncoder()

async function* makeIterator() {
  yield encoder.encode('<p>One</p>')
  await sleep(200)
  yield encoder.encode('<p>Two</p>')
  await sleep(200)
  yield encoder.encode('<p>Three</p>')
}

export async function GET() {
  const iterator = makeIterator()
  const stream = iteratorToStream(iterator)

  return new Response(stream)
}
```

----------------------------------------

TITLE: Configure `alternates` Metadata in Next.js
DESCRIPTION: Demonstrates how to set up `alternates` metadata in Next.js to specify canonical URLs, language-specific URLs, media-specific URLs, and RSS feed types. This configuration is typically defined in `layout.js` or `page.js` and generates corresponding `<link>` tags in the HTML `<head>` for SEO and internationalization.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_24

LANGUAGE: jsx
CODE:
```
export const metadata = {
  alternates: {
    canonical: 'https://nextjs.org',
    languages: {
      'en-US': 'https://nextjs.org/en-US',
      'de-DE': 'https://nextjs.org/de-DE',
    },
    media: {
      'only screen and (max-width: 600px)': 'https://nextjs.org/mobile',
    },
    types: {
      'application/rss+xml': 'https://nextjs.org/rss',
    },
  },
}
```

LANGUAGE: html
CODE:
```
<link rel="canonical" href="https://nextjs.org" />
<link rel="alternate" hreflang="en-US" href="https://nextjs.org/en-US" />
<link rel="alternate" hreflang="de-DE" href="https://nextjs.org/de-DE" />
<link
  rel="alternate"
  media="only screen and (max-width: 600px)"
  href="https://nextjs.org/mobile"
/>
<link
  rel="alternate"
  type="application/rss+xml"
  href="https://nextjs.org/rss"
/>
```

----------------------------------------

TITLE: Next.js Open Graph (OG) Images for Social Sharing
DESCRIPTION: Create Open Graph (OG) images to prepare your Next.js application for optimal social media sharing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/production-checklist.mdx#_snippet_24

LANGUAGE: APIDOC
CODE:
```
Next.js Open Graph (OG) Images:
  Purpose: Optimize application appearance for social media sharing.
  Functionality: Generate custom OG images.
```

----------------------------------------

TITLE: Using Tailwind CSS Classes in a Page Component (App Router - TypeScript)
DESCRIPTION: After installing and configuring Tailwind CSS, you can directly use its utility classes within your TSX components. This example demonstrates applying `text-3xl`, `font-bold`, and `underline` classes to an `<h1>` element in an App Router page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/tailwind-css.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
export default function Page() {
  return <h1 className="text-3xl font-bold underline">Hello, Next.js!</h1>
}
```

----------------------------------------

TITLE: Creating Next.js Home Page (App Router, TSX)
DESCRIPTION: This Next.js component defines the home page (`/`) for an application using the App Router. It displays a 'Home' heading and includes a `Link` component to navigate to the `/about` page, demonstrating basic page routing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/playwright.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return (
    <div>
      <h1>Home</h1>
      <Link href="/about">About</Link>
    </div>
  )
}
```

----------------------------------------

TITLE: Implement Granular Streaming with React Suspense in Next.js
DESCRIPTION: This example illustrates how to use React's `<Suspense>` component in a Next.js page to achieve more granular streaming. Content outside the `<Suspense>` boundary is sent immediately, while content wrapped within it (e.g., a `BlogList` component) is streamed progressively, displaying a `fallback` UI until the data is ready.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'
import BlogList from '@/components/BlogList'
import BlogListSkeleton from '@/components/BlogListSkeleton'

export default function BlogPage() {
  return (
    <div>
      {/* This content will be sent to the client immediately */}
      <header>
        <h1>Welcome to the Blog</h1>
        <p>Read the latest posts below.</p>
      </header>
      <main>
        {/* Any content wrapped in a <Suspense> boundary will be streamed */}
        <Suspense fallback={<BlogListSkeleton />}>
          <BlogList />
        </Suspense>
      </main>
    </div>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'
import BlogList from '@/components/BlogList'
import BlogListSkeleton from '@/components/BlogListSkeleton'

export default function BlogPage() {
  return (
    <div>
      {/* This content will be sent to the client immediately */}
      <header>
        <h1>Welcome to the Blog</h1>
        <p>Read the latest posts below.</p>
      </header>
      <main>
        {/* Any content wrapped in a <Suspense> boundary will be streamed */}
        <Suspense fallback={<BlogListSkeleton />}>
          <BlogList />
        </Suspense>
      </main>
    </div>
  )
}
```

----------------------------------------

TITLE: Opt-in React Component to Compiler with 'use memo'
DESCRIPTION: Demonstrates how to use the 'use memo' directive within a React component or hook to explicitly opt it into the React Compiler when in annotation mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/reactCompiler.mdx#_snippet_3

LANGUAGE: ts
CODE:
```
export default function Page() {
  'use memo'
  // ...
}
```

LANGUAGE: js
CODE:
```
export default function Page() {
  'use memo'
  // ...
}
```

----------------------------------------

TITLE: Accessing Geolocation Data with `@vercel/functions` in Middleware (TS)
DESCRIPTION: This example shows how to retrieve city geolocation data from a `NextRequest` within a Next.js middleware using the `geolocation` function from the `@vercel/functions` package. This replaces the removed `geo` property on `NextRequest`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_26

LANGUAGE: ts
CODE:
```
import { geolocation } from '@vercel/functions'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  const { city } = geolocation(request)

  // ...
}
```

----------------------------------------

TITLE: Implement Basic Role-Based Access with forbidden in Page Component
DESCRIPTION: This example illustrates how to use the `forbidden` function within a Next.js Server Component (e.g., `app/auth/page.tsx`). It checks a user's session role and calls `forbidden()` if the role does not meet the required criteria, rendering a 403 error page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/forbidden.mdx#_snippet_1

LANGUAGE: TSX
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return <></>
}
```

LANGUAGE: JSX
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return <></>
}
```

----------------------------------------

TITLE: Statically Generating Routes with generateStaticParams in Next.js
DESCRIPTION: This snippet demonstrates how to use the `generateStaticParams` function in Next.js to pre-render dynamic routes at build time. It fetches a list of posts and returns an array of objects, each specifying a `slug` for a static page. When `fetch` is used within this function, requests are automatically deduplicated to optimize build performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/dynamic-routes.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

LANGUAGE: jsx
CODE:
```
export async function generateStaticParams() {
  const posts = await fetch('https://.../posts').then((res) => res.json())

  return posts.map((post) => ({
    slug: post.slug,
  }))
}
```

----------------------------------------

TITLE: Configure SWR Fallback in Next.js Server Component
DESCRIPTION: This snippet shows how to wrap your Next.js application with `<SWRConfig>` in a Server Component (`app/layout.tsx` or `app/layout.js`) to provide initial `fallback` data. The `getUser()` function, being server-side, can securely access server-only resources without needing a separate API route. This data is then available to client components using `useSWR` with the same key.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/single-page-applications.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { SWRConfig } from 'swr'
import { getUser } from './user' // some server-side function

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <SWRConfig
      value={{
        fallback: {
          // We do NOT await getUser() here
          // Only components that read this data will suspend
          '/api/user': getUser(),
        },
      }}
    >
      {children}
    </SWRConfig>
  )
}
```

LANGUAGE: js
CODE:
```
import { SWRConfig } from 'swr'
import { getUser } from './user' // some server-side function

export default function RootLayout({ children }) {
  return (
    <SWRConfig
      value={{
        fallback: {
          // We do NOT await getUser() here
          // Only components that read this data will suspend
          '/api/user': getUser(),
        },
      }}
    >
      {children}
    </SWRConfig>
  )
}
```

----------------------------------------

TITLE: Enable React Compiler in Next.js Configuration
DESCRIPTION: Configures Next.js to enable the experimental React Compiler by setting `experimental.reactCompiler` to `true` in `next.config.js`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/reactCompiler.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    reactCompiler: true,
  },
}

export default nextConfig
```

LANGUAGE: js
CODE:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    reactCompiler: true,
  },
}

module.exports = nextConfig
```

----------------------------------------

TITLE: Loading Google Analytics for a Single Route with `@next/third-parties`
DESCRIPTION: This snippet shows how to load Google Analytics 4 (GA4) for a specific route in a Next.js application. The `GoogleAnalytics` component from `@next/third-parties/google` is directly included within a page file, allowing for route-specific analytics integration. The `gaId` prop must be set to your GA4 measurement ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-script-for-ga.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { GoogleAnalytics } from '@next/third-parties/google'

export default function Page() {
  return <GoogleAnalytics gaId="G-XYZ" />
}
```

----------------------------------------

TITLE: Protect Routes with Role-Based Access using forbidden
DESCRIPTION: This snippet demonstrates using `forbidden` to restrict access to specific routes, such as an admin dashboard. It verifies the user's session role and invokes `forbidden()` if the user lacks the necessary permissions, preventing unauthorized access to the route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/forbidden.mdx#_snippet_2

LANGUAGE: TSX
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return (
    <main>
      <h1>Admin Dashboard</h1>
      <p>Welcome, {session.user.name}!</p>
    </main>
  )
}
```

LANGUAGE: JSX
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { forbidden } from 'next/navigation'

export default async function AdminPage() {
  const session = await verifySession()

  // Check if the user has the 'admin' role
  if (session.role !== 'admin') {
    forbidden()
  }

  // Render the admin page for authorized users
  return (
    <main>
      <h1>Admin Dashboard</h1>
      <p>Welcome, {session.user.name}!</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Send JSON Response in Next.js API Routes
DESCRIPTION: This example demonstrates how to send a JSON response back to the client from a Next.js API Route. It includes error handling within a try-catch block to return appropriate status codes (200 for success, 500 for errors) and messages, ensuring the response is a serializable object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_12

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const result = await someAsyncOperation()
    res.status(200).json({ result })
  } catch (err) {
    res.status(500).json({ error: 'failed to load data' })
  }
}
```

LANGUAGE: js
CODE:
```
export default async function handler(req, res) {
  try {
    const result = await someAsyncOperation()
    res.status(200).json({ result })
  } catch (err) {
    res.status(500).json({ error: 'failed to load data' })
  }
}
```

----------------------------------------

TITLE: Initializing Redis Client in Node.js (Correct Usage)
DESCRIPTION: This snippet initializes an ioredis client, demonstrating how Node.js-specific modules should be set up. This code is intended for server-side execution, typically within Next.js data fetching functions like `getStaticProps` or `getServerSideProps` to ensure proper tree-shaking.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/module-not-found.mdx#_snippet_3

LANGUAGE: js
CODE:
```
import Redis from 'ioredis'

const redis = new Redis(process.env.REDIS_URL)

export default redis
```

----------------------------------------

TITLE: Wrapping useSearchParams with Suspense in Next.js (TSX)
DESCRIPTION: This TypeScript React example demonstrates how to correctly use `useSearchParams` by wrapping the component that uses it within a `Suspense` boundary. This prevents the page from de-optimizing to client-side rendering, allowing for server-side rendering and providing a fallback (like a loading skeleton) while data is fetched.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/missing-suspense-with-csr-bailout.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'\n\nimport { useSearchParams } from 'next/navigation'\nimport { Suspense } from 'react'\n\nfunction Search() {\n  const searchParams = useSearchParams()\n\n  return <input placeholder="Search..." />\n}\n\nexport function Searchbar() {\n  return (\n    // You could have a loading skeleton as the `fallback` too\n    <Suspense>\n      <Search />\n    </Suspense>\n  )\n}
```

----------------------------------------

TITLE: Generate `srcset` and `src` with Next.js Image Component
DESCRIPTION: Demonstrates how the Next.js `<Image>` component automatically generates `srcset` and `src` attributes for the `<img>` tag based on the provided `src` prop, optimizing image delivery.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_16

LANGUAGE: jsx
CODE:
```
<Image src="/profile.jpg" />
```

LANGUAGE: html
CODE:
```
<img
  srcset="
    /_next/image?url=%2Fme.jpg&w=640&q=75 1x,
    /_next/image?url=%2Fme.jpg&w=828&q=75 2x
  "
  src="/_next/image?url=%2Fme.jpg&w=828&q=75"
/>
```

----------------------------------------

TITLE: Manually Prefetch Routes using Next.js useRouter
DESCRIPTION: This example shows how to programmatically prefetch a route using the `router.prefetch()` method from `next/navigation`. This is useful for warming up routes outside the viewport or in response to user interactions like hover or scroll, providing fine-grained control over prefetching behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/prefetching.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
'use client'

import { useRouter } from 'next/navigation'

const router = useRouter()
router.prefetch('/pricing')
```

----------------------------------------

TITLE: Create React Context for Navigation Blocking State
DESCRIPTION: This snippet defines a React Context (`NavigationBlockerContext`) and a provider (`NavigationBlockerProvider`) to manage a global boolean state (`isBlocked`) indicating whether navigation should be blocked. It also exports a `useNavigationBlocker` hook for easy consumption of the context. This is useful for sharing navigation blocking state across multiple components, such as when a form has unsaved changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_30

LANGUAGE: tsx
CODE:
```
'use client'

import { createContext, useState, useContext } from 'react'

interface NavigationBlockerContextType {
  isBlocked: boolean
  setIsBlocked: (isBlocked: boolean) => void
}

export const NavigationBlockerContext =
  createContext<NavigationBlockerContextType>({
    isBlocked: false,
    setIsBlocked: () => {},
  })

export function NavigationBlockerProvider({
  children,
}: {
  children: React.ReactNode
}) {
  const [isBlocked, setIsBlocked] = useState(false)

  return (
    <NavigationBlockerContext.Provider value={{ isBlocked, setIsBlocked }}>
      {children}
    </NavigationBlockerContext.Provider>
  )
}

export function useNavigationBlocker() {
  return useContext(NavigationBlockerContext)
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { createContext, useState, useContext } from 'react'

export const NavigationBlockerContext = createContext({
  isBlocked: false,
  setIsBlocked: () => {},
})

export function NavigationBlockerProvider({ children }) {
  const [isBlocked, setIsBlocked] = useState(false)

  return (
    <NavigationBlockerContext.Provider value={{ isBlocked, setIsBlocked }}>
      {children}
    </NavigationBlockerContext.Provider>
  )
}

export function useNavigationBlocker() {
  return useContext(NavigationBlockerContext)
}
```

----------------------------------------

TITLE: Cache Synchronous Crypto API Calls in Next.js Server Components
DESCRIPTION: To resolve the error when a synchronously generated random value can be reused across requests, move the crypto API call inside a `"use cache"` scope. This explicitly communicates to Next.js that the value is cacheable, preventing the error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-crypto.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
async function getCachedData(token: string) {
  "use cache"
  return db.query(token, ...)
}

export default async function Page() {
  const token = crypto.getRandomUUID()
  const data = await getCachedData(token);
  return ...
}
```

LANGUAGE: jsx
CODE:
```
async function getCachedData() {
  "use cache"
  const token = crypto.getRandomUUID()
  return db.query(token, ...)
}

export default async function Page() {
  const data = await getCachedData();
  return ...
}
```

----------------------------------------

TITLE: Cypress Component Test for Next.js App Router Page (TSX)
DESCRIPTION: This test snippet demonstrates how to write a Cypress component test for a Next.js App Router page. It mounts the `Page` component, asserts that an `h1` element contains 'Home', and verifies the visibility of a link to '/about', noting that following the link is better suited for E2E tests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/testing/cypress.mdx#_snippet_13

LANGUAGE: TypeScript
CODE:
```
import Page from '../../app/page'

describe('<Page />', () => {
  it('should render and display expected content', () => {
    // Mount the React component for the Home page
    cy.mount(<Page />)

    // The new page should contain an h1 with "Home"
    cy.get('h1').contains('Home')

    // Validate that a link with the expected URL is present
    // Following the link is better suited to an E2E test
    cy.get('a[href="/about"]').should('be.visible')
  })
})
```

----------------------------------------

TITLE: Apply Shared Open Graph Image to Next.js About Page
DESCRIPTION: Imports and applies the `openGraphImage` constant to the metadata of `app/about/page.js`. This demonstrates how shared metadata can be consistently used across different child pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_51

LANGUAGE: jsx
CODE:
```
import { openGraphImage } from '../shared-metadata'

export const metadata = {
  openGraph: {
    ...openGraphImage,
    title: 'About',
  },
}
```