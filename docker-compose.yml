version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: ragserver-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-ragserver}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ragserver_password}
      POSTGRES_DB: ${POSTGRES_DB:-ragserver}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ragserver}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ragserver-network
    restart: unless-stopped

  # Redis for task queue and caching
  redis:
    image: redis:7-alpine
    container_name: ragserver-redis
    env_file:
      - .env
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-ragserver_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ragserver-network
    restart: unless-stopped

  # MinIO for object storage
  minio:
    image: minio/minio:latest
    container_name: ragserver-minio
    env_file:
      - .env
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-ragserver}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-ragserver_minio_password}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ragserver-network
    restart: unless-stopped

  # MinIO Client - create buckets on startup
  minio-init:
    image: minio/mc:latest
    container_name: ragserver-minio-init
    env_file:
      - .env
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 $${MINIO_ACCESS_KEY:-ragserver} $${MINIO_SECRET_KEY:-ragserver_minio_password};
      mc mb myminio/documents --ignore-existing;
      mc mb myminio/avatars --ignore-existing;
      mc mb myminio/temp --ignore-existing;
      mc anonymous set download myminio/avatars;
      echo 'MinIO buckets initialized';
      "
    networks:
      - ragserver-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ragserver-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - ragserver-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ragserver-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: ''
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - ragserver-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ragserver-network:
    driver: bridge

